// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Bitcoin.proto

#include "Bitcoin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace opentxs {
namespace OTDB {
class BitcoinAcct_InternalPBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BitcoinAcct_InternalPB>
      _instance;
} _BitcoinAcct_InternalPB_default_instance_;
class BitcoinServer_InternalPBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BitcoinServer_InternalPB>
      _instance;
} _BitcoinServer_InternalPB_default_instance_;
class RippleServer_InternalPBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RippleServer_InternalPB>
      _instance;
} _RippleServer_InternalPB_default_instance_;
class LoomServer_InternalPBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoomServer_InternalPB>
      _instance;
} _LoomServer_InternalPB_default_instance_;
}  // namespace OTDB
}  // namespace opentxs
namespace protobuf_Bitcoin_2eproto {
void InitDefaultsBitcoinAcct_InternalPBImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::opentxs::OTDB::_BitcoinAcct_InternalPB_default_instance_;
    new (ptr) ::opentxs::OTDB::BitcoinAcct_InternalPB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::OTDB::BitcoinAcct_InternalPB::InitAsDefaultInstance();
}

void InitDefaultsBitcoinAcct_InternalPB() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBitcoinAcct_InternalPBImpl);
}

void InitDefaultsBitcoinServer_InternalPBImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::opentxs::OTDB::_BitcoinServer_InternalPB_default_instance_;
    new (ptr) ::opentxs::OTDB::BitcoinServer_InternalPB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::OTDB::BitcoinServer_InternalPB::InitAsDefaultInstance();
}

void InitDefaultsBitcoinServer_InternalPB() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBitcoinServer_InternalPBImpl);
}

void InitDefaultsRippleServer_InternalPBImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::opentxs::OTDB::_RippleServer_InternalPB_default_instance_;
    new (ptr) ::opentxs::OTDB::RippleServer_InternalPB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::OTDB::RippleServer_InternalPB::InitAsDefaultInstance();
}

void InitDefaultsRippleServer_InternalPB() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRippleServer_InternalPBImpl);
}

void InitDefaultsLoomServer_InternalPBImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::opentxs::OTDB::_LoomServer_InternalPB_default_instance_;
    new (ptr) ::opentxs::OTDB::LoomServer_InternalPB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::OTDB::LoomServer_InternalPB::InitAsDefaultInstance();
}

void InitDefaultsLoomServer_InternalPB() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoomServer_InternalPBImpl);
}

}  // namespace protobuf_Bitcoin_2eproto
namespace opentxs {
namespace OTDB {

// ===================================================================

void BitcoinAcct_InternalPB::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BitcoinAcct_InternalPB::kGuiLabelFieldNumber;
const int BitcoinAcct_InternalPB::kNotaryIdFieldNumber;
const int BitcoinAcct_InternalPB::kAcctIdFieldNumber;
const int BitcoinAcct_InternalPB::kBitcoinAcctNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BitcoinAcct_InternalPB::BitcoinAcct_InternalPB()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Bitcoin_2eproto::InitDefaultsBitcoinAcct_InternalPB();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.OTDB.BitcoinAcct_InternalPB)
}
BitcoinAcct_InternalPB::BitcoinAcct_InternalPB(const BitcoinAcct_InternalPB& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gui_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gui_label()) {
    gui_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gui_label_);
  }
  notary_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_notary_id()) {
    notary_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notary_id_);
  }
  acct_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_acct_id()) {
    acct_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acct_id_);
  }
  bitcoin_acct_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bitcoin_acct_name()) {
    bitcoin_acct_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitcoin_acct_name_);
  }
  // @@protoc_insertion_point(copy_constructor:opentxs.OTDB.BitcoinAcct_InternalPB)
}

void BitcoinAcct_InternalPB::SharedCtor() {
  _cached_size_ = 0;
  gui_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notary_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acct_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitcoin_acct_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BitcoinAcct_InternalPB::~BitcoinAcct_InternalPB() {
  // @@protoc_insertion_point(destructor:opentxs.OTDB.BitcoinAcct_InternalPB)
  SharedDtor();
}

void BitcoinAcct_InternalPB::SharedDtor() {
  gui_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notary_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acct_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitcoin_acct_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BitcoinAcct_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BitcoinAcct_InternalPB& BitcoinAcct_InternalPB::default_instance() {
  ::protobuf_Bitcoin_2eproto::InitDefaultsBitcoinAcct_InternalPB();
  return *internal_default_instance();
}

BitcoinAcct_InternalPB* BitcoinAcct_InternalPB::New(::google::protobuf::Arena* arena) const {
  BitcoinAcct_InternalPB* n = new BitcoinAcct_InternalPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BitcoinAcct_InternalPB::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.OTDB.BitcoinAcct_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!gui_label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gui_label_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!notary_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*notary_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!acct_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*acct_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!bitcoin_acct_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bitcoin_acct_name_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BitcoinAcct_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.OTDB.BitcoinAcct_InternalPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gui_label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gui_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string notary_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notary_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string acct_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acct_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bitcoin_acct_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bitcoin_acct_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.OTDB.BitcoinAcct_InternalPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.OTDB.BitcoinAcct_InternalPB)
  return false;
#undef DO_
}

void BitcoinAcct_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.OTDB.BitcoinAcct_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gui_label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gui_label(), output);
  }

  // optional string notary_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->notary_id(), output);
  }

  // optional string acct_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->acct_id(), output);
  }

  // optional string bitcoin_acct_name = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bitcoin_acct_name(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.OTDB.BitcoinAcct_InternalPB)
}

size_t BitcoinAcct_InternalPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.OTDB.BitcoinAcct_InternalPB)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional string gui_label = 1;
    if (has_gui_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gui_label());
    }

    // optional string notary_id = 2;
    if (has_notary_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notary_id());
    }

    // optional string acct_id = 3;
    if (has_acct_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acct_id());
    }

    // optional string bitcoin_acct_name = 4;
    if (has_bitcoin_acct_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bitcoin_acct_name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BitcoinAcct_InternalPB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BitcoinAcct_InternalPB*>(&from));
}

void BitcoinAcct_InternalPB::MergeFrom(const BitcoinAcct_InternalPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.OTDB.BitcoinAcct_InternalPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gui_label();
      gui_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gui_label_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_notary_id();
      notary_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notary_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_acct_id();
      acct_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acct_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_bitcoin_acct_name();
      bitcoin_acct_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitcoin_acct_name_);
    }
  }
}

void BitcoinAcct_InternalPB::CopyFrom(const BitcoinAcct_InternalPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.OTDB.BitcoinAcct_InternalPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitcoinAcct_InternalPB::IsInitialized() const {
  return true;
}

void BitcoinAcct_InternalPB::Swap(BitcoinAcct_InternalPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BitcoinAcct_InternalPB::InternalSwap(BitcoinAcct_InternalPB* other) {
  using std::swap;
  gui_label_.Swap(&other->gui_label_);
  notary_id_.Swap(&other->notary_id_);
  acct_id_.Swap(&other->acct_id_);
  bitcoin_acct_name_.Swap(&other->bitcoin_acct_name_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string BitcoinAcct_InternalPB::GetTypeName() const {
  return "opentxs.OTDB.BitcoinAcct_InternalPB";
}


// ===================================================================

void BitcoinServer_InternalPB::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BitcoinServer_InternalPB::kGuiLabelFieldNumber;
const int BitcoinServer_InternalPB::kNotaryIdFieldNumber;
const int BitcoinServer_InternalPB::kServerTypeFieldNumber;
const int BitcoinServer_InternalPB::kServerHostFieldNumber;
const int BitcoinServer_InternalPB::kServerPortFieldNumber;
const int BitcoinServer_InternalPB::kBitcoinUsernameFieldNumber;
const int BitcoinServer_InternalPB::kBitcoinPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BitcoinServer_InternalPB::BitcoinServer_InternalPB()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Bitcoin_2eproto::InitDefaultsBitcoinServer_InternalPB();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.OTDB.BitcoinServer_InternalPB)
}
BitcoinServer_InternalPB::BitcoinServer_InternalPB(const BitcoinServer_InternalPB& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gui_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gui_label()) {
    gui_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gui_label_);
  }
  notary_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_notary_id()) {
    notary_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notary_id_);
  }
  server_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_type()) {
    server_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_type_);
  }
  server_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_host()) {
    server_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_host_);
  }
  server_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_port()) {
    server_port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_port_);
  }
  bitcoin_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bitcoin_username()) {
    bitcoin_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitcoin_username_);
  }
  bitcoin_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bitcoin_password()) {
    bitcoin_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitcoin_password_);
  }
  // @@protoc_insertion_point(copy_constructor:opentxs.OTDB.BitcoinServer_InternalPB)
}

void BitcoinServer_InternalPB::SharedCtor() {
  _cached_size_ = 0;
  gui_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notary_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitcoin_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitcoin_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BitcoinServer_InternalPB::~BitcoinServer_InternalPB() {
  // @@protoc_insertion_point(destructor:opentxs.OTDB.BitcoinServer_InternalPB)
  SharedDtor();
}

void BitcoinServer_InternalPB::SharedDtor() {
  gui_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notary_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_port_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitcoin_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitcoin_password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BitcoinServer_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BitcoinServer_InternalPB& BitcoinServer_InternalPB::default_instance() {
  ::protobuf_Bitcoin_2eproto::InitDefaultsBitcoinServer_InternalPB();
  return *internal_default_instance();
}

BitcoinServer_InternalPB* BitcoinServer_InternalPB::New(::google::protobuf::Arena* arena) const {
  BitcoinServer_InternalPB* n = new BitcoinServer_InternalPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BitcoinServer_InternalPB::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.OTDB.BitcoinServer_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!gui_label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gui_label_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!notary_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*notary_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!server_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*server_type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!server_host_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*server_host_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!server_port_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*server_port_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!bitcoin_username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bitcoin_username_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!bitcoin_password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bitcoin_password_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BitcoinServer_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.OTDB.BitcoinServer_InternalPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gui_label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gui_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string notary_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notary_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string server_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string server_host = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_host()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string server_port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bitcoin_username = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bitcoin_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bitcoin_password = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bitcoin_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.OTDB.BitcoinServer_InternalPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.OTDB.BitcoinServer_InternalPB)
  return false;
#undef DO_
}

void BitcoinServer_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.OTDB.BitcoinServer_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gui_label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gui_label(), output);
  }

  // optional string notary_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->notary_id(), output);
  }

  // optional string server_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->server_type(), output);
  }

  // optional string server_host = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->server_host(), output);
  }

  // optional string server_port = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->server_port(), output);
  }

  // optional string bitcoin_username = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->bitcoin_username(), output);
  }

  // optional string bitcoin_password = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->bitcoin_password(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.OTDB.BitcoinServer_InternalPB)
}

size_t BitcoinServer_InternalPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.OTDB.BitcoinServer_InternalPB)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional string gui_label = 1;
    if (has_gui_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gui_label());
    }

    // optional string notary_id = 2;
    if (has_notary_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notary_id());
    }

    // optional string server_type = 3;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_type());
    }

    // optional string server_host = 4;
    if (has_server_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_host());
    }

    // optional string server_port = 5;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_port());
    }

    // optional string bitcoin_username = 6;
    if (has_bitcoin_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bitcoin_username());
    }

    // optional string bitcoin_password = 7;
    if (has_bitcoin_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bitcoin_password());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BitcoinServer_InternalPB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BitcoinServer_InternalPB*>(&from));
}

void BitcoinServer_InternalPB::MergeFrom(const BitcoinServer_InternalPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.OTDB.BitcoinServer_InternalPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gui_label();
      gui_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gui_label_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_notary_id();
      notary_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notary_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_server_type();
      server_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_type_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_server_host();
      server_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_host_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_server_port();
      server_port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_port_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_bitcoin_username();
      bitcoin_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitcoin_username_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_bitcoin_password();
      bitcoin_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitcoin_password_);
    }
  }
}

void BitcoinServer_InternalPB::CopyFrom(const BitcoinServer_InternalPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.OTDB.BitcoinServer_InternalPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitcoinServer_InternalPB::IsInitialized() const {
  return true;
}

void BitcoinServer_InternalPB::Swap(BitcoinServer_InternalPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BitcoinServer_InternalPB::InternalSwap(BitcoinServer_InternalPB* other) {
  using std::swap;
  gui_label_.Swap(&other->gui_label_);
  notary_id_.Swap(&other->notary_id_);
  server_type_.Swap(&other->server_type_);
  server_host_.Swap(&other->server_host_);
  server_port_.Swap(&other->server_port_);
  bitcoin_username_.Swap(&other->bitcoin_username_);
  bitcoin_password_.Swap(&other->bitcoin_password_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string BitcoinServer_InternalPB::GetTypeName() const {
  return "opentxs.OTDB.BitcoinServer_InternalPB";
}


// ===================================================================

void RippleServer_InternalPB::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RippleServer_InternalPB::kGuiLabelFieldNumber;
const int RippleServer_InternalPB::kNotaryIdFieldNumber;
const int RippleServer_InternalPB::kServerTypeFieldNumber;
const int RippleServer_InternalPB::kServerHostFieldNumber;
const int RippleServer_InternalPB::kServerPortFieldNumber;
const int RippleServer_InternalPB::kRippleUsernameFieldNumber;
const int RippleServer_InternalPB::kRipplePasswordFieldNumber;
const int RippleServer_InternalPB::kNamefieldIdFieldNumber;
const int RippleServer_InternalPB::kPassfieldIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RippleServer_InternalPB::RippleServer_InternalPB()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Bitcoin_2eproto::InitDefaultsRippleServer_InternalPB();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.OTDB.RippleServer_InternalPB)
}
RippleServer_InternalPB::RippleServer_InternalPB(const RippleServer_InternalPB& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gui_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gui_label()) {
    gui_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gui_label_);
  }
  notary_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_notary_id()) {
    notary_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notary_id_);
  }
  server_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_type()) {
    server_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_type_);
  }
  server_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_host()) {
    server_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_host_);
  }
  server_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_port()) {
    server_port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_port_);
  }
  ripple_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ripple_username()) {
    ripple_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ripple_username_);
  }
  ripple_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ripple_password()) {
    ripple_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ripple_password_);
  }
  namefield_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_namefield_id()) {
    namefield_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namefield_id_);
  }
  passfield_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_passfield_id()) {
    passfield_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passfield_id_);
  }
  // @@protoc_insertion_point(copy_constructor:opentxs.OTDB.RippleServer_InternalPB)
}

void RippleServer_InternalPB::SharedCtor() {
  _cached_size_ = 0;
  gui_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notary_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ripple_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ripple_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namefield_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passfield_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RippleServer_InternalPB::~RippleServer_InternalPB() {
  // @@protoc_insertion_point(destructor:opentxs.OTDB.RippleServer_InternalPB)
  SharedDtor();
}

void RippleServer_InternalPB::SharedDtor() {
  gui_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notary_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_port_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ripple_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ripple_password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namefield_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passfield_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RippleServer_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RippleServer_InternalPB& RippleServer_InternalPB::default_instance() {
  ::protobuf_Bitcoin_2eproto::InitDefaultsRippleServer_InternalPB();
  return *internal_default_instance();
}

RippleServer_InternalPB* RippleServer_InternalPB::New(::google::protobuf::Arena* arena) const {
  RippleServer_InternalPB* n = new RippleServer_InternalPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RippleServer_InternalPB::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.OTDB.RippleServer_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!gui_label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gui_label_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!notary_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*notary_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!server_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*server_type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!server_host_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*server_host_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!server_port_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*server_port_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!ripple_username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ripple_username_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!ripple_password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ripple_password_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!namefield_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*namefield_id_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(!passfield_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*passfield_id_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RippleServer_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.OTDB.RippleServer_InternalPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gui_label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gui_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string notary_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notary_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string server_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string server_host = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_host()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string server_port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ripple_username = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ripple_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ripple_password = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ripple_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string namefield_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namefield_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string passfield_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passfield_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.OTDB.RippleServer_InternalPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.OTDB.RippleServer_InternalPB)
  return false;
#undef DO_
}

void RippleServer_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.OTDB.RippleServer_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gui_label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gui_label(), output);
  }

  // optional string notary_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->notary_id(), output);
  }

  // optional string server_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->server_type(), output);
  }

  // optional string server_host = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->server_host(), output);
  }

  // optional string server_port = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->server_port(), output);
  }

  // optional string ripple_username = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ripple_username(), output);
  }

  // optional string ripple_password = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ripple_password(), output);
  }

  // optional string namefield_id = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->namefield_id(), output);
  }

  // optional string passfield_id = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->passfield_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.OTDB.RippleServer_InternalPB)
}

size_t RippleServer_InternalPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.OTDB.RippleServer_InternalPB)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string gui_label = 1;
    if (has_gui_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gui_label());
    }

    // optional string notary_id = 2;
    if (has_notary_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notary_id());
    }

    // optional string server_type = 3;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_type());
    }

    // optional string server_host = 4;
    if (has_server_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_host());
    }

    // optional string server_port = 5;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_port());
    }

    // optional string ripple_username = 6;
    if (has_ripple_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ripple_username());
    }

    // optional string ripple_password = 7;
    if (has_ripple_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ripple_password());
    }

    // optional string namefield_id = 8;
    if (has_namefield_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->namefield_id());
    }

  }
  // optional string passfield_id = 9;
  if (has_passfield_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->passfield_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RippleServer_InternalPB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RippleServer_InternalPB*>(&from));
}

void RippleServer_InternalPB::MergeFrom(const RippleServer_InternalPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.OTDB.RippleServer_InternalPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gui_label();
      gui_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gui_label_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_notary_id();
      notary_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notary_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_server_type();
      server_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_type_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_server_host();
      server_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_host_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_server_port();
      server_port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_port_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_ripple_username();
      ripple_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ripple_username_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_ripple_password();
      ripple_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ripple_password_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_namefield_id();
      namefield_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namefield_id_);
    }
  }
  if (cached_has_bits & 0x00000100u) {
    set_has_passfield_id();
    passfield_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passfield_id_);
  }
}

void RippleServer_InternalPB::CopyFrom(const RippleServer_InternalPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.OTDB.RippleServer_InternalPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RippleServer_InternalPB::IsInitialized() const {
  return true;
}

void RippleServer_InternalPB::Swap(RippleServer_InternalPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RippleServer_InternalPB::InternalSwap(RippleServer_InternalPB* other) {
  using std::swap;
  gui_label_.Swap(&other->gui_label_);
  notary_id_.Swap(&other->notary_id_);
  server_type_.Swap(&other->server_type_);
  server_host_.Swap(&other->server_host_);
  server_port_.Swap(&other->server_port_);
  ripple_username_.Swap(&other->ripple_username_);
  ripple_password_.Swap(&other->ripple_password_);
  namefield_id_.Swap(&other->namefield_id_);
  passfield_id_.Swap(&other->passfield_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string RippleServer_InternalPB::GetTypeName() const {
  return "opentxs.OTDB.RippleServer_InternalPB";
}


// ===================================================================

void LoomServer_InternalPB::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoomServer_InternalPB::kGuiLabelFieldNumber;
const int LoomServer_InternalPB::kNotaryIdFieldNumber;
const int LoomServer_InternalPB::kServerTypeFieldNumber;
const int LoomServer_InternalPB::kServerHostFieldNumber;
const int LoomServer_InternalPB::kServerPortFieldNumber;
const int LoomServer_InternalPB::kLoomUsernameFieldNumber;
const int LoomServer_InternalPB::kNamefieldIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoomServer_InternalPB::LoomServer_InternalPB()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Bitcoin_2eproto::InitDefaultsLoomServer_InternalPB();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.OTDB.LoomServer_InternalPB)
}
LoomServer_InternalPB::LoomServer_InternalPB(const LoomServer_InternalPB& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gui_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gui_label()) {
    gui_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gui_label_);
  }
  notary_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_notary_id()) {
    notary_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notary_id_);
  }
  server_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_type()) {
    server_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_type_);
  }
  server_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_host()) {
    server_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_host_);
  }
  server_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_port()) {
    server_port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_port_);
  }
  loom_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_loom_username()) {
    loom_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loom_username_);
  }
  namefield_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_namefield_id()) {
    namefield_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namefield_id_);
  }
  // @@protoc_insertion_point(copy_constructor:opentxs.OTDB.LoomServer_InternalPB)
}

void LoomServer_InternalPB::SharedCtor() {
  _cached_size_ = 0;
  gui_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notary_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loom_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namefield_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LoomServer_InternalPB::~LoomServer_InternalPB() {
  // @@protoc_insertion_point(destructor:opentxs.OTDB.LoomServer_InternalPB)
  SharedDtor();
}

void LoomServer_InternalPB::SharedDtor() {
  gui_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notary_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_port_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loom_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namefield_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoomServer_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoomServer_InternalPB& LoomServer_InternalPB::default_instance() {
  ::protobuf_Bitcoin_2eproto::InitDefaultsLoomServer_InternalPB();
  return *internal_default_instance();
}

LoomServer_InternalPB* LoomServer_InternalPB::New(::google::protobuf::Arena* arena) const {
  LoomServer_InternalPB* n = new LoomServer_InternalPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoomServer_InternalPB::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.OTDB.LoomServer_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!gui_label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gui_label_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!notary_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*notary_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!server_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*server_type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!server_host_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*server_host_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!server_port_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*server_port_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!loom_username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*loom_username_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!namefield_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*namefield_id_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoomServer_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.OTDB.LoomServer_InternalPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gui_label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gui_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string notary_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notary_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string server_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string server_host = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_host()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string server_port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string loom_username = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loom_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string namefield_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namefield_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.OTDB.LoomServer_InternalPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.OTDB.LoomServer_InternalPB)
  return false;
#undef DO_
}

void LoomServer_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.OTDB.LoomServer_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gui_label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gui_label(), output);
  }

  // optional string notary_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->notary_id(), output);
  }

  // optional string server_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->server_type(), output);
  }

  // optional string server_host = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->server_host(), output);
  }

  // optional string server_port = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->server_port(), output);
  }

  // optional string loom_username = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->loom_username(), output);
  }

  // optional string namefield_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->namefield_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.OTDB.LoomServer_InternalPB)
}

size_t LoomServer_InternalPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.OTDB.LoomServer_InternalPB)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional string gui_label = 1;
    if (has_gui_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gui_label());
    }

    // optional string notary_id = 2;
    if (has_notary_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notary_id());
    }

    // optional string server_type = 3;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_type());
    }

    // optional string server_host = 4;
    if (has_server_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_host());
    }

    // optional string server_port = 5;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_port());
    }

    // optional string loom_username = 6;
    if (has_loom_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loom_username());
    }

    // optional string namefield_id = 7;
    if (has_namefield_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->namefield_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoomServer_InternalPB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoomServer_InternalPB*>(&from));
}

void LoomServer_InternalPB::MergeFrom(const LoomServer_InternalPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.OTDB.LoomServer_InternalPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gui_label();
      gui_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gui_label_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_notary_id();
      notary_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notary_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_server_type();
      server_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_type_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_server_host();
      server_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_host_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_server_port();
      server_port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_port_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_loom_username();
      loom_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loom_username_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_namefield_id();
      namefield_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namefield_id_);
    }
  }
}

void LoomServer_InternalPB::CopyFrom(const LoomServer_InternalPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.OTDB.LoomServer_InternalPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoomServer_InternalPB::IsInitialized() const {
  return true;
}

void LoomServer_InternalPB::Swap(LoomServer_InternalPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoomServer_InternalPB::InternalSwap(LoomServer_InternalPB* other) {
  using std::swap;
  gui_label_.Swap(&other->gui_label_);
  notary_id_.Swap(&other->notary_id_);
  server_type_.Swap(&other->server_type_);
  server_host_.Swap(&other->server_host_);
  server_port_.Swap(&other->server_port_);
  loom_username_.Swap(&other->loom_username_);
  namefield_id_.Swap(&other->namefield_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string LoomServer_InternalPB::GetTypeName() const {
  return "opentxs.OTDB.LoomServer_InternalPB";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace OTDB
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)
