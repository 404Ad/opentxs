// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Markets.proto

#pragma once

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>   // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_Markets_2eproto
{
// Internal implementation detail -- do not use these members.
struct TableStruct {
    static const ::google::protobuf::internal::ParseTableField entries[];
    static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
    static const ::google::protobuf::internal::ParseTable schema[10];
    static const ::google::protobuf::internal::FieldMetadata field_metadata[];
    static const ::google::protobuf::internal::SerializationTable
        serialization_table[];
    static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsMarketData_InternalPBImpl();
void InitDefaultsMarketData_InternalPB();
void InitDefaultsMarketList_InternalPBImpl();
void InitDefaultsMarketList_InternalPB();
void InitDefaultsOfferDataMarket_InternalPBImpl();
void InitDefaultsOfferDataMarket_InternalPB();
void InitDefaultsOfferListMarket_InternalPBImpl();
void InitDefaultsOfferListMarket_InternalPB();
void InitDefaultsTradeDataMarket_InternalPBImpl();
void InitDefaultsTradeDataMarket_InternalPB();
void InitDefaultsTradeListMarket_InternalPBImpl();
void InitDefaultsTradeListMarket_InternalPB();
void InitDefaultsOfferDataNym_InternalPBImpl();
void InitDefaultsOfferDataNym_InternalPB();
void InitDefaultsOfferListNym_InternalPBImpl();
void InitDefaultsOfferListNym_InternalPB();
void InitDefaultsTradeDataNym_InternalPBImpl();
void InitDefaultsTradeDataNym_InternalPB();
void InitDefaultsTradeListNym_InternalPBImpl();
void InitDefaultsTradeListNym_InternalPB();
inline void InitDefaults()
{
    InitDefaultsMarketData_InternalPB();
    InitDefaultsMarketList_InternalPB();
    InitDefaultsOfferDataMarket_InternalPB();
    InitDefaultsOfferListMarket_InternalPB();
    InitDefaultsTradeDataMarket_InternalPB();
    InitDefaultsTradeListMarket_InternalPB();
    InitDefaultsOfferDataNym_InternalPB();
    InitDefaultsOfferListNym_InternalPB();
    InitDefaultsTradeDataNym_InternalPB();
    InitDefaultsTradeListNym_InternalPB();
}
}  // namespace protobuf_Markets_2eproto
namespace opentxs
{
namespace OTDB
{
class MarketData_InternalPB;
class MarketData_InternalPBDefaultTypeInternal;
extern MarketData_InternalPBDefaultTypeInternal
    _MarketData_InternalPB_default_instance_;
class MarketList_InternalPB;
class MarketList_InternalPBDefaultTypeInternal;
extern MarketList_InternalPBDefaultTypeInternal
    _MarketList_InternalPB_default_instance_;
class OfferDataMarket_InternalPB;
class OfferDataMarket_InternalPBDefaultTypeInternal;
extern OfferDataMarket_InternalPBDefaultTypeInternal
    _OfferDataMarket_InternalPB_default_instance_;
class OfferDataNym_InternalPB;
class OfferDataNym_InternalPBDefaultTypeInternal;
extern OfferDataNym_InternalPBDefaultTypeInternal
    _OfferDataNym_InternalPB_default_instance_;
class OfferListMarket_InternalPB;
class OfferListMarket_InternalPBDefaultTypeInternal;
extern OfferListMarket_InternalPBDefaultTypeInternal
    _OfferListMarket_InternalPB_default_instance_;
class OfferListNym_InternalPB;
class OfferListNym_InternalPBDefaultTypeInternal;
extern OfferListNym_InternalPBDefaultTypeInternal
    _OfferListNym_InternalPB_default_instance_;
class TradeDataMarket_InternalPB;
class TradeDataMarket_InternalPBDefaultTypeInternal;
extern TradeDataMarket_InternalPBDefaultTypeInternal
    _TradeDataMarket_InternalPB_default_instance_;
class TradeDataNym_InternalPB;
class TradeDataNym_InternalPBDefaultTypeInternal;
extern TradeDataNym_InternalPBDefaultTypeInternal
    _TradeDataNym_InternalPB_default_instance_;
class TradeListMarket_InternalPB;
class TradeListMarket_InternalPBDefaultTypeInternal;
extern TradeListMarket_InternalPBDefaultTypeInternal
    _TradeListMarket_InternalPB_default_instance_;
class TradeListNym_InternalPB;
class TradeListNym_InternalPBDefaultTypeInternal;
extern TradeListNym_InternalPBDefaultTypeInternal
    _TradeListNym_InternalPB_default_instance_;
}  // namespace OTDB
}  // namespace opentxs
namespace opentxs
{
namespace OTDB
{

// ===================================================================

class MarketData_InternalPB : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.OTDB.MarketData_InternalPB)
                                                                      */
{
public:
    MarketData_InternalPB();
    virtual ~MarketData_InternalPB();

    MarketData_InternalPB(const MarketData_InternalPB& from);

    inline MarketData_InternalPB& operator=(const MarketData_InternalPB& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    MarketData_InternalPB(MarketData_InternalPB&& from) noexcept
        : MarketData_InternalPB()
    {
        *this = ::std::move(from);
    }

    inline MarketData_InternalPB& operator=(
        MarketData_InternalPB&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::std::string& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::std::string* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const MarketData_InternalPB& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const MarketData_InternalPB* internal_default_instance()
    {
        return reinterpret_cast<const MarketData_InternalPB*>(
            &_MarketData_InternalPB_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 0;

    void Swap(MarketData_InternalPB* other);
    friend void swap(MarketData_InternalPB& a, MarketData_InternalPB& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline MarketData_InternalPB* New() const PROTOBUF_FINAL
    {
        return New(NULL);
    }

    MarketData_InternalPB* New(::google::protobuf::Arena* arena) const
        PROTOBUF_FINAL;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
        PROTOBUF_FINAL;
    void CopyFrom(const MarketData_InternalPB& from);
    void MergeFrom(const MarketData_InternalPB& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    void DiscardUnknownFields();
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(MarketData_InternalPB* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

public:
    ::std::string GetTypeName() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional string gui_label = 1;
    bool has_gui_label() const;
    void clear_gui_label();
    static const int kGuiLabelFieldNumber = 1;
    const ::std::string& gui_label() const;
    void set_gui_label(const ::std::string& value);
#if LANG_CXX11
    void set_gui_label(::std::string&& value);
#endif
    void set_gui_label(const char* value);
    void set_gui_label(const char* value, size_t size);
    ::std::string* mutable_gui_label();
    ::std::string* release_gui_label();
    void set_allocated_gui_label(::std::string* gui_label);

    // optional string notary_id = 2;
    bool has_notary_id() const;
    void clear_notary_id();
    static const int kNotaryIdFieldNumber = 2;
    const ::std::string& notary_id() const;
    void set_notary_id(const ::std::string& value);
#if LANG_CXX11
    void set_notary_id(::std::string&& value);
#endif
    void set_notary_id(const char* value);
    void set_notary_id(const char* value, size_t size);
    ::std::string* mutable_notary_id();
    ::std::string* release_notary_id();
    void set_allocated_notary_id(::std::string* notary_id);

    // optional string market_id = 3;
    bool has_market_id() const;
    void clear_market_id();
    static const int kMarketIdFieldNumber = 3;
    const ::std::string& market_id() const;
    void set_market_id(const ::std::string& value);
#if LANG_CXX11
    void set_market_id(::std::string&& value);
#endif
    void set_market_id(const char* value);
    void set_market_id(const char* value, size_t size);
    ::std::string* mutable_market_id();
    ::std::string* release_market_id();
    void set_allocated_market_id(::std::string* market_id);

    // optional string instrument_definition_id = 4;
    bool has_instrument_definition_id() const;
    void clear_instrument_definition_id();
    static const int kInstrumentDefinitionIdFieldNumber = 4;
    const ::std::string& instrument_definition_id() const;
    void set_instrument_definition_id(const ::std::string& value);
#if LANG_CXX11
    void set_instrument_definition_id(::std::string&& value);
#endif
    void set_instrument_definition_id(const char* value);
    void set_instrument_definition_id(const char* value, size_t size);
    ::std::string* mutable_instrument_definition_id();
    ::std::string* release_instrument_definition_id();
    void set_allocated_instrument_definition_id(
        ::std::string* instrument_definition_id);

    // optional string currency_type_id = 5;
    bool has_currency_type_id() const;
    void clear_currency_type_id();
    static const int kCurrencyTypeIdFieldNumber = 5;
    const ::std::string& currency_type_id() const;
    void set_currency_type_id(const ::std::string& value);
#if LANG_CXX11
    void set_currency_type_id(::std::string&& value);
#endif
    void set_currency_type_id(const char* value);
    void set_currency_type_id(const char* value, size_t size);
    ::std::string* mutable_currency_type_id();
    ::std::string* release_currency_type_id();
    void set_allocated_currency_type_id(::std::string* currency_type_id);

    // optional string scale = 6;
    bool has_scale() const;
    void clear_scale();
    static const int kScaleFieldNumber = 6;
    const ::std::string& scale() const;
    void set_scale(const ::std::string& value);
#if LANG_CXX11
    void set_scale(::std::string&& value);
#endif
    void set_scale(const char* value);
    void set_scale(const char* value, size_t size);
    ::std::string* mutable_scale();
    ::std::string* release_scale();
    void set_allocated_scale(::std::string* scale);

    // optional string total_assets = 7;
    bool has_total_assets() const;
    void clear_total_assets();
    static const int kTotalAssetsFieldNumber = 7;
    const ::std::string& total_assets() const;
    void set_total_assets(const ::std::string& value);
#if LANG_CXX11
    void set_total_assets(::std::string&& value);
#endif
    void set_total_assets(const char* value);
    void set_total_assets(const char* value, size_t size);
    ::std::string* mutable_total_assets();
    ::std::string* release_total_assets();
    void set_allocated_total_assets(::std::string* total_assets);

    // optional string number_bids = 8;
    bool has_number_bids() const;
    void clear_number_bids();
    static const int kNumberBidsFieldNumber = 8;
    const ::std::string& number_bids() const;
    void set_number_bids(const ::std::string& value);
#if LANG_CXX11
    void set_number_bids(::std::string&& value);
#endif
    void set_number_bids(const char* value);
    void set_number_bids(const char* value, size_t size);
    ::std::string* mutable_number_bids();
    ::std::string* release_number_bids();
    void set_allocated_number_bids(::std::string* number_bids);

    // optional string number_asks = 9;
    bool has_number_asks() const;
    void clear_number_asks();
    static const int kNumberAsksFieldNumber = 9;
    const ::std::string& number_asks() const;
    void set_number_asks(const ::std::string& value);
#if LANG_CXX11
    void set_number_asks(::std::string&& value);
#endif
    void set_number_asks(const char* value);
    void set_number_asks(const char* value, size_t size);
    ::std::string* mutable_number_asks();
    ::std::string* release_number_asks();
    void set_allocated_number_asks(::std::string* number_asks);

    // optional string last_sale_price = 10;
    bool has_last_sale_price() const;
    void clear_last_sale_price();
    static const int kLastSalePriceFieldNumber = 10;
    const ::std::string& last_sale_price() const;
    void set_last_sale_price(const ::std::string& value);
#if LANG_CXX11
    void set_last_sale_price(::std::string&& value);
#endif
    void set_last_sale_price(const char* value);
    void set_last_sale_price(const char* value, size_t size);
    ::std::string* mutable_last_sale_price();
    ::std::string* release_last_sale_price();
    void set_allocated_last_sale_price(::std::string* last_sale_price);

    // optional string current_bid = 11;
    bool has_current_bid() const;
    void clear_current_bid();
    static const int kCurrentBidFieldNumber = 11;
    const ::std::string& current_bid() const;
    void set_current_bid(const ::std::string& value);
#if LANG_CXX11
    void set_current_bid(::std::string&& value);
#endif
    void set_current_bid(const char* value);
    void set_current_bid(const char* value, size_t size);
    ::std::string* mutable_current_bid();
    ::std::string* release_current_bid();
    void set_allocated_current_bid(::std::string* current_bid);

    // optional string current_ask = 12;
    bool has_current_ask() const;
    void clear_current_ask();
    static const int kCurrentAskFieldNumber = 12;
    const ::std::string& current_ask() const;
    void set_current_ask(const ::std::string& value);
#if LANG_CXX11
    void set_current_ask(::std::string&& value);
#endif
    void set_current_ask(const char* value);
    void set_current_ask(const char* value, size_t size);
    ::std::string* mutable_current_ask();
    ::std::string* release_current_ask();
    void set_allocated_current_ask(::std::string* current_ask);

    // optional string volume_trades = 13;
    bool has_volume_trades() const;
    void clear_volume_trades();
    static const int kVolumeTradesFieldNumber = 13;
    const ::std::string& volume_trades() const;
    void set_volume_trades(const ::std::string& value);
#if LANG_CXX11
    void set_volume_trades(::std::string&& value);
#endif
    void set_volume_trades(const char* value);
    void set_volume_trades(const char* value, size_t size);
    ::std::string* mutable_volume_trades();
    ::std::string* release_volume_trades();
    void set_allocated_volume_trades(::std::string* volume_trades);

    // optional string volume_assets = 14;
    bool has_volume_assets() const;
    void clear_volume_assets();
    static const int kVolumeAssetsFieldNumber = 14;
    const ::std::string& volume_assets() const;
    void set_volume_assets(const ::std::string& value);
#if LANG_CXX11
    void set_volume_assets(::std::string&& value);
#endif
    void set_volume_assets(const char* value);
    void set_volume_assets(const char* value, size_t size);
    ::std::string* mutable_volume_assets();
    ::std::string* release_volume_assets();
    void set_allocated_volume_assets(::std::string* volume_assets);

    // optional string volume_currency = 15;
    bool has_volume_currency() const;
    void clear_volume_currency();
    static const int kVolumeCurrencyFieldNumber = 15;
    const ::std::string& volume_currency() const;
    void set_volume_currency(const ::std::string& value);
#if LANG_CXX11
    void set_volume_currency(::std::string&& value);
#endif
    void set_volume_currency(const char* value);
    void set_volume_currency(const char* value, size_t size);
    ::std::string* mutable_volume_currency();
    ::std::string* release_volume_currency();
    void set_allocated_volume_currency(::std::string* volume_currency);

    // optional string recent_highest_bid = 16;
    bool has_recent_highest_bid() const;
    void clear_recent_highest_bid();
    static const int kRecentHighestBidFieldNumber = 16;
    const ::std::string& recent_highest_bid() const;
    void set_recent_highest_bid(const ::std::string& value);
#if LANG_CXX11
    void set_recent_highest_bid(::std::string&& value);
#endif
    void set_recent_highest_bid(const char* value);
    void set_recent_highest_bid(const char* value, size_t size);
    ::std::string* mutable_recent_highest_bid();
    ::std::string* release_recent_highest_bid();
    void set_allocated_recent_highest_bid(::std::string* recent_highest_bid);

    // optional string recent_lowest_ask = 17;
    bool has_recent_lowest_ask() const;
    void clear_recent_lowest_ask();
    static const int kRecentLowestAskFieldNumber = 17;
    const ::std::string& recent_lowest_ask() const;
    void set_recent_lowest_ask(const ::std::string& value);
#if LANG_CXX11
    void set_recent_lowest_ask(::std::string&& value);
#endif
    void set_recent_lowest_ask(const char* value);
    void set_recent_lowest_ask(const char* value, size_t size);
    ::std::string* mutable_recent_lowest_ask();
    ::std::string* release_recent_lowest_ask();
    void set_allocated_recent_lowest_ask(::std::string* recent_lowest_ask);

    // optional string last_sale_date = 18;
    bool has_last_sale_date() const;
    void clear_last_sale_date();
    static const int kLastSaleDateFieldNumber = 18;
    const ::std::string& last_sale_date() const;
    void set_last_sale_date(const ::std::string& value);
#if LANG_CXX11
    void set_last_sale_date(::std::string&& value);
#endif
    void set_last_sale_date(const char* value);
    void set_last_sale_date(const char* value, size_t size);
    ::std::string* mutable_last_sale_date();
    ::std::string* release_last_sale_date();
    void set_allocated_last_sale_date(::std::string* last_sale_date);

    // @@protoc_insertion_point(class_scope:opentxs.OTDB.MarketData_InternalPB)
private:
    void set_has_gui_label();
    void clear_has_gui_label();
    void set_has_notary_id();
    void clear_has_notary_id();
    void set_has_market_id();
    void clear_has_market_id();
    void set_has_instrument_definition_id();
    void clear_has_instrument_definition_id();
    void set_has_currency_type_id();
    void clear_has_currency_type_id();
    void set_has_scale();
    void clear_has_scale();
    void set_has_total_assets();
    void clear_has_total_assets();
    void set_has_number_bids();
    void clear_has_number_bids();
    void set_has_number_asks();
    void clear_has_number_asks();
    void set_has_last_sale_price();
    void clear_has_last_sale_price();
    void set_has_current_bid();
    void clear_has_current_bid();
    void set_has_current_ask();
    void clear_has_current_ask();
    void set_has_volume_trades();
    void clear_has_volume_trades();
    void set_has_volume_assets();
    void clear_has_volume_assets();
    void set_has_volume_currency();
    void clear_has_volume_currency();
    void set_has_recent_highest_bid();
    void clear_has_recent_highest_bid();
    void set_has_recent_lowest_ask();
    void clear_has_recent_lowest_ask();
    void set_has_last_sale_date();
    void clear_has_last_sale_date();

    ::google::protobuf::internal::InternalMetadataWithArenaLite
        _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr gui_label_;
    ::google::protobuf::internal::ArenaStringPtr notary_id_;
    ::google::protobuf::internal::ArenaStringPtr market_id_;
    ::google::protobuf::internal::ArenaStringPtr instrument_definition_id_;
    ::google::protobuf::internal::ArenaStringPtr currency_type_id_;
    ::google::protobuf::internal::ArenaStringPtr scale_;
    ::google::protobuf::internal::ArenaStringPtr total_assets_;
    ::google::protobuf::internal::ArenaStringPtr number_bids_;
    ::google::protobuf::internal::ArenaStringPtr number_asks_;
    ::google::protobuf::internal::ArenaStringPtr last_sale_price_;
    ::google::protobuf::internal::ArenaStringPtr current_bid_;
    ::google::protobuf::internal::ArenaStringPtr current_ask_;
    ::google::protobuf::internal::ArenaStringPtr volume_trades_;
    ::google::protobuf::internal::ArenaStringPtr volume_assets_;
    ::google::protobuf::internal::ArenaStringPtr volume_currency_;
    ::google::protobuf::internal::ArenaStringPtr recent_highest_bid_;
    ::google::protobuf::internal::ArenaStringPtr recent_lowest_ask_;
    ::google::protobuf::internal::ArenaStringPtr last_sale_date_;
    friend struct ::protobuf_Markets_2eproto::TableStruct;
    friend void ::protobuf_Markets_2eproto::
        InitDefaultsMarketData_InternalPBImpl();
};
// -------------------------------------------------------------------

class MarketList_InternalPB : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.OTDB.MarketList_InternalPB)
                                                                      */
{
public:
    MarketList_InternalPB();
    virtual ~MarketList_InternalPB();

    MarketList_InternalPB(const MarketList_InternalPB& from);

    inline MarketList_InternalPB& operator=(const MarketList_InternalPB& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    MarketList_InternalPB(MarketList_InternalPB&& from) noexcept
        : MarketList_InternalPB()
    {
        *this = ::std::move(from);
    }

    inline MarketList_InternalPB& operator=(
        MarketList_InternalPB&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::std::string& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::std::string* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const MarketList_InternalPB& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const MarketList_InternalPB* internal_default_instance()
    {
        return reinterpret_cast<const MarketList_InternalPB*>(
            &_MarketList_InternalPB_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 1;

    void Swap(MarketList_InternalPB* other);
    friend void swap(MarketList_InternalPB& a, MarketList_InternalPB& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline MarketList_InternalPB* New() const PROTOBUF_FINAL
    {
        return New(NULL);
    }

    MarketList_InternalPB* New(::google::protobuf::Arena* arena) const
        PROTOBUF_FINAL;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
        PROTOBUF_FINAL;
    void CopyFrom(const MarketList_InternalPB& from);
    void MergeFrom(const MarketList_InternalPB& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    void DiscardUnknownFields();
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(MarketList_InternalPB* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

public:
    ::std::string GetTypeName() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .opentxs.OTDB.MarketData_InternalPB market_data = 1;
    int market_data_size() const;
    void clear_market_data();
    static const int kMarketDataFieldNumber = 1;
    const ::opentxs::OTDB::MarketData_InternalPB& market_data(int index) const;
    ::opentxs::OTDB::MarketData_InternalPB* mutable_market_data(int index);
    ::opentxs::OTDB::MarketData_InternalPB* add_market_data();
    ::google::protobuf::RepeatedPtrField<
        ::opentxs::OTDB::MarketData_InternalPB>*
    mutable_market_data();
    const ::google::protobuf::RepeatedPtrField<
        ::opentxs::OTDB::MarketData_InternalPB>&
    market_data() const;

    // @@protoc_insertion_point(class_scope:opentxs.OTDB.MarketList_InternalPB)
private:
    ::google::protobuf::internal::InternalMetadataWithArenaLite
        _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::RepeatedPtrField<::opentxs::OTDB::MarketData_InternalPB>
        market_data_;
    friend struct ::protobuf_Markets_2eproto::TableStruct;
    friend void ::protobuf_Markets_2eproto::
        InitDefaultsMarketList_InternalPBImpl();
};
// -------------------------------------------------------------------

class OfferDataMarket_InternalPB : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.OTDB.OfferDataMarket_InternalPB)
                                                                           */
{
public:
    OfferDataMarket_InternalPB();
    virtual ~OfferDataMarket_InternalPB();

    OfferDataMarket_InternalPB(const OfferDataMarket_InternalPB& from);

    inline OfferDataMarket_InternalPB& operator=(
        const OfferDataMarket_InternalPB& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    OfferDataMarket_InternalPB(OfferDataMarket_InternalPB&& from) noexcept
        : OfferDataMarket_InternalPB()
    {
        *this = ::std::move(from);
    }

    inline OfferDataMarket_InternalPB& operator=(
        OfferDataMarket_InternalPB&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::std::string& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::std::string* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const OfferDataMarket_InternalPB& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const OfferDataMarket_InternalPB* internal_default_instance()
    {
        return reinterpret_cast<const OfferDataMarket_InternalPB*>(
            &_OfferDataMarket_InternalPB_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 2;

    void Swap(OfferDataMarket_InternalPB* other);
    friend void swap(
        OfferDataMarket_InternalPB& a,
        OfferDataMarket_InternalPB& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline OfferDataMarket_InternalPB* New() const PROTOBUF_FINAL
    {
        return New(NULL);
    }

    OfferDataMarket_InternalPB* New(::google::protobuf::Arena* arena) const
        PROTOBUF_FINAL;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
        PROTOBUF_FINAL;
    void CopyFrom(const OfferDataMarket_InternalPB& from);
    void MergeFrom(const OfferDataMarket_InternalPB& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    void DiscardUnknownFields();
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(OfferDataMarket_InternalPB* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

public:
    ::std::string GetTypeName() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional string gui_label = 1;
    bool has_gui_label() const;
    void clear_gui_label();
    static const int kGuiLabelFieldNumber = 1;
    const ::std::string& gui_label() const;
    void set_gui_label(const ::std::string& value);
#if LANG_CXX11
    void set_gui_label(::std::string&& value);
#endif
    void set_gui_label(const char* value);
    void set_gui_label(const char* value, size_t size);
    ::std::string* mutable_gui_label();
    ::std::string* release_gui_label();
    void set_allocated_gui_label(::std::string* gui_label);

    // optional string transaction_id = 2;
    bool has_transaction_id() const;
    void clear_transaction_id();
    static const int kTransactionIdFieldNumber = 2;
    const ::std::string& transaction_id() const;
    void set_transaction_id(const ::std::string& value);
#if LANG_CXX11
    void set_transaction_id(::std::string&& value);
#endif
    void set_transaction_id(const char* value);
    void set_transaction_id(const char* value, size_t size);
    ::std::string* mutable_transaction_id();
    ::std::string* release_transaction_id();
    void set_allocated_transaction_id(::std::string* transaction_id);

    // optional string price_per_scale = 3;
    bool has_price_per_scale() const;
    void clear_price_per_scale();
    static const int kPricePerScaleFieldNumber = 3;
    const ::std::string& price_per_scale() const;
    void set_price_per_scale(const ::std::string& value);
#if LANG_CXX11
    void set_price_per_scale(::std::string&& value);
#endif
    void set_price_per_scale(const char* value);
    void set_price_per_scale(const char* value, size_t size);
    ::std::string* mutable_price_per_scale();
    ::std::string* release_price_per_scale();
    void set_allocated_price_per_scale(::std::string* price_per_scale);

    // optional string available_assets = 4;
    bool has_available_assets() const;
    void clear_available_assets();
    static const int kAvailableAssetsFieldNumber = 4;
    const ::std::string& available_assets() const;
    void set_available_assets(const ::std::string& value);
#if LANG_CXX11
    void set_available_assets(::std::string&& value);
#endif
    void set_available_assets(const char* value);
    void set_available_assets(const char* value, size_t size);
    ::std::string* mutable_available_assets();
    ::std::string* release_available_assets();
    void set_allocated_available_assets(::std::string* available_assets);

    // optional string minimum_increment = 5;
    bool has_minimum_increment() const;
    void clear_minimum_increment();
    static const int kMinimumIncrementFieldNumber = 5;
    const ::std::string& minimum_increment() const;
    void set_minimum_increment(const ::std::string& value);
#if LANG_CXX11
    void set_minimum_increment(::std::string&& value);
#endif
    void set_minimum_increment(const char* value);
    void set_minimum_increment(const char* value, size_t size);
    ::std::string* mutable_minimum_increment();
    ::std::string* release_minimum_increment();
    void set_allocated_minimum_increment(::std::string* minimum_increment);

    // optional string date = 6;
    bool has_date() const;
    void clear_date();
    static const int kDateFieldNumber = 6;
    const ::std::string& date() const;
    void set_date(const ::std::string& value);
#if LANG_CXX11
    void set_date(::std::string&& value);
#endif
    void set_date(const char* value);
    void set_date(const char* value, size_t size);
    ::std::string* mutable_date();
    ::std::string* release_date();
    void set_allocated_date(::std::string* date);

    // @@protoc_insertion_point(class_scope:opentxs.OTDB.OfferDataMarket_InternalPB)
private:
    void set_has_gui_label();
    void clear_has_gui_label();
    void set_has_transaction_id();
    void clear_has_transaction_id();
    void set_has_price_per_scale();
    void clear_has_price_per_scale();
    void set_has_available_assets();
    void clear_has_available_assets();
    void set_has_minimum_increment();
    void clear_has_minimum_increment();
    void set_has_date();
    void clear_has_date();

    ::google::protobuf::internal::InternalMetadataWithArenaLite
        _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr gui_label_;
    ::google::protobuf::internal::ArenaStringPtr transaction_id_;
    ::google::protobuf::internal::ArenaStringPtr price_per_scale_;
    ::google::protobuf::internal::ArenaStringPtr available_assets_;
    ::google::protobuf::internal::ArenaStringPtr minimum_increment_;
    ::google::protobuf::internal::ArenaStringPtr date_;
    friend struct ::protobuf_Markets_2eproto::TableStruct;
    friend void ::protobuf_Markets_2eproto::
        InitDefaultsOfferDataMarket_InternalPBImpl();
};
// -------------------------------------------------------------------

class OfferListMarket_InternalPB : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.OTDB.OfferListMarket_InternalPB)
                                                                           */
{
public:
    OfferListMarket_InternalPB();
    virtual ~OfferListMarket_InternalPB();

    OfferListMarket_InternalPB(const OfferListMarket_InternalPB& from);

    inline OfferListMarket_InternalPB& operator=(
        const OfferListMarket_InternalPB& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    OfferListMarket_InternalPB(OfferListMarket_InternalPB&& from) noexcept
        : OfferListMarket_InternalPB()
    {
        *this = ::std::move(from);
    }

    inline OfferListMarket_InternalPB& operator=(
        OfferListMarket_InternalPB&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::std::string& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::std::string* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const OfferListMarket_InternalPB& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const OfferListMarket_InternalPB* internal_default_instance()
    {
        return reinterpret_cast<const OfferListMarket_InternalPB*>(
            &_OfferListMarket_InternalPB_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 3;

    void Swap(OfferListMarket_InternalPB* other);
    friend void swap(
        OfferListMarket_InternalPB& a,
        OfferListMarket_InternalPB& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline OfferListMarket_InternalPB* New() const PROTOBUF_FINAL
    {
        return New(NULL);
    }

    OfferListMarket_InternalPB* New(::google::protobuf::Arena* arena) const
        PROTOBUF_FINAL;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
        PROTOBUF_FINAL;
    void CopyFrom(const OfferListMarket_InternalPB& from);
    void MergeFrom(const OfferListMarket_InternalPB& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    void DiscardUnknownFields();
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(OfferListMarket_InternalPB* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

public:
    ::std::string GetTypeName() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .opentxs.OTDB.OfferDataMarket_InternalPB bids = 1;
    int bids_size() const;
    void clear_bids();
    static const int kBidsFieldNumber = 1;
    const ::opentxs::OTDB::OfferDataMarket_InternalPB& bids(int index) const;
    ::opentxs::OTDB::OfferDataMarket_InternalPB* mutable_bids(int index);
    ::opentxs::OTDB::OfferDataMarket_InternalPB* add_bids();
    ::google::protobuf::RepeatedPtrField<
        ::opentxs::OTDB::OfferDataMarket_InternalPB>*
    mutable_bids();
    const ::google::protobuf::RepeatedPtrField<
        ::opentxs::OTDB::OfferDataMarket_InternalPB>&
    bids() const;

    // repeated .opentxs.OTDB.OfferDataMarket_InternalPB asks = 2;
    int asks_size() const;
    void clear_asks();
    static const int kAsksFieldNumber = 2;
    const ::opentxs::OTDB::OfferDataMarket_InternalPB& asks(int index) const;
    ::opentxs::OTDB::OfferDataMarket_InternalPB* mutable_asks(int index);
    ::opentxs::OTDB::OfferDataMarket_InternalPB* add_asks();
    ::google::protobuf::RepeatedPtrField<
        ::opentxs::OTDB::OfferDataMarket_InternalPB>*
    mutable_asks();
    const ::google::protobuf::RepeatedPtrField<
        ::opentxs::OTDB::OfferDataMarket_InternalPB>&
    asks() const;

    // @@protoc_insertion_point(class_scope:opentxs.OTDB.OfferListMarket_InternalPB)
private:
    ::google::protobuf::internal::InternalMetadataWithArenaLite
        _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::RepeatedPtrField<
        ::opentxs::OTDB::OfferDataMarket_InternalPB>
        bids_;
    ::google::protobuf::RepeatedPtrField<
        ::opentxs::OTDB::OfferDataMarket_InternalPB>
        asks_;
    friend struct ::protobuf_Markets_2eproto::TableStruct;
    friend void ::protobuf_Markets_2eproto::
        InitDefaultsOfferListMarket_InternalPBImpl();
};
// -------------------------------------------------------------------

class TradeDataMarket_InternalPB : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.OTDB.TradeDataMarket_InternalPB)
                                                                           */
{
public:
    TradeDataMarket_InternalPB();
    virtual ~TradeDataMarket_InternalPB();

    TradeDataMarket_InternalPB(const TradeDataMarket_InternalPB& from);

    inline TradeDataMarket_InternalPB& operator=(
        const TradeDataMarket_InternalPB& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    TradeDataMarket_InternalPB(TradeDataMarket_InternalPB&& from) noexcept
        : TradeDataMarket_InternalPB()
    {
        *this = ::std::move(from);
    }

    inline TradeDataMarket_InternalPB& operator=(
        TradeDataMarket_InternalPB&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::std::string& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::std::string* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const TradeDataMarket_InternalPB& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const TradeDataMarket_InternalPB* internal_default_instance()
    {
        return reinterpret_cast<const TradeDataMarket_InternalPB*>(
            &_TradeDataMarket_InternalPB_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 4;

    void Swap(TradeDataMarket_InternalPB* other);
    friend void swap(
        TradeDataMarket_InternalPB& a,
        TradeDataMarket_InternalPB& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline TradeDataMarket_InternalPB* New() const PROTOBUF_FINAL
    {
        return New(NULL);
    }

    TradeDataMarket_InternalPB* New(::google::protobuf::Arena* arena) const
        PROTOBUF_FINAL;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
        PROTOBUF_FINAL;
    void CopyFrom(const TradeDataMarket_InternalPB& from);
    void MergeFrom(const TradeDataMarket_InternalPB& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    void DiscardUnknownFields();
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(TradeDataMarket_InternalPB* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

public:
    ::std::string GetTypeName() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional string gui_label = 1;
    bool has_gui_label() const;
    void clear_gui_label();
    static const int kGuiLabelFieldNumber = 1;
    const ::std::string& gui_label() const;
    void set_gui_label(const ::std::string& value);
#if LANG_CXX11
    void set_gui_label(::std::string&& value);
#endif
    void set_gui_label(const char* value);
    void set_gui_label(const char* value, size_t size);
    ::std::string* mutable_gui_label();
    ::std::string* release_gui_label();
    void set_allocated_gui_label(::std::string* gui_label);

    // optional string transaction_id = 2;
    bool has_transaction_id() const;
    void clear_transaction_id();
    static const int kTransactionIdFieldNumber = 2;
    const ::std::string& transaction_id() const;
    void set_transaction_id(const ::std::string& value);
#if LANG_CXX11
    void set_transaction_id(::std::string&& value);
#endif
    void set_transaction_id(const char* value);
    void set_transaction_id(const char* value, size_t size);
    ::std::string* mutable_transaction_id();
    ::std::string* release_transaction_id();
    void set_allocated_transaction_id(::std::string* transaction_id);

    // optional string date = 3;
    bool has_date() const;
    void clear_date();
    static const int kDateFieldNumber = 3;
    const ::std::string& date() const;
    void set_date(const ::std::string& value);
#if LANG_CXX11
    void set_date(::std::string&& value);
#endif
    void set_date(const char* value);
    void set_date(const char* value, size_t size);
    ::std::string* mutable_date();
    ::std::string* release_date();
    void set_allocated_date(::std::string* date);

    // optional string price = 4;
    bool has_price() const;
    void clear_price();
    static const int kPriceFieldNumber = 4;
    const ::std::string& price() const;
    void set_price(const ::std::string& value);
#if LANG_CXX11
    void set_price(::std::string&& value);
#endif
    void set_price(const char* value);
    void set_price(const char* value, size_t size);
    ::std::string* mutable_price();
    ::std::string* release_price();
    void set_allocated_price(::std::string* price);

    // optional string amount_sold = 5;
    bool has_amount_sold() const;
    void clear_amount_sold();
    static const int kAmountSoldFieldNumber = 5;
    const ::std::string& amount_sold() const;
    void set_amount_sold(const ::std::string& value);
#if LANG_CXX11
    void set_amount_sold(::std::string&& value);
#endif
    void set_amount_sold(const char* value);
    void set_amount_sold(const char* value, size_t size);
    ::std::string* mutable_amount_sold();
    ::std::string* release_amount_sold();
    void set_allocated_amount_sold(::std::string* amount_sold);

    // @@protoc_insertion_point(class_scope:opentxs.OTDB.TradeDataMarket_InternalPB)
private:
    void set_has_gui_label();
    void clear_has_gui_label();
    void set_has_transaction_id();
    void clear_has_transaction_id();
    void set_has_date();
    void clear_has_date();
    void set_has_price();
    void clear_has_price();
    void set_has_amount_sold();
    void clear_has_amount_sold();

    ::google::protobuf::internal::InternalMetadataWithArenaLite
        _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr gui_label_;
    ::google::protobuf::internal::ArenaStringPtr transaction_id_;
    ::google::protobuf::internal::ArenaStringPtr date_;
    ::google::protobuf::internal::ArenaStringPtr price_;
    ::google::protobuf::internal::ArenaStringPtr amount_sold_;
    friend struct ::protobuf_Markets_2eproto::TableStruct;
    friend void ::protobuf_Markets_2eproto::
        InitDefaultsTradeDataMarket_InternalPBImpl();
};
// -------------------------------------------------------------------

class TradeListMarket_InternalPB : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.OTDB.TradeListMarket_InternalPB)
                                                                           */
{
public:
    TradeListMarket_InternalPB();
    virtual ~TradeListMarket_InternalPB();

    TradeListMarket_InternalPB(const TradeListMarket_InternalPB& from);

    inline TradeListMarket_InternalPB& operator=(
        const TradeListMarket_InternalPB& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    TradeListMarket_InternalPB(TradeListMarket_InternalPB&& from) noexcept
        : TradeListMarket_InternalPB()
    {
        *this = ::std::move(from);
    }

    inline TradeListMarket_InternalPB& operator=(
        TradeListMarket_InternalPB&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::std::string& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::std::string* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const TradeListMarket_InternalPB& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const TradeListMarket_InternalPB* internal_default_instance()
    {
        return reinterpret_cast<const TradeListMarket_InternalPB*>(
            &_TradeListMarket_InternalPB_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 5;

    void Swap(TradeListMarket_InternalPB* other);
    friend void swap(
        TradeListMarket_InternalPB& a,
        TradeListMarket_InternalPB& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline TradeListMarket_InternalPB* New() const PROTOBUF_FINAL
    {
        return New(NULL);
    }

    TradeListMarket_InternalPB* New(::google::protobuf::Arena* arena) const
        PROTOBUF_FINAL;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
        PROTOBUF_FINAL;
    void CopyFrom(const TradeListMarket_InternalPB& from);
    void MergeFrom(const TradeListMarket_InternalPB& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    void DiscardUnknownFields();
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(TradeListMarket_InternalPB* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

public:
    ::std::string GetTypeName() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .opentxs.OTDB.TradeDataMarket_InternalPB trades = 1;
    int trades_size() const;
    void clear_trades();
    static const int kTradesFieldNumber = 1;
    const ::opentxs::OTDB::TradeDataMarket_InternalPB& trades(int index) const;
    ::opentxs::OTDB::TradeDataMarket_InternalPB* mutable_trades(int index);
    ::opentxs::OTDB::TradeDataMarket_InternalPB* add_trades();
    ::google::protobuf::RepeatedPtrField<
        ::opentxs::OTDB::TradeDataMarket_InternalPB>*
    mutable_trades();
    const ::google::protobuf::RepeatedPtrField<
        ::opentxs::OTDB::TradeDataMarket_InternalPB>&
    trades() const;

    // @@protoc_insertion_point(class_scope:opentxs.OTDB.TradeListMarket_InternalPB)
private:
    ::google::protobuf::internal::InternalMetadataWithArenaLite
        _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::RepeatedPtrField<
        ::opentxs::OTDB::TradeDataMarket_InternalPB>
        trades_;
    friend struct ::protobuf_Markets_2eproto::TableStruct;
    friend void ::protobuf_Markets_2eproto::
        InitDefaultsTradeListMarket_InternalPBImpl();
};
// -------------------------------------------------------------------

class OfferDataNym_InternalPB : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.OTDB.OfferDataNym_InternalPB)
                                                                        */
{
public:
    OfferDataNym_InternalPB();
    virtual ~OfferDataNym_InternalPB();

    OfferDataNym_InternalPB(const OfferDataNym_InternalPB& from);

    inline OfferDataNym_InternalPB& operator=(
        const OfferDataNym_InternalPB& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    OfferDataNym_InternalPB(OfferDataNym_InternalPB&& from) noexcept
        : OfferDataNym_InternalPB()
    {
        *this = ::std::move(from);
    }

    inline OfferDataNym_InternalPB& operator=(
        OfferDataNym_InternalPB&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::std::string& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::std::string* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const OfferDataNym_InternalPB& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const OfferDataNym_InternalPB* internal_default_instance()
    {
        return reinterpret_cast<const OfferDataNym_InternalPB*>(
            &_OfferDataNym_InternalPB_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 6;

    void Swap(OfferDataNym_InternalPB* other);
    friend void swap(OfferDataNym_InternalPB& a, OfferDataNym_InternalPB& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline OfferDataNym_InternalPB* New() const PROTOBUF_FINAL
    {
        return New(NULL);
    }

    OfferDataNym_InternalPB* New(::google::protobuf::Arena* arena) const
        PROTOBUF_FINAL;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
        PROTOBUF_FINAL;
    void CopyFrom(const OfferDataNym_InternalPB& from);
    void MergeFrom(const OfferDataNym_InternalPB& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    void DiscardUnknownFields();
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(OfferDataNym_InternalPB* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

public:
    ::std::string GetTypeName() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional string gui_label = 1;
    bool has_gui_label() const;
    void clear_gui_label();
    static const int kGuiLabelFieldNumber = 1;
    const ::std::string& gui_label() const;
    void set_gui_label(const ::std::string& value);
#if LANG_CXX11
    void set_gui_label(::std::string&& value);
#endif
    void set_gui_label(const char* value);
    void set_gui_label(const char* value, size_t size);
    ::std::string* mutable_gui_label();
    ::std::string* release_gui_label();
    void set_allocated_gui_label(::std::string* gui_label);

    // optional string valid_from = 2;
    bool has_valid_from() const;
    void clear_valid_from();
    static const int kValidFromFieldNumber = 2;
    const ::std::string& valid_from() const;
    void set_valid_from(const ::std::string& value);
#if LANG_CXX11
    void set_valid_from(::std::string&& value);
#endif
    void set_valid_from(const char* value);
    void set_valid_from(const char* value, size_t size);
    ::std::string* mutable_valid_from();
    ::std::string* release_valid_from();
    void set_allocated_valid_from(::std::string* valid_from);

    // optional string valid_to = 3;
    bool has_valid_to() const;
    void clear_valid_to();
    static const int kValidToFieldNumber = 3;
    const ::std::string& valid_to() const;
    void set_valid_to(const ::std::string& value);
#if LANG_CXX11
    void set_valid_to(::std::string&& value);
#endif
    void set_valid_to(const char* value);
    void set_valid_to(const char* value, size_t size);
    ::std::string* mutable_valid_to();
    ::std::string* release_valid_to();
    void set_allocated_valid_to(::std::string* valid_to);

    // optional string notary_id = 4;
    bool has_notary_id() const;
    void clear_notary_id();
    static const int kNotaryIdFieldNumber = 4;
    const ::std::string& notary_id() const;
    void set_notary_id(const ::std::string& value);
#if LANG_CXX11
    void set_notary_id(::std::string&& value);
#endif
    void set_notary_id(const char* value);
    void set_notary_id(const char* value, size_t size);
    ::std::string* mutable_notary_id();
    ::std::string* release_notary_id();
    void set_allocated_notary_id(::std::string* notary_id);

    // optional string instrument_definition_id = 5;
    bool has_instrument_definition_id() const;
    void clear_instrument_definition_id();
    static const int kInstrumentDefinitionIdFieldNumber = 5;
    const ::std::string& instrument_definition_id() const;
    void set_instrument_definition_id(const ::std::string& value);
#if LANG_CXX11
    void set_instrument_definition_id(::std::string&& value);
#endif
    void set_instrument_definition_id(const char* value);
    void set_instrument_definition_id(const char* value, size_t size);
    ::std::string* mutable_instrument_definition_id();
    ::std::string* release_instrument_definition_id();
    void set_allocated_instrument_definition_id(
        ::std::string* instrument_definition_id);

    // optional string asset_acct_id = 6;
    bool has_asset_acct_id() const;
    void clear_asset_acct_id();
    static const int kAssetAcctIdFieldNumber = 6;
    const ::std::string& asset_acct_id() const;
    void set_asset_acct_id(const ::std::string& value);
#if LANG_CXX11
    void set_asset_acct_id(::std::string&& value);
#endif
    void set_asset_acct_id(const char* value);
    void set_asset_acct_id(const char* value, size_t size);
    ::std::string* mutable_asset_acct_id();
    ::std::string* release_asset_acct_id();
    void set_allocated_asset_acct_id(::std::string* asset_acct_id);

    // optional string currency_type_id = 7;
    bool has_currency_type_id() const;
    void clear_currency_type_id();
    static const int kCurrencyTypeIdFieldNumber = 7;
    const ::std::string& currency_type_id() const;
    void set_currency_type_id(const ::std::string& value);
#if LANG_CXX11
    void set_currency_type_id(::std::string&& value);
#endif
    void set_currency_type_id(const char* value);
    void set_currency_type_id(const char* value, size_t size);
    ::std::string* mutable_currency_type_id();
    ::std::string* release_currency_type_id();
    void set_allocated_currency_type_id(::std::string* currency_type_id);

    // optional string currency_acct_id = 8;
    bool has_currency_acct_id() const;
    void clear_currency_acct_id();
    static const int kCurrencyAcctIdFieldNumber = 8;
    const ::std::string& currency_acct_id() const;
    void set_currency_acct_id(const ::std::string& value);
#if LANG_CXX11
    void set_currency_acct_id(::std::string&& value);
#endif
    void set_currency_acct_id(const char* value);
    void set_currency_acct_id(const char* value, size_t size);
    ::std::string* mutable_currency_acct_id();
    ::std::string* release_currency_acct_id();
    void set_allocated_currency_acct_id(::std::string* currency_acct_id);

    // optional string scale = 10;
    bool has_scale() const;
    void clear_scale();
    static const int kScaleFieldNumber = 10;
    const ::std::string& scale() const;
    void set_scale(const ::std::string& value);
#if LANG_CXX11
    void set_scale(::std::string&& value);
#endif
    void set_scale(const char* value);
    void set_scale(const char* value, size_t size);
    ::std::string* mutable_scale();
    ::std::string* release_scale();
    void set_allocated_scale(::std::string* scale);

    // optional string price_per_scale = 11;
    bool has_price_per_scale() const;
    void clear_price_per_scale();
    static const int kPricePerScaleFieldNumber = 11;
    const ::std::string& price_per_scale() const;
    void set_price_per_scale(const ::std::string& value);
#if LANG_CXX11
    void set_price_per_scale(::std::string&& value);
#endif
    void set_price_per_scale(const char* value);
    void set_price_per_scale(const char* value, size_t size);
    ::std::string* mutable_price_per_scale();
    ::std::string* release_price_per_scale();
    void set_allocated_price_per_scale(::std::string* price_per_scale);

    // optional string transaction_id = 12;
    bool has_transaction_id() const;
    void clear_transaction_id();
    static const int kTransactionIdFieldNumber = 12;
    const ::std::string& transaction_id() const;
    void set_transaction_id(const ::std::string& value);
#if LANG_CXX11
    void set_transaction_id(::std::string&& value);
#endif
    void set_transaction_id(const char* value);
    void set_transaction_id(const char* value, size_t size);
    ::std::string* mutable_transaction_id();
    ::std::string* release_transaction_id();
    void set_allocated_transaction_id(::std::string* transaction_id);

    // optional string total_assets = 13;
    bool has_total_assets() const;
    void clear_total_assets();
    static const int kTotalAssetsFieldNumber = 13;
    const ::std::string& total_assets() const;
    void set_total_assets(const ::std::string& value);
#if LANG_CXX11
    void set_total_assets(::std::string&& value);
#endif
    void set_total_assets(const char* value);
    void set_total_assets(const char* value, size_t size);
    ::std::string* mutable_total_assets();
    ::std::string* release_total_assets();
    void set_allocated_total_assets(::std::string* total_assets);

    // optional string finished_so_far = 14;
    bool has_finished_so_far() const;
    void clear_finished_so_far();
    static const int kFinishedSoFarFieldNumber = 14;
    const ::std::string& finished_so_far() const;
    void set_finished_so_far(const ::std::string& value);
#if LANG_CXX11
    void set_finished_so_far(::std::string&& value);
#endif
    void set_finished_so_far(const char* value);
    void set_finished_so_far(const char* value, size_t size);
    ::std::string* mutable_finished_so_far();
    ::std::string* release_finished_so_far();
    void set_allocated_finished_so_far(::std::string* finished_so_far);

    // optional string minimum_increment = 15;
    bool has_minimum_increment() const;
    void clear_minimum_increment();
    static const int kMinimumIncrementFieldNumber = 15;
    const ::std::string& minimum_increment() const;
    void set_minimum_increment(const ::std::string& value);
#if LANG_CXX11
    void set_minimum_increment(::std::string&& value);
#endif
    void set_minimum_increment(const char* value);
    void set_minimum_increment(const char* value, size_t size);
    ::std::string* mutable_minimum_increment();
    ::std::string* release_minimum_increment();
    void set_allocated_minimum_increment(::std::string* minimum_increment);

    // optional string stop_sign = 16;
    bool has_stop_sign() const;
    void clear_stop_sign();
    static const int kStopSignFieldNumber = 16;
    const ::std::string& stop_sign() const;
    void set_stop_sign(const ::std::string& value);
#if LANG_CXX11
    void set_stop_sign(::std::string&& value);
#endif
    void set_stop_sign(const char* value);
    void set_stop_sign(const char* value, size_t size);
    ::std::string* mutable_stop_sign();
    ::std::string* release_stop_sign();
    void set_allocated_stop_sign(::std::string* stop_sign);

    // optional string stop_price = 17;
    bool has_stop_price() const;
    void clear_stop_price();
    static const int kStopPriceFieldNumber = 17;
    const ::std::string& stop_price() const;
    void set_stop_price(const ::std::string& value);
#if LANG_CXX11
    void set_stop_price(::std::string&& value);
#endif
    void set_stop_price(const char* value);
    void set_stop_price(const char* value, size_t size);
    ::std::string* mutable_stop_price();
    ::std::string* release_stop_price();
    void set_allocated_stop_price(::std::string* stop_price);

    // optional string date = 18;
    bool has_date() const;
    void clear_date();
    static const int kDateFieldNumber = 18;
    const ::std::string& date() const;
    void set_date(const ::std::string& value);
#if LANG_CXX11
    void set_date(::std::string&& value);
#endif
    void set_date(const char* value);
    void set_date(const char* value, size_t size);
    ::std::string* mutable_date();
    ::std::string* release_date();
    void set_allocated_date(::std::string* date);

    // optional bool selling = 9;
    bool has_selling() const;
    void clear_selling();
    static const int kSellingFieldNumber = 9;
    bool selling() const;
    void set_selling(bool value);

    // @@protoc_insertion_point(class_scope:opentxs.OTDB.OfferDataNym_InternalPB)
private:
    void set_has_gui_label();
    void clear_has_gui_label();
    void set_has_valid_from();
    void clear_has_valid_from();
    void set_has_valid_to();
    void clear_has_valid_to();
    void set_has_notary_id();
    void clear_has_notary_id();
    void set_has_instrument_definition_id();
    void clear_has_instrument_definition_id();
    void set_has_asset_acct_id();
    void clear_has_asset_acct_id();
    void set_has_currency_type_id();
    void clear_has_currency_type_id();
    void set_has_currency_acct_id();
    void clear_has_currency_acct_id();
    void set_has_selling();
    void clear_has_selling();
    void set_has_scale();
    void clear_has_scale();
    void set_has_price_per_scale();
    void clear_has_price_per_scale();
    void set_has_transaction_id();
    void clear_has_transaction_id();
    void set_has_total_assets();
    void clear_has_total_assets();
    void set_has_finished_so_far();
    void clear_has_finished_so_far();
    void set_has_minimum_increment();
    void clear_has_minimum_increment();
    void set_has_stop_sign();
    void clear_has_stop_sign();
    void set_has_stop_price();
    void clear_has_stop_price();
    void set_has_date();
    void clear_has_date();

    ::google::protobuf::internal::InternalMetadataWithArenaLite
        _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr gui_label_;
    ::google::protobuf::internal::ArenaStringPtr valid_from_;
    ::google::protobuf::internal::ArenaStringPtr valid_to_;
    ::google::protobuf::internal::ArenaStringPtr notary_id_;
    ::google::protobuf::internal::ArenaStringPtr instrument_definition_id_;
    ::google::protobuf::internal::ArenaStringPtr asset_acct_id_;
    ::google::protobuf::internal::ArenaStringPtr currency_type_id_;
    ::google::protobuf::internal::ArenaStringPtr currency_acct_id_;
    ::google::protobuf::internal::ArenaStringPtr scale_;
    ::google::protobuf::internal::ArenaStringPtr price_per_scale_;
    ::google::protobuf::internal::ArenaStringPtr transaction_id_;
    ::google::protobuf::internal::ArenaStringPtr total_assets_;
    ::google::protobuf::internal::ArenaStringPtr finished_so_far_;
    ::google::protobuf::internal::ArenaStringPtr minimum_increment_;
    ::google::protobuf::internal::ArenaStringPtr stop_sign_;
    ::google::protobuf::internal::ArenaStringPtr stop_price_;
    ::google::protobuf::internal::ArenaStringPtr date_;
    bool selling_;
    friend struct ::protobuf_Markets_2eproto::TableStruct;
    friend void ::protobuf_Markets_2eproto::
        InitDefaultsOfferDataNym_InternalPBImpl();
};
// -------------------------------------------------------------------

class OfferListNym_InternalPB : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.OTDB.OfferListNym_InternalPB)
                                                                        */
{
public:
    OfferListNym_InternalPB();
    virtual ~OfferListNym_InternalPB();

    OfferListNym_InternalPB(const OfferListNym_InternalPB& from);

    inline OfferListNym_InternalPB& operator=(
        const OfferListNym_InternalPB& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    OfferListNym_InternalPB(OfferListNym_InternalPB&& from) noexcept
        : OfferListNym_InternalPB()
    {
        *this = ::std::move(from);
    }

    inline OfferListNym_InternalPB& operator=(
        OfferListNym_InternalPB&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::std::string& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::std::string* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const OfferListNym_InternalPB& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const OfferListNym_InternalPB* internal_default_instance()
    {
        return reinterpret_cast<const OfferListNym_InternalPB*>(
            &_OfferListNym_InternalPB_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 7;

    void Swap(OfferListNym_InternalPB* other);
    friend void swap(OfferListNym_InternalPB& a, OfferListNym_InternalPB& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline OfferListNym_InternalPB* New() const PROTOBUF_FINAL
    {
        return New(NULL);
    }

    OfferListNym_InternalPB* New(::google::protobuf::Arena* arena) const
        PROTOBUF_FINAL;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
        PROTOBUF_FINAL;
    void CopyFrom(const OfferListNym_InternalPB& from);
    void MergeFrom(const OfferListNym_InternalPB& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    void DiscardUnknownFields();
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(OfferListNym_InternalPB* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

public:
    ::std::string GetTypeName() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .opentxs.OTDB.OfferDataNym_InternalPB offers = 1;
    int offers_size() const;
    void clear_offers();
    static const int kOffersFieldNumber = 1;
    const ::opentxs::OTDB::OfferDataNym_InternalPB& offers(int index) const;
    ::opentxs::OTDB::OfferDataNym_InternalPB* mutable_offers(int index);
    ::opentxs::OTDB::OfferDataNym_InternalPB* add_offers();
    ::google::protobuf::RepeatedPtrField<
        ::opentxs::OTDB::OfferDataNym_InternalPB>*
    mutable_offers();
    const ::google::protobuf::RepeatedPtrField<
        ::opentxs::OTDB::OfferDataNym_InternalPB>&
    offers() const;

    // @@protoc_insertion_point(class_scope:opentxs.OTDB.OfferListNym_InternalPB)
private:
    ::google::protobuf::internal::InternalMetadataWithArenaLite
        _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::RepeatedPtrField<
        ::opentxs::OTDB::OfferDataNym_InternalPB>
        offers_;
    friend struct ::protobuf_Markets_2eproto::TableStruct;
    friend void ::protobuf_Markets_2eproto::
        InitDefaultsOfferListNym_InternalPBImpl();
};
// -------------------------------------------------------------------

class TradeDataNym_InternalPB : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.OTDB.TradeDataNym_InternalPB)
                                                                        */
{
public:
    TradeDataNym_InternalPB();
    virtual ~TradeDataNym_InternalPB();

    TradeDataNym_InternalPB(const TradeDataNym_InternalPB& from);

    inline TradeDataNym_InternalPB& operator=(
        const TradeDataNym_InternalPB& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    TradeDataNym_InternalPB(TradeDataNym_InternalPB&& from) noexcept
        : TradeDataNym_InternalPB()
    {
        *this = ::std::move(from);
    }

    inline TradeDataNym_InternalPB& operator=(
        TradeDataNym_InternalPB&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::std::string& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::std::string* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const TradeDataNym_InternalPB& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const TradeDataNym_InternalPB* internal_default_instance()
    {
        return reinterpret_cast<const TradeDataNym_InternalPB*>(
            &_TradeDataNym_InternalPB_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 8;

    void Swap(TradeDataNym_InternalPB* other);
    friend void swap(TradeDataNym_InternalPB& a, TradeDataNym_InternalPB& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline TradeDataNym_InternalPB* New() const PROTOBUF_FINAL
    {
        return New(NULL);
    }

    TradeDataNym_InternalPB* New(::google::protobuf::Arena* arena) const
        PROTOBUF_FINAL;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
        PROTOBUF_FINAL;
    void CopyFrom(const TradeDataNym_InternalPB& from);
    void MergeFrom(const TradeDataNym_InternalPB& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    void DiscardUnknownFields();
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(TradeDataNym_InternalPB* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

public:
    ::std::string GetTypeName() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional string gui_label = 1;
    bool has_gui_label() const;
    void clear_gui_label();
    static const int kGuiLabelFieldNumber = 1;
    const ::std::string& gui_label() const;
    void set_gui_label(const ::std::string& value);
#if LANG_CXX11
    void set_gui_label(::std::string&& value);
#endif
    void set_gui_label(const char* value);
    void set_gui_label(const char* value, size_t size);
    ::std::string* mutable_gui_label();
    ::std::string* release_gui_label();
    void set_allocated_gui_label(::std::string* gui_label);

    // optional string completed_count = 2;
    bool has_completed_count() const;
    void clear_completed_count();
    static const int kCompletedCountFieldNumber = 2;
    const ::std::string& completed_count() const;
    void set_completed_count(const ::std::string& value);
#if LANG_CXX11
    void set_completed_count(::std::string&& value);
#endif
    void set_completed_count(const char* value);
    void set_completed_count(const char* value, size_t size);
    ::std::string* mutable_completed_count();
    ::std::string* release_completed_count();
    void set_allocated_completed_count(::std::string* completed_count);

    // optional string date = 3;
    bool has_date() const;
    void clear_date();
    static const int kDateFieldNumber = 3;
    const ::std::string& date() const;
    void set_date(const ::std::string& value);
#if LANG_CXX11
    void set_date(::std::string&& value);
#endif
    void set_date(const char* value);
    void set_date(const char* value, size_t size);
    ::std::string* mutable_date();
    ::std::string* release_date();
    void set_allocated_date(::std::string* date);

    // optional string price = 4;
    bool has_price() const;
    void clear_price();
    static const int kPriceFieldNumber = 4;
    const ::std::string& price() const;
    void set_price(const ::std::string& value);
#if LANG_CXX11
    void set_price(::std::string&& value);
#endif
    void set_price(const char* value);
    void set_price(const char* value, size_t size);
    ::std::string* mutable_price();
    ::std::string* release_price();
    void set_allocated_price(::std::string* price);

    // optional string amount_sold = 5;
    bool has_amount_sold() const;
    void clear_amount_sold();
    static const int kAmountSoldFieldNumber = 5;
    const ::std::string& amount_sold() const;
    void set_amount_sold(const ::std::string& value);
#if LANG_CXX11
    void set_amount_sold(::std::string&& value);
#endif
    void set_amount_sold(const char* value);
    void set_amount_sold(const char* value, size_t size);
    ::std::string* mutable_amount_sold();
    ::std::string* release_amount_sold();
    void set_allocated_amount_sold(::std::string* amount_sold);

    // optional string transaction_id = 6;
    bool has_transaction_id() const;
    void clear_transaction_id();
    static const int kTransactionIdFieldNumber = 6;
    const ::std::string& transaction_id() const;
    void set_transaction_id(const ::std::string& value);
#if LANG_CXX11
    void set_transaction_id(::std::string&& value);
#endif
    void set_transaction_id(const char* value);
    void set_transaction_id(const char* value, size_t size);
    ::std::string* mutable_transaction_id();
    ::std::string* release_transaction_id();
    void set_allocated_transaction_id(::std::string* transaction_id);

    // optional string updated_id = 7;
    bool has_updated_id() const;
    void clear_updated_id();
    static const int kUpdatedIdFieldNumber = 7;
    const ::std::string& updated_id() const;
    void set_updated_id(const ::std::string& value);
#if LANG_CXX11
    void set_updated_id(::std::string&& value);
#endif
    void set_updated_id(const char* value);
    void set_updated_id(const char* value, size_t size);
    ::std::string* mutable_updated_id();
    ::std::string* release_updated_id();
    void set_allocated_updated_id(::std::string* updated_id);

    // optional string offer_price = 8;
    bool has_offer_price() const;
    void clear_offer_price();
    static const int kOfferPriceFieldNumber = 8;
    const ::std::string& offer_price() const;
    void set_offer_price(const ::std::string& value);
#if LANG_CXX11
    void set_offer_price(::std::string&& value);
#endif
    void set_offer_price(const char* value);
    void set_offer_price(const char* value, size_t size);
    ::std::string* mutable_offer_price();
    ::std::string* release_offer_price();
    void set_allocated_offer_price(::std::string* offer_price);

    // optional string finished_so_far = 9;
    bool has_finished_so_far() const;
    void clear_finished_so_far();
    static const int kFinishedSoFarFieldNumber = 9;
    const ::std::string& finished_so_far() const;
    void set_finished_so_far(const ::std::string& value);
#if LANG_CXX11
    void set_finished_so_far(::std::string&& value);
#endif
    void set_finished_so_far(const char* value);
    void set_finished_so_far(const char* value, size_t size);
    ::std::string* mutable_finished_so_far();
    ::std::string* release_finished_so_far();
    void set_allocated_finished_so_far(::std::string* finished_so_far);

    // optional string instrument_definition_id = 10;
    bool has_instrument_definition_id() const;
    void clear_instrument_definition_id();
    static const int kInstrumentDefinitionIdFieldNumber = 10;
    const ::std::string& instrument_definition_id() const;
    void set_instrument_definition_id(const ::std::string& value);
#if LANG_CXX11
    void set_instrument_definition_id(::std::string&& value);
#endif
    void set_instrument_definition_id(const char* value);
    void set_instrument_definition_id(const char* value, size_t size);
    ::std::string* mutable_instrument_definition_id();
    ::std::string* release_instrument_definition_id();
    void set_allocated_instrument_definition_id(
        ::std::string* instrument_definition_id);

    // optional string currency_id = 11;
    bool has_currency_id() const;
    void clear_currency_id();
    static const int kCurrencyIdFieldNumber = 11;
    const ::std::string& currency_id() const;
    void set_currency_id(const ::std::string& value);
#if LANG_CXX11
    void set_currency_id(::std::string&& value);
#endif
    void set_currency_id(const char* value);
    void set_currency_id(const char* value, size_t size);
    ::std::string* mutable_currency_id();
    ::std::string* release_currency_id();
    void set_allocated_currency_id(::std::string* currency_id);

    // optional string currency_paid = 12;
    bool has_currency_paid() const;
    void clear_currency_paid();
    static const int kCurrencyPaidFieldNumber = 12;
    const ::std::string& currency_paid() const;
    void set_currency_paid(const ::std::string& value);
#if LANG_CXX11
    void set_currency_paid(::std::string&& value);
#endif
    void set_currency_paid(const char* value);
    void set_currency_paid(const char* value, size_t size);
    ::std::string* mutable_currency_paid();
    ::std::string* release_currency_paid();
    void set_allocated_currency_paid(::std::string* currency_paid);

    // optional string asset_acct_id = 13;
    bool has_asset_acct_id() const;
    void clear_asset_acct_id();
    static const int kAssetAcctIdFieldNumber = 13;
    const ::std::string& asset_acct_id() const;
    void set_asset_acct_id(const ::std::string& value);
#if LANG_CXX11
    void set_asset_acct_id(::std::string&& value);
#endif
    void set_asset_acct_id(const char* value);
    void set_asset_acct_id(const char* value, size_t size);
    ::std::string* mutable_asset_acct_id();
    ::std::string* release_asset_acct_id();
    void set_allocated_asset_acct_id(::std::string* asset_acct_id);

    // optional string currency_acct_id = 14;
    bool has_currency_acct_id() const;
    void clear_currency_acct_id();
    static const int kCurrencyAcctIdFieldNumber = 14;
    const ::std::string& currency_acct_id() const;
    void set_currency_acct_id(const ::std::string& value);
#if LANG_CXX11
    void set_currency_acct_id(::std::string&& value);
#endif
    void set_currency_acct_id(const char* value);
    void set_currency_acct_id(const char* value, size_t size);
    ::std::string* mutable_currency_acct_id();
    ::std::string* release_currency_acct_id();
    void set_allocated_currency_acct_id(::std::string* currency_acct_id);

    // optional string scale = 15;
    bool has_scale() const;
    void clear_scale();
    static const int kScaleFieldNumber = 15;
    const ::std::string& scale() const;
    void set_scale(const ::std::string& value);
#if LANG_CXX11
    void set_scale(::std::string&& value);
#endif
    void set_scale(const char* value);
    void set_scale(const char* value, size_t size);
    ::std::string* mutable_scale();
    ::std::string* release_scale();
    void set_allocated_scale(::std::string* scale);

    // optional string asset_receipt = 17;
    bool has_asset_receipt() const;
    void clear_asset_receipt();
    static const int kAssetReceiptFieldNumber = 17;
    const ::std::string& asset_receipt() const;
    void set_asset_receipt(const ::std::string& value);
#if LANG_CXX11
    void set_asset_receipt(::std::string&& value);
#endif
    void set_asset_receipt(const char* value);
    void set_asset_receipt(const char* value, size_t size);
    ::std::string* mutable_asset_receipt();
    ::std::string* release_asset_receipt();
    void set_allocated_asset_receipt(::std::string* asset_receipt);

    // optional string currency_receipt = 18;
    bool has_currency_receipt() const;
    void clear_currency_receipt();
    static const int kCurrencyReceiptFieldNumber = 18;
    const ::std::string& currency_receipt() const;
    void set_currency_receipt(const ::std::string& value);
#if LANG_CXX11
    void set_currency_receipt(::std::string&& value);
#endif
    void set_currency_receipt(const char* value);
    void set_currency_receipt(const char* value, size_t size);
    ::std::string* mutable_currency_receipt();
    ::std::string* release_currency_receipt();
    void set_allocated_currency_receipt(::std::string* currency_receipt);

    // optional string final_receipt = 19;
    bool has_final_receipt() const;
    void clear_final_receipt();
    static const int kFinalReceiptFieldNumber = 19;
    const ::std::string& final_receipt() const;
    void set_final_receipt(const ::std::string& value);
#if LANG_CXX11
    void set_final_receipt(::std::string&& value);
#endif
    void set_final_receipt(const char* value);
    void set_final_receipt(const char* value, size_t size);
    ::std::string* mutable_final_receipt();
    ::std::string* release_final_receipt();
    void set_allocated_final_receipt(::std::string* final_receipt);

    // optional bool is_bid = 16;
    bool has_is_bid() const;
    void clear_is_bid();
    static const int kIsBidFieldNumber = 16;
    bool is_bid() const;
    void set_is_bid(bool value);

    // @@protoc_insertion_point(class_scope:opentxs.OTDB.TradeDataNym_InternalPB)
private:
    void set_has_gui_label();
    void clear_has_gui_label();
    void set_has_completed_count();
    void clear_has_completed_count();
    void set_has_date();
    void clear_has_date();
    void set_has_price();
    void clear_has_price();
    void set_has_amount_sold();
    void clear_has_amount_sold();
    void set_has_transaction_id();
    void clear_has_transaction_id();
    void set_has_updated_id();
    void clear_has_updated_id();
    void set_has_offer_price();
    void clear_has_offer_price();
    void set_has_finished_so_far();
    void clear_has_finished_so_far();
    void set_has_instrument_definition_id();
    void clear_has_instrument_definition_id();
    void set_has_currency_id();
    void clear_has_currency_id();
    void set_has_currency_paid();
    void clear_has_currency_paid();
    void set_has_asset_acct_id();
    void clear_has_asset_acct_id();
    void set_has_currency_acct_id();
    void clear_has_currency_acct_id();
    void set_has_scale();
    void clear_has_scale();
    void set_has_is_bid();
    void clear_has_is_bid();
    void set_has_asset_receipt();
    void clear_has_asset_receipt();
    void set_has_currency_receipt();
    void clear_has_currency_receipt();
    void set_has_final_receipt();
    void clear_has_final_receipt();

    ::google::protobuf::internal::InternalMetadataWithArenaLite
        _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr gui_label_;
    ::google::protobuf::internal::ArenaStringPtr completed_count_;
    ::google::protobuf::internal::ArenaStringPtr date_;
    ::google::protobuf::internal::ArenaStringPtr price_;
    ::google::protobuf::internal::ArenaStringPtr amount_sold_;
    ::google::protobuf::internal::ArenaStringPtr transaction_id_;
    ::google::protobuf::internal::ArenaStringPtr updated_id_;
    ::google::protobuf::internal::ArenaStringPtr offer_price_;
    ::google::protobuf::internal::ArenaStringPtr finished_so_far_;
    ::google::protobuf::internal::ArenaStringPtr instrument_definition_id_;
    ::google::protobuf::internal::ArenaStringPtr currency_id_;
    ::google::protobuf::internal::ArenaStringPtr currency_paid_;
    ::google::protobuf::internal::ArenaStringPtr asset_acct_id_;
    ::google::protobuf::internal::ArenaStringPtr currency_acct_id_;
    ::google::protobuf::internal::ArenaStringPtr scale_;
    ::google::protobuf::internal::ArenaStringPtr asset_receipt_;
    ::google::protobuf::internal::ArenaStringPtr currency_receipt_;
    ::google::protobuf::internal::ArenaStringPtr final_receipt_;
    bool is_bid_;
    friend struct ::protobuf_Markets_2eproto::TableStruct;
    friend void ::protobuf_Markets_2eproto::
        InitDefaultsTradeDataNym_InternalPBImpl();
};
// -------------------------------------------------------------------

class TradeListNym_InternalPB : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.OTDB.TradeListNym_InternalPB)
                                                                        */
{
public:
    TradeListNym_InternalPB();
    virtual ~TradeListNym_InternalPB();

    TradeListNym_InternalPB(const TradeListNym_InternalPB& from);

    inline TradeListNym_InternalPB& operator=(
        const TradeListNym_InternalPB& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    TradeListNym_InternalPB(TradeListNym_InternalPB&& from) noexcept
        : TradeListNym_InternalPB()
    {
        *this = ::std::move(from);
    }

    inline TradeListNym_InternalPB& operator=(
        TradeListNym_InternalPB&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::std::string& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::std::string* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const TradeListNym_InternalPB& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const TradeListNym_InternalPB* internal_default_instance()
    {
        return reinterpret_cast<const TradeListNym_InternalPB*>(
            &_TradeListNym_InternalPB_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 9;

    void Swap(TradeListNym_InternalPB* other);
    friend void swap(TradeListNym_InternalPB& a, TradeListNym_InternalPB& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline TradeListNym_InternalPB* New() const PROTOBUF_FINAL
    {
        return New(NULL);
    }

    TradeListNym_InternalPB* New(::google::protobuf::Arena* arena) const
        PROTOBUF_FINAL;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
        PROTOBUF_FINAL;
    void CopyFrom(const TradeListNym_InternalPB& from);
    void MergeFrom(const TradeListNym_InternalPB& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    void DiscardUnknownFields();
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(TradeListNym_InternalPB* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

public:
    ::std::string GetTypeName() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .opentxs.OTDB.TradeDataNym_InternalPB trades = 1;
    int trades_size() const;
    void clear_trades();
    static const int kTradesFieldNumber = 1;
    const ::opentxs::OTDB::TradeDataNym_InternalPB& trades(int index) const;
    ::opentxs::OTDB::TradeDataNym_InternalPB* mutable_trades(int index);
    ::opentxs::OTDB::TradeDataNym_InternalPB* add_trades();
    ::google::protobuf::RepeatedPtrField<
        ::opentxs::OTDB::TradeDataNym_InternalPB>*
    mutable_trades();
    const ::google::protobuf::RepeatedPtrField<
        ::opentxs::OTDB::TradeDataNym_InternalPB>&
    trades() const;

    // @@protoc_insertion_point(class_scope:opentxs.OTDB.TradeListNym_InternalPB)
private:
    ::google::protobuf::internal::InternalMetadataWithArenaLite
        _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::RepeatedPtrField<
        ::opentxs::OTDB::TradeDataNym_InternalPB>
        trades_;
    friend struct ::protobuf_Markets_2eproto::TableStruct;
    friend void ::protobuf_Markets_2eproto::
        InitDefaultsTradeListNym_InternalPBImpl();
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MarketData_InternalPB

// optional string gui_label = 1;
inline bool MarketData_InternalPB::has_gui_label() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarketData_InternalPB::set_has_gui_label()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void MarketData_InternalPB::clear_has_gui_label()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void MarketData_InternalPB::clear_gui_label()
{
    gui_label_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_gui_label();
}
inline const ::std::string& MarketData_InternalPB::gui_label() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.MarketData_InternalPB.gui_label)
    return gui_label_.GetNoArena();
}
inline void MarketData_InternalPB::set_gui_label(const ::std::string& value)
{
    set_has_gui_label();
    gui_label_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.MarketData_InternalPB.gui_label)
}
#if LANG_CXX11
inline void MarketData_InternalPB::set_gui_label(::std::string&& value)
{
    set_has_gui_label();
    gui_label_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.MarketData_InternalPB.gui_label)
}
#endif
inline void MarketData_InternalPB::set_gui_label(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_gui_label();
    gui_label_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.MarketData_InternalPB.gui_label)
}
inline void MarketData_InternalPB::set_gui_label(const char* value, size_t size)
{
    set_has_gui_label();
    gui_label_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.MarketData_InternalPB.gui_label)
}
inline ::std::string* MarketData_InternalPB::mutable_gui_label()
{
    set_has_gui_label();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.MarketData_InternalPB.gui_label)
    return gui_label_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData_InternalPB::release_gui_label()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.MarketData_InternalPB.gui_label)
    clear_has_gui_label();
    return gui_label_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData_InternalPB::set_allocated_gui_label(
    ::std::string* gui_label)
{
    if (gui_label != NULL) {
        set_has_gui_label();
    } else {
        clear_has_gui_label();
    }
    gui_label_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        gui_label);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.MarketData_InternalPB.gui_label)
}

// optional string notary_id = 2;
inline bool MarketData_InternalPB::has_notary_id() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarketData_InternalPB::set_has_notary_id()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void MarketData_InternalPB::clear_has_notary_id()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void MarketData_InternalPB::clear_notary_id()
{
    notary_id_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_notary_id();
}
inline const ::std::string& MarketData_InternalPB::notary_id() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.MarketData_InternalPB.notary_id)
    return notary_id_.GetNoArena();
}
inline void MarketData_InternalPB::set_notary_id(const ::std::string& value)
{
    set_has_notary_id();
    notary_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.MarketData_InternalPB.notary_id)
}
#if LANG_CXX11
inline void MarketData_InternalPB::set_notary_id(::std::string&& value)
{
    set_has_notary_id();
    notary_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.MarketData_InternalPB.notary_id)
}
#endif
inline void MarketData_InternalPB::set_notary_id(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_notary_id();
    notary_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.MarketData_InternalPB.notary_id)
}
inline void MarketData_InternalPB::set_notary_id(const char* value, size_t size)
{
    set_has_notary_id();
    notary_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.MarketData_InternalPB.notary_id)
}
inline ::std::string* MarketData_InternalPB::mutable_notary_id()
{
    set_has_notary_id();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.MarketData_InternalPB.notary_id)
    return notary_id_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData_InternalPB::release_notary_id()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.MarketData_InternalPB.notary_id)
    clear_has_notary_id();
    return notary_id_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData_InternalPB::set_allocated_notary_id(
    ::std::string* notary_id)
{
    if (notary_id != NULL) {
        set_has_notary_id();
    } else {
        clear_has_notary_id();
    }
    notary_id_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        notary_id);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.MarketData_InternalPB.notary_id)
}

// optional string market_id = 3;
inline bool MarketData_InternalPB::has_market_id() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarketData_InternalPB::set_has_market_id()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void MarketData_InternalPB::clear_has_market_id()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void MarketData_InternalPB::clear_market_id()
{
    market_id_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_market_id();
}
inline const ::std::string& MarketData_InternalPB::market_id() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.MarketData_InternalPB.market_id)
    return market_id_.GetNoArena();
}
inline void MarketData_InternalPB::set_market_id(const ::std::string& value)
{
    set_has_market_id();
    market_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.MarketData_InternalPB.market_id)
}
#if LANG_CXX11
inline void MarketData_InternalPB::set_market_id(::std::string&& value)
{
    set_has_market_id();
    market_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.MarketData_InternalPB.market_id)
}
#endif
inline void MarketData_InternalPB::set_market_id(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_market_id();
    market_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.MarketData_InternalPB.market_id)
}
inline void MarketData_InternalPB::set_market_id(const char* value, size_t size)
{
    set_has_market_id();
    market_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.MarketData_InternalPB.market_id)
}
inline ::std::string* MarketData_InternalPB::mutable_market_id()
{
    set_has_market_id();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.MarketData_InternalPB.market_id)
    return market_id_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData_InternalPB::release_market_id()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.MarketData_InternalPB.market_id)
    clear_has_market_id();
    return market_id_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData_InternalPB::set_allocated_market_id(
    ::std::string* market_id)
{
    if (market_id != NULL) {
        set_has_market_id();
    } else {
        clear_has_market_id();
    }
    market_id_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        market_id);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.MarketData_InternalPB.market_id)
}

// optional string instrument_definition_id = 4;
inline bool MarketData_InternalPB::has_instrument_definition_id() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarketData_InternalPB::set_has_instrument_definition_id()
{
    _has_bits_[0] |= 0x00000008u;
}
inline void MarketData_InternalPB::clear_has_instrument_definition_id()
{
    _has_bits_[0] &= ~0x00000008u;
}
inline void MarketData_InternalPB::clear_instrument_definition_id()
{
    instrument_definition_id_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_instrument_definition_id();
}
inline const ::std::string& MarketData_InternalPB::instrument_definition_id()
    const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.MarketData_InternalPB.instrument_definition_id)
    return instrument_definition_id_.GetNoArena();
}
inline void MarketData_InternalPB::set_instrument_definition_id(
    const ::std::string& value)
{
    set_has_instrument_definition_id();
    instrument_definition_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.MarketData_InternalPB.instrument_definition_id)
}
#if LANG_CXX11
inline void MarketData_InternalPB::set_instrument_definition_id(
    ::std::string&& value)
{
    set_has_instrument_definition_id();
    instrument_definition_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.MarketData_InternalPB.instrument_definition_id)
}
#endif
inline void MarketData_InternalPB::set_instrument_definition_id(
    const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_instrument_definition_id();
    instrument_definition_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.MarketData_InternalPB.instrument_definition_id)
}
inline void MarketData_InternalPB::set_instrument_definition_id(
    const char* value,
    size_t size)
{
    set_has_instrument_definition_id();
    instrument_definition_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.MarketData_InternalPB.instrument_definition_id)
}
inline ::std::string* MarketData_InternalPB::mutable_instrument_definition_id()
{
    set_has_instrument_definition_id();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.MarketData_InternalPB.instrument_definition_id)
    return instrument_definition_id_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData_InternalPB::release_instrument_definition_id()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.MarketData_InternalPB.instrument_definition_id)
    clear_has_instrument_definition_id();
    return instrument_definition_id_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData_InternalPB::set_allocated_instrument_definition_id(
    ::std::string* instrument_definition_id)
{
    if (instrument_definition_id != NULL) {
        set_has_instrument_definition_id();
    } else {
        clear_has_instrument_definition_id();
    }
    instrument_definition_id_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        instrument_definition_id);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.MarketData_InternalPB.instrument_definition_id)
}

// optional string currency_type_id = 5;
inline bool MarketData_InternalPB::has_currency_type_id() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarketData_InternalPB::set_has_currency_type_id()
{
    _has_bits_[0] |= 0x00000010u;
}
inline void MarketData_InternalPB::clear_has_currency_type_id()
{
    _has_bits_[0] &= ~0x00000010u;
}
inline void MarketData_InternalPB::clear_currency_type_id()
{
    currency_type_id_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_currency_type_id();
}
inline const ::std::string& MarketData_InternalPB::currency_type_id() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.MarketData_InternalPB.currency_type_id)
    return currency_type_id_.GetNoArena();
}
inline void MarketData_InternalPB::set_currency_type_id(
    const ::std::string& value)
{
    set_has_currency_type_id();
    currency_type_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.MarketData_InternalPB.currency_type_id)
}
#if LANG_CXX11
inline void MarketData_InternalPB::set_currency_type_id(::std::string&& value)
{
    set_has_currency_type_id();
    currency_type_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.MarketData_InternalPB.currency_type_id)
}
#endif
inline void MarketData_InternalPB::set_currency_type_id(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_currency_type_id();
    currency_type_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.MarketData_InternalPB.currency_type_id)
}
inline void MarketData_InternalPB::set_currency_type_id(
    const char* value,
    size_t size)
{
    set_has_currency_type_id();
    currency_type_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.MarketData_InternalPB.currency_type_id)
}
inline ::std::string* MarketData_InternalPB::mutable_currency_type_id()
{
    set_has_currency_type_id();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.MarketData_InternalPB.currency_type_id)
    return currency_type_id_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData_InternalPB::release_currency_type_id()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.MarketData_InternalPB.currency_type_id)
    clear_has_currency_type_id();
    return currency_type_id_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData_InternalPB::set_allocated_currency_type_id(
    ::std::string* currency_type_id)
{
    if (currency_type_id != NULL) {
        set_has_currency_type_id();
    } else {
        clear_has_currency_type_id();
    }
    currency_type_id_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        currency_type_id);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.MarketData_InternalPB.currency_type_id)
}

// optional string scale = 6;
inline bool MarketData_InternalPB::has_scale() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarketData_InternalPB::set_has_scale()
{
    _has_bits_[0] |= 0x00000020u;
}
inline void MarketData_InternalPB::clear_has_scale()
{
    _has_bits_[0] &= ~0x00000020u;
}
inline void MarketData_InternalPB::clear_scale()
{
    scale_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_scale();
}
inline const ::std::string& MarketData_InternalPB::scale() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.MarketData_InternalPB.scale)
    return scale_.GetNoArena();
}
inline void MarketData_InternalPB::set_scale(const ::std::string& value)
{
    set_has_scale();
    scale_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.MarketData_InternalPB.scale)
}
#if LANG_CXX11
inline void MarketData_InternalPB::set_scale(::std::string&& value)
{
    set_has_scale();
    scale_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.MarketData_InternalPB.scale)
}
#endif
inline void MarketData_InternalPB::set_scale(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_scale();
    scale_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.MarketData_InternalPB.scale)
}
inline void MarketData_InternalPB::set_scale(const char* value, size_t size)
{
    set_has_scale();
    scale_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.MarketData_InternalPB.scale)
}
inline ::std::string* MarketData_InternalPB::mutable_scale()
{
    set_has_scale();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.MarketData_InternalPB.scale)
    return scale_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData_InternalPB::release_scale()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.MarketData_InternalPB.scale)
    clear_has_scale();
    return scale_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData_InternalPB::set_allocated_scale(::std::string* scale)
{
    if (scale != NULL) {
        set_has_scale();
    } else {
        clear_has_scale();
    }
    scale_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), scale);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.MarketData_InternalPB.scale)
}

// optional string total_assets = 7;
inline bool MarketData_InternalPB::has_total_assets() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MarketData_InternalPB::set_has_total_assets()
{
    _has_bits_[0] |= 0x00000040u;
}
inline void MarketData_InternalPB::clear_has_total_assets()
{
    _has_bits_[0] &= ~0x00000040u;
}
inline void MarketData_InternalPB::clear_total_assets()
{
    total_assets_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_total_assets();
}
inline const ::std::string& MarketData_InternalPB::total_assets() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.MarketData_InternalPB.total_assets)
    return total_assets_.GetNoArena();
}
inline void MarketData_InternalPB::set_total_assets(const ::std::string& value)
{
    set_has_total_assets();
    total_assets_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.MarketData_InternalPB.total_assets)
}
#if LANG_CXX11
inline void MarketData_InternalPB::set_total_assets(::std::string&& value)
{
    set_has_total_assets();
    total_assets_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.MarketData_InternalPB.total_assets)
}
#endif
inline void MarketData_InternalPB::set_total_assets(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_total_assets();
    total_assets_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.MarketData_InternalPB.total_assets)
}
inline void MarketData_InternalPB::set_total_assets(
    const char* value,
    size_t size)
{
    set_has_total_assets();
    total_assets_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.MarketData_InternalPB.total_assets)
}
inline ::std::string* MarketData_InternalPB::mutable_total_assets()
{
    set_has_total_assets();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.MarketData_InternalPB.total_assets)
    return total_assets_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData_InternalPB::release_total_assets()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.MarketData_InternalPB.total_assets)
    clear_has_total_assets();
    return total_assets_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData_InternalPB::set_allocated_total_assets(
    ::std::string* total_assets)
{
    if (total_assets != NULL) {
        set_has_total_assets();
    } else {
        clear_has_total_assets();
    }
    total_assets_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        total_assets);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.MarketData_InternalPB.total_assets)
}

// optional string number_bids = 8;
inline bool MarketData_InternalPB::has_number_bids() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MarketData_InternalPB::set_has_number_bids()
{
    _has_bits_[0] |= 0x00000080u;
}
inline void MarketData_InternalPB::clear_has_number_bids()
{
    _has_bits_[0] &= ~0x00000080u;
}
inline void MarketData_InternalPB::clear_number_bids()
{
    number_bids_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_number_bids();
}
inline const ::std::string& MarketData_InternalPB::number_bids() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.MarketData_InternalPB.number_bids)
    return number_bids_.GetNoArena();
}
inline void MarketData_InternalPB::set_number_bids(const ::std::string& value)
{
    set_has_number_bids();
    number_bids_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.MarketData_InternalPB.number_bids)
}
#if LANG_CXX11
inline void MarketData_InternalPB::set_number_bids(::std::string&& value)
{
    set_has_number_bids();
    number_bids_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.MarketData_InternalPB.number_bids)
}
#endif
inline void MarketData_InternalPB::set_number_bids(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_number_bids();
    number_bids_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.MarketData_InternalPB.number_bids)
}
inline void MarketData_InternalPB::set_number_bids(
    const char* value,
    size_t size)
{
    set_has_number_bids();
    number_bids_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.MarketData_InternalPB.number_bids)
}
inline ::std::string* MarketData_InternalPB::mutable_number_bids()
{
    set_has_number_bids();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.MarketData_InternalPB.number_bids)
    return number_bids_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData_InternalPB::release_number_bids()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.MarketData_InternalPB.number_bids)
    clear_has_number_bids();
    return number_bids_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData_InternalPB::set_allocated_number_bids(
    ::std::string* number_bids)
{
    if (number_bids != NULL) {
        set_has_number_bids();
    } else {
        clear_has_number_bids();
    }
    number_bids_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        number_bids);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.MarketData_InternalPB.number_bids)
}

// optional string number_asks = 9;
inline bool MarketData_InternalPB::has_number_asks() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MarketData_InternalPB::set_has_number_asks()
{
    _has_bits_[0] |= 0x00000100u;
}
inline void MarketData_InternalPB::clear_has_number_asks()
{
    _has_bits_[0] &= ~0x00000100u;
}
inline void MarketData_InternalPB::clear_number_asks()
{
    number_asks_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_number_asks();
}
inline const ::std::string& MarketData_InternalPB::number_asks() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.MarketData_InternalPB.number_asks)
    return number_asks_.GetNoArena();
}
inline void MarketData_InternalPB::set_number_asks(const ::std::string& value)
{
    set_has_number_asks();
    number_asks_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.MarketData_InternalPB.number_asks)
}
#if LANG_CXX11
inline void MarketData_InternalPB::set_number_asks(::std::string&& value)
{
    set_has_number_asks();
    number_asks_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.MarketData_InternalPB.number_asks)
}
#endif
inline void MarketData_InternalPB::set_number_asks(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_number_asks();
    number_asks_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.MarketData_InternalPB.number_asks)
}
inline void MarketData_InternalPB::set_number_asks(
    const char* value,
    size_t size)
{
    set_has_number_asks();
    number_asks_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.MarketData_InternalPB.number_asks)
}
inline ::std::string* MarketData_InternalPB::mutable_number_asks()
{
    set_has_number_asks();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.MarketData_InternalPB.number_asks)
    return number_asks_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData_InternalPB::release_number_asks()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.MarketData_InternalPB.number_asks)
    clear_has_number_asks();
    return number_asks_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData_InternalPB::set_allocated_number_asks(
    ::std::string* number_asks)
{
    if (number_asks != NULL) {
        set_has_number_asks();
    } else {
        clear_has_number_asks();
    }
    number_asks_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        number_asks);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.MarketData_InternalPB.number_asks)
}

// optional string last_sale_price = 10;
inline bool MarketData_InternalPB::has_last_sale_price() const
{
    return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MarketData_InternalPB::set_has_last_sale_price()
{
    _has_bits_[0] |= 0x00000200u;
}
inline void MarketData_InternalPB::clear_has_last_sale_price()
{
    _has_bits_[0] &= ~0x00000200u;
}
inline void MarketData_InternalPB::clear_last_sale_price()
{
    last_sale_price_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_last_sale_price();
}
inline const ::std::string& MarketData_InternalPB::last_sale_price() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.MarketData_InternalPB.last_sale_price)
    return last_sale_price_.GetNoArena();
}
inline void MarketData_InternalPB::set_last_sale_price(
    const ::std::string& value)
{
    set_has_last_sale_price();
    last_sale_price_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.MarketData_InternalPB.last_sale_price)
}
#if LANG_CXX11
inline void MarketData_InternalPB::set_last_sale_price(::std::string&& value)
{
    set_has_last_sale_price();
    last_sale_price_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.MarketData_InternalPB.last_sale_price)
}
#endif
inline void MarketData_InternalPB::set_last_sale_price(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_last_sale_price();
    last_sale_price_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.MarketData_InternalPB.last_sale_price)
}
inline void MarketData_InternalPB::set_last_sale_price(
    const char* value,
    size_t size)
{
    set_has_last_sale_price();
    last_sale_price_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.MarketData_InternalPB.last_sale_price)
}
inline ::std::string* MarketData_InternalPB::mutable_last_sale_price()
{
    set_has_last_sale_price();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.MarketData_InternalPB.last_sale_price)
    return last_sale_price_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData_InternalPB::release_last_sale_price()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.MarketData_InternalPB.last_sale_price)
    clear_has_last_sale_price();
    return last_sale_price_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData_InternalPB::set_allocated_last_sale_price(
    ::std::string* last_sale_price)
{
    if (last_sale_price != NULL) {
        set_has_last_sale_price();
    } else {
        clear_has_last_sale_price();
    }
    last_sale_price_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        last_sale_price);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.MarketData_InternalPB.last_sale_price)
}

// optional string current_bid = 11;
inline bool MarketData_InternalPB::has_current_bid() const
{
    return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MarketData_InternalPB::set_has_current_bid()
{
    _has_bits_[0] |= 0x00000400u;
}
inline void MarketData_InternalPB::clear_has_current_bid()
{
    _has_bits_[0] &= ~0x00000400u;
}
inline void MarketData_InternalPB::clear_current_bid()
{
    current_bid_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_current_bid();
}
inline const ::std::string& MarketData_InternalPB::current_bid() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.MarketData_InternalPB.current_bid)
    return current_bid_.GetNoArena();
}
inline void MarketData_InternalPB::set_current_bid(const ::std::string& value)
{
    set_has_current_bid();
    current_bid_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.MarketData_InternalPB.current_bid)
}
#if LANG_CXX11
inline void MarketData_InternalPB::set_current_bid(::std::string&& value)
{
    set_has_current_bid();
    current_bid_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.MarketData_InternalPB.current_bid)
}
#endif
inline void MarketData_InternalPB::set_current_bid(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_current_bid();
    current_bid_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.MarketData_InternalPB.current_bid)
}
inline void MarketData_InternalPB::set_current_bid(
    const char* value,
    size_t size)
{
    set_has_current_bid();
    current_bid_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.MarketData_InternalPB.current_bid)
}
inline ::std::string* MarketData_InternalPB::mutable_current_bid()
{
    set_has_current_bid();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.MarketData_InternalPB.current_bid)
    return current_bid_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData_InternalPB::release_current_bid()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.MarketData_InternalPB.current_bid)
    clear_has_current_bid();
    return current_bid_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData_InternalPB::set_allocated_current_bid(
    ::std::string* current_bid)
{
    if (current_bid != NULL) {
        set_has_current_bid();
    } else {
        clear_has_current_bid();
    }
    current_bid_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        current_bid);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.MarketData_InternalPB.current_bid)
}

// optional string current_ask = 12;
inline bool MarketData_InternalPB::has_current_ask() const
{
    return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MarketData_InternalPB::set_has_current_ask()
{
    _has_bits_[0] |= 0x00000800u;
}
inline void MarketData_InternalPB::clear_has_current_ask()
{
    _has_bits_[0] &= ~0x00000800u;
}
inline void MarketData_InternalPB::clear_current_ask()
{
    current_ask_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_current_ask();
}
inline const ::std::string& MarketData_InternalPB::current_ask() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.MarketData_InternalPB.current_ask)
    return current_ask_.GetNoArena();
}
inline void MarketData_InternalPB::set_current_ask(const ::std::string& value)
{
    set_has_current_ask();
    current_ask_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.MarketData_InternalPB.current_ask)
}
#if LANG_CXX11
inline void MarketData_InternalPB::set_current_ask(::std::string&& value)
{
    set_has_current_ask();
    current_ask_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.MarketData_InternalPB.current_ask)
}
#endif
inline void MarketData_InternalPB::set_current_ask(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_current_ask();
    current_ask_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.MarketData_InternalPB.current_ask)
}
inline void MarketData_InternalPB::set_current_ask(
    const char* value,
    size_t size)
{
    set_has_current_ask();
    current_ask_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.MarketData_InternalPB.current_ask)
}
inline ::std::string* MarketData_InternalPB::mutable_current_ask()
{
    set_has_current_ask();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.MarketData_InternalPB.current_ask)
    return current_ask_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData_InternalPB::release_current_ask()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.MarketData_InternalPB.current_ask)
    clear_has_current_ask();
    return current_ask_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData_InternalPB::set_allocated_current_ask(
    ::std::string* current_ask)
{
    if (current_ask != NULL) {
        set_has_current_ask();
    } else {
        clear_has_current_ask();
    }
    current_ask_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        current_ask);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.MarketData_InternalPB.current_ask)
}

// optional string volume_trades = 13;
inline bool MarketData_InternalPB::has_volume_trades() const
{
    return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MarketData_InternalPB::set_has_volume_trades()
{
    _has_bits_[0] |= 0x00001000u;
}
inline void MarketData_InternalPB::clear_has_volume_trades()
{
    _has_bits_[0] &= ~0x00001000u;
}
inline void MarketData_InternalPB::clear_volume_trades()
{
    volume_trades_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_volume_trades();
}
inline const ::std::string& MarketData_InternalPB::volume_trades() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.MarketData_InternalPB.volume_trades)
    return volume_trades_.GetNoArena();
}
inline void MarketData_InternalPB::set_volume_trades(const ::std::string& value)
{
    set_has_volume_trades();
    volume_trades_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.MarketData_InternalPB.volume_trades)
}
#if LANG_CXX11
inline void MarketData_InternalPB::set_volume_trades(::std::string&& value)
{
    set_has_volume_trades();
    volume_trades_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.MarketData_InternalPB.volume_trades)
}
#endif
inline void MarketData_InternalPB::set_volume_trades(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_volume_trades();
    volume_trades_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.MarketData_InternalPB.volume_trades)
}
inline void MarketData_InternalPB::set_volume_trades(
    const char* value,
    size_t size)
{
    set_has_volume_trades();
    volume_trades_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.MarketData_InternalPB.volume_trades)
}
inline ::std::string* MarketData_InternalPB::mutable_volume_trades()
{
    set_has_volume_trades();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.MarketData_InternalPB.volume_trades)
    return volume_trades_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData_InternalPB::release_volume_trades()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.MarketData_InternalPB.volume_trades)
    clear_has_volume_trades();
    return volume_trades_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData_InternalPB::set_allocated_volume_trades(
    ::std::string* volume_trades)
{
    if (volume_trades != NULL) {
        set_has_volume_trades();
    } else {
        clear_has_volume_trades();
    }
    volume_trades_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        volume_trades);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.MarketData_InternalPB.volume_trades)
}

// optional string volume_assets = 14;
inline bool MarketData_InternalPB::has_volume_assets() const
{
    return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MarketData_InternalPB::set_has_volume_assets()
{
    _has_bits_[0] |= 0x00002000u;
}
inline void MarketData_InternalPB::clear_has_volume_assets()
{
    _has_bits_[0] &= ~0x00002000u;
}
inline void MarketData_InternalPB::clear_volume_assets()
{
    volume_assets_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_volume_assets();
}
inline const ::std::string& MarketData_InternalPB::volume_assets() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.MarketData_InternalPB.volume_assets)
    return volume_assets_.GetNoArena();
}
inline void MarketData_InternalPB::set_volume_assets(const ::std::string& value)
{
    set_has_volume_assets();
    volume_assets_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.MarketData_InternalPB.volume_assets)
}
#if LANG_CXX11
inline void MarketData_InternalPB::set_volume_assets(::std::string&& value)
{
    set_has_volume_assets();
    volume_assets_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.MarketData_InternalPB.volume_assets)
}
#endif
inline void MarketData_InternalPB::set_volume_assets(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_volume_assets();
    volume_assets_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.MarketData_InternalPB.volume_assets)
}
inline void MarketData_InternalPB::set_volume_assets(
    const char* value,
    size_t size)
{
    set_has_volume_assets();
    volume_assets_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.MarketData_InternalPB.volume_assets)
}
inline ::std::string* MarketData_InternalPB::mutable_volume_assets()
{
    set_has_volume_assets();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.MarketData_InternalPB.volume_assets)
    return volume_assets_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData_InternalPB::release_volume_assets()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.MarketData_InternalPB.volume_assets)
    clear_has_volume_assets();
    return volume_assets_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData_InternalPB::set_allocated_volume_assets(
    ::std::string* volume_assets)
{
    if (volume_assets != NULL) {
        set_has_volume_assets();
    } else {
        clear_has_volume_assets();
    }
    volume_assets_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        volume_assets);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.MarketData_InternalPB.volume_assets)
}

// optional string volume_currency = 15;
inline bool MarketData_InternalPB::has_volume_currency() const
{
    return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MarketData_InternalPB::set_has_volume_currency()
{
    _has_bits_[0] |= 0x00004000u;
}
inline void MarketData_InternalPB::clear_has_volume_currency()
{
    _has_bits_[0] &= ~0x00004000u;
}
inline void MarketData_InternalPB::clear_volume_currency()
{
    volume_currency_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_volume_currency();
}
inline const ::std::string& MarketData_InternalPB::volume_currency() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.MarketData_InternalPB.volume_currency)
    return volume_currency_.GetNoArena();
}
inline void MarketData_InternalPB::set_volume_currency(
    const ::std::string& value)
{
    set_has_volume_currency();
    volume_currency_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.MarketData_InternalPB.volume_currency)
}
#if LANG_CXX11
inline void MarketData_InternalPB::set_volume_currency(::std::string&& value)
{
    set_has_volume_currency();
    volume_currency_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.MarketData_InternalPB.volume_currency)
}
#endif
inline void MarketData_InternalPB::set_volume_currency(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_volume_currency();
    volume_currency_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.MarketData_InternalPB.volume_currency)
}
inline void MarketData_InternalPB::set_volume_currency(
    const char* value,
    size_t size)
{
    set_has_volume_currency();
    volume_currency_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.MarketData_InternalPB.volume_currency)
}
inline ::std::string* MarketData_InternalPB::mutable_volume_currency()
{
    set_has_volume_currency();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.MarketData_InternalPB.volume_currency)
    return volume_currency_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData_InternalPB::release_volume_currency()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.MarketData_InternalPB.volume_currency)
    clear_has_volume_currency();
    return volume_currency_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData_InternalPB::set_allocated_volume_currency(
    ::std::string* volume_currency)
{
    if (volume_currency != NULL) {
        set_has_volume_currency();
    } else {
        clear_has_volume_currency();
    }
    volume_currency_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        volume_currency);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.MarketData_InternalPB.volume_currency)
}

// optional string recent_highest_bid = 16;
inline bool MarketData_InternalPB::has_recent_highest_bid() const
{
    return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MarketData_InternalPB::set_has_recent_highest_bid()
{
    _has_bits_[0] |= 0x00008000u;
}
inline void MarketData_InternalPB::clear_has_recent_highest_bid()
{
    _has_bits_[0] &= ~0x00008000u;
}
inline void MarketData_InternalPB::clear_recent_highest_bid()
{
    recent_highest_bid_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_recent_highest_bid();
}
inline const ::std::string& MarketData_InternalPB::recent_highest_bid() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.MarketData_InternalPB.recent_highest_bid)
    return recent_highest_bid_.GetNoArena();
}
inline void MarketData_InternalPB::set_recent_highest_bid(
    const ::std::string& value)
{
    set_has_recent_highest_bid();
    recent_highest_bid_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.MarketData_InternalPB.recent_highest_bid)
}
#if LANG_CXX11
inline void MarketData_InternalPB::set_recent_highest_bid(::std::string&& value)
{
    set_has_recent_highest_bid();
    recent_highest_bid_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.MarketData_InternalPB.recent_highest_bid)
}
#endif
inline void MarketData_InternalPB::set_recent_highest_bid(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_recent_highest_bid();
    recent_highest_bid_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.MarketData_InternalPB.recent_highest_bid)
}
inline void MarketData_InternalPB::set_recent_highest_bid(
    const char* value,
    size_t size)
{
    set_has_recent_highest_bid();
    recent_highest_bid_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.MarketData_InternalPB.recent_highest_bid)
}
inline ::std::string* MarketData_InternalPB::mutable_recent_highest_bid()
{
    set_has_recent_highest_bid();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.MarketData_InternalPB.recent_highest_bid)
    return recent_highest_bid_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData_InternalPB::release_recent_highest_bid()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.MarketData_InternalPB.recent_highest_bid)
    clear_has_recent_highest_bid();
    return recent_highest_bid_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData_InternalPB::set_allocated_recent_highest_bid(
    ::std::string* recent_highest_bid)
{
    if (recent_highest_bid != NULL) {
        set_has_recent_highest_bid();
    } else {
        clear_has_recent_highest_bid();
    }
    recent_highest_bid_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        recent_highest_bid);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.MarketData_InternalPB.recent_highest_bid)
}

// optional string recent_lowest_ask = 17;
inline bool MarketData_InternalPB::has_recent_lowest_ask() const
{
    return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MarketData_InternalPB::set_has_recent_lowest_ask()
{
    _has_bits_[0] |= 0x00010000u;
}
inline void MarketData_InternalPB::clear_has_recent_lowest_ask()
{
    _has_bits_[0] &= ~0x00010000u;
}
inline void MarketData_InternalPB::clear_recent_lowest_ask()
{
    recent_lowest_ask_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_recent_lowest_ask();
}
inline const ::std::string& MarketData_InternalPB::recent_lowest_ask() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.MarketData_InternalPB.recent_lowest_ask)
    return recent_lowest_ask_.GetNoArena();
}
inline void MarketData_InternalPB::set_recent_lowest_ask(
    const ::std::string& value)
{
    set_has_recent_lowest_ask();
    recent_lowest_ask_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.MarketData_InternalPB.recent_lowest_ask)
}
#if LANG_CXX11
inline void MarketData_InternalPB::set_recent_lowest_ask(::std::string&& value)
{
    set_has_recent_lowest_ask();
    recent_lowest_ask_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.MarketData_InternalPB.recent_lowest_ask)
}
#endif
inline void MarketData_InternalPB::set_recent_lowest_ask(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_recent_lowest_ask();
    recent_lowest_ask_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.MarketData_InternalPB.recent_lowest_ask)
}
inline void MarketData_InternalPB::set_recent_lowest_ask(
    const char* value,
    size_t size)
{
    set_has_recent_lowest_ask();
    recent_lowest_ask_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.MarketData_InternalPB.recent_lowest_ask)
}
inline ::std::string* MarketData_InternalPB::mutable_recent_lowest_ask()
{
    set_has_recent_lowest_ask();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.MarketData_InternalPB.recent_lowest_ask)
    return recent_lowest_ask_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData_InternalPB::release_recent_lowest_ask()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.MarketData_InternalPB.recent_lowest_ask)
    clear_has_recent_lowest_ask();
    return recent_lowest_ask_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData_InternalPB::set_allocated_recent_lowest_ask(
    ::std::string* recent_lowest_ask)
{
    if (recent_lowest_ask != NULL) {
        set_has_recent_lowest_ask();
    } else {
        clear_has_recent_lowest_ask();
    }
    recent_lowest_ask_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        recent_lowest_ask);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.MarketData_InternalPB.recent_lowest_ask)
}

// optional string last_sale_date = 18;
inline bool MarketData_InternalPB::has_last_sale_date() const
{
    return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MarketData_InternalPB::set_has_last_sale_date()
{
    _has_bits_[0] |= 0x00020000u;
}
inline void MarketData_InternalPB::clear_has_last_sale_date()
{
    _has_bits_[0] &= ~0x00020000u;
}
inline void MarketData_InternalPB::clear_last_sale_date()
{
    last_sale_date_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_last_sale_date();
}
inline const ::std::string& MarketData_InternalPB::last_sale_date() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.MarketData_InternalPB.last_sale_date)
    return last_sale_date_.GetNoArena();
}
inline void MarketData_InternalPB::set_last_sale_date(
    const ::std::string& value)
{
    set_has_last_sale_date();
    last_sale_date_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.MarketData_InternalPB.last_sale_date)
}
#if LANG_CXX11
inline void MarketData_InternalPB::set_last_sale_date(::std::string&& value)
{
    set_has_last_sale_date();
    last_sale_date_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.MarketData_InternalPB.last_sale_date)
}
#endif
inline void MarketData_InternalPB::set_last_sale_date(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_last_sale_date();
    last_sale_date_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.MarketData_InternalPB.last_sale_date)
}
inline void MarketData_InternalPB::set_last_sale_date(
    const char* value,
    size_t size)
{
    set_has_last_sale_date();
    last_sale_date_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.MarketData_InternalPB.last_sale_date)
}
inline ::std::string* MarketData_InternalPB::mutable_last_sale_date()
{
    set_has_last_sale_date();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.MarketData_InternalPB.last_sale_date)
    return last_sale_date_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData_InternalPB::release_last_sale_date()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.MarketData_InternalPB.last_sale_date)
    clear_has_last_sale_date();
    return last_sale_date_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData_InternalPB::set_allocated_last_sale_date(
    ::std::string* last_sale_date)
{
    if (last_sale_date != NULL) {
        set_has_last_sale_date();
    } else {
        clear_has_last_sale_date();
    }
    last_sale_date_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        last_sale_date);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.MarketData_InternalPB.last_sale_date)
}

// -------------------------------------------------------------------

// MarketList_InternalPB

// repeated .opentxs.OTDB.MarketData_InternalPB market_data = 1;
inline int MarketList_InternalPB::market_data_size() const
{
    return market_data_.size();
}
inline void MarketList_InternalPB::clear_market_data() { market_data_.Clear(); }
inline const ::opentxs::OTDB::MarketData_InternalPB& MarketList_InternalPB::
    market_data(int index) const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.MarketList_InternalPB.market_data)
    return market_data_.Get(index);
}
inline ::opentxs::OTDB::MarketData_InternalPB* MarketList_InternalPB::
    mutable_market_data(int index)
{
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.MarketList_InternalPB.market_data)
    return market_data_.Mutable(index);
}
inline ::opentxs::OTDB::MarketData_InternalPB* MarketList_InternalPB::
    add_market_data()
{
    // @@protoc_insertion_point(field_add:opentxs.OTDB.MarketList_InternalPB.market_data)
    return market_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField<
    ::opentxs::OTDB::MarketData_InternalPB>*
MarketList_InternalPB::mutable_market_data()
{
    // @@protoc_insertion_point(field_mutable_list:opentxs.OTDB.MarketList_InternalPB.market_data)
    return &market_data_;
}
inline const ::google::protobuf::RepeatedPtrField<
    ::opentxs::OTDB::MarketData_InternalPB>&
MarketList_InternalPB::market_data() const
{
    // @@protoc_insertion_point(field_list:opentxs.OTDB.MarketList_InternalPB.market_data)
    return market_data_;
}

// -------------------------------------------------------------------

// OfferDataMarket_InternalPB

// optional string gui_label = 1;
inline bool OfferDataMarket_InternalPB::has_gui_label() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OfferDataMarket_InternalPB::set_has_gui_label()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void OfferDataMarket_InternalPB::clear_has_gui_label()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void OfferDataMarket_InternalPB::clear_gui_label()
{
    gui_label_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_gui_label();
}
inline const ::std::string& OfferDataMarket_InternalPB::gui_label() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferDataMarket_InternalPB.gui_label)
    return gui_label_.GetNoArena();
}
inline void OfferDataMarket_InternalPB::set_gui_label(
    const ::std::string& value)
{
    set_has_gui_label();
    gui_label_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.OfferDataMarket_InternalPB.gui_label)
}
#if LANG_CXX11
inline void OfferDataMarket_InternalPB::set_gui_label(::std::string&& value)
{
    set_has_gui_label();
    gui_label_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.OfferDataMarket_InternalPB.gui_label)
}
#endif
inline void OfferDataMarket_InternalPB::set_gui_label(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_gui_label();
    gui_label_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.OfferDataMarket_InternalPB.gui_label)
}
inline void OfferDataMarket_InternalPB::set_gui_label(
    const char* value,
    size_t size)
{
    set_has_gui_label();
    gui_label_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.OfferDataMarket_InternalPB.gui_label)
}
inline ::std::string* OfferDataMarket_InternalPB::mutable_gui_label()
{
    set_has_gui_label();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferDataMarket_InternalPB.gui_label)
    return gui_label_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfferDataMarket_InternalPB::release_gui_label()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.OfferDataMarket_InternalPB.gui_label)
    clear_has_gui_label();
    return gui_label_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfferDataMarket_InternalPB::set_allocated_gui_label(
    ::std::string* gui_label)
{
    if (gui_label != NULL) {
        set_has_gui_label();
    } else {
        clear_has_gui_label();
    }
    gui_label_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        gui_label);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.OfferDataMarket_InternalPB.gui_label)
}

// optional string transaction_id = 2;
inline bool OfferDataMarket_InternalPB::has_transaction_id() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OfferDataMarket_InternalPB::set_has_transaction_id()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void OfferDataMarket_InternalPB::clear_has_transaction_id()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void OfferDataMarket_InternalPB::clear_transaction_id()
{
    transaction_id_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_transaction_id();
}
inline const ::std::string& OfferDataMarket_InternalPB::transaction_id() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferDataMarket_InternalPB.transaction_id)
    return transaction_id_.GetNoArena();
}
inline void OfferDataMarket_InternalPB::set_transaction_id(
    const ::std::string& value)
{
    set_has_transaction_id();
    transaction_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.OfferDataMarket_InternalPB.transaction_id)
}
#if LANG_CXX11
inline void OfferDataMarket_InternalPB::set_transaction_id(
    ::std::string&& value)
{
    set_has_transaction_id();
    transaction_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.OfferDataMarket_InternalPB.transaction_id)
}
#endif
inline void OfferDataMarket_InternalPB::set_transaction_id(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_transaction_id();
    transaction_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.OfferDataMarket_InternalPB.transaction_id)
}
inline void OfferDataMarket_InternalPB::set_transaction_id(
    const char* value,
    size_t size)
{
    set_has_transaction_id();
    transaction_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.OfferDataMarket_InternalPB.transaction_id)
}
inline ::std::string* OfferDataMarket_InternalPB::mutable_transaction_id()
{
    set_has_transaction_id();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferDataMarket_InternalPB.transaction_id)
    return transaction_id_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfferDataMarket_InternalPB::release_transaction_id()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.OfferDataMarket_InternalPB.transaction_id)
    clear_has_transaction_id();
    return transaction_id_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfferDataMarket_InternalPB::set_allocated_transaction_id(
    ::std::string* transaction_id)
{
    if (transaction_id != NULL) {
        set_has_transaction_id();
    } else {
        clear_has_transaction_id();
    }
    transaction_id_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        transaction_id);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.OfferDataMarket_InternalPB.transaction_id)
}

// optional string price_per_scale = 3;
inline bool OfferDataMarket_InternalPB::has_price_per_scale() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OfferDataMarket_InternalPB::set_has_price_per_scale()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void OfferDataMarket_InternalPB::clear_has_price_per_scale()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void OfferDataMarket_InternalPB::clear_price_per_scale()
{
    price_per_scale_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_price_per_scale();
}
inline const ::std::string& OfferDataMarket_InternalPB::price_per_scale() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferDataMarket_InternalPB.price_per_scale)
    return price_per_scale_.GetNoArena();
}
inline void OfferDataMarket_InternalPB::set_price_per_scale(
    const ::std::string& value)
{
    set_has_price_per_scale();
    price_per_scale_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.OfferDataMarket_InternalPB.price_per_scale)
}
#if LANG_CXX11
inline void OfferDataMarket_InternalPB::set_price_per_scale(
    ::std::string&& value)
{
    set_has_price_per_scale();
    price_per_scale_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.OfferDataMarket_InternalPB.price_per_scale)
}
#endif
inline void OfferDataMarket_InternalPB::set_price_per_scale(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_price_per_scale();
    price_per_scale_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.OfferDataMarket_InternalPB.price_per_scale)
}
inline void OfferDataMarket_InternalPB::set_price_per_scale(
    const char* value,
    size_t size)
{
    set_has_price_per_scale();
    price_per_scale_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.OfferDataMarket_InternalPB.price_per_scale)
}
inline ::std::string* OfferDataMarket_InternalPB::mutable_price_per_scale()
{
    set_has_price_per_scale();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferDataMarket_InternalPB.price_per_scale)
    return price_per_scale_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfferDataMarket_InternalPB::release_price_per_scale()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.OfferDataMarket_InternalPB.price_per_scale)
    clear_has_price_per_scale();
    return price_per_scale_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfferDataMarket_InternalPB::set_allocated_price_per_scale(
    ::std::string* price_per_scale)
{
    if (price_per_scale != NULL) {
        set_has_price_per_scale();
    } else {
        clear_has_price_per_scale();
    }
    price_per_scale_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        price_per_scale);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.OfferDataMarket_InternalPB.price_per_scale)
}

// optional string available_assets = 4;
inline bool OfferDataMarket_InternalPB::has_available_assets() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OfferDataMarket_InternalPB::set_has_available_assets()
{
    _has_bits_[0] |= 0x00000008u;
}
inline void OfferDataMarket_InternalPB::clear_has_available_assets()
{
    _has_bits_[0] &= ~0x00000008u;
}
inline void OfferDataMarket_InternalPB::clear_available_assets()
{
    available_assets_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_available_assets();
}
inline const ::std::string& OfferDataMarket_InternalPB::available_assets() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferDataMarket_InternalPB.available_assets)
    return available_assets_.GetNoArena();
}
inline void OfferDataMarket_InternalPB::set_available_assets(
    const ::std::string& value)
{
    set_has_available_assets();
    available_assets_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.OfferDataMarket_InternalPB.available_assets)
}
#if LANG_CXX11
inline void OfferDataMarket_InternalPB::set_available_assets(
    ::std::string&& value)
{
    set_has_available_assets();
    available_assets_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.OfferDataMarket_InternalPB.available_assets)
}
#endif
inline void OfferDataMarket_InternalPB::set_available_assets(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_available_assets();
    available_assets_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.OfferDataMarket_InternalPB.available_assets)
}
inline void OfferDataMarket_InternalPB::set_available_assets(
    const char* value,
    size_t size)
{
    set_has_available_assets();
    available_assets_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.OfferDataMarket_InternalPB.available_assets)
}
inline ::std::string* OfferDataMarket_InternalPB::mutable_available_assets()
{
    set_has_available_assets();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferDataMarket_InternalPB.available_assets)
    return available_assets_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfferDataMarket_InternalPB::release_available_assets()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.OfferDataMarket_InternalPB.available_assets)
    clear_has_available_assets();
    return available_assets_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfferDataMarket_InternalPB::set_allocated_available_assets(
    ::std::string* available_assets)
{
    if (available_assets != NULL) {
        set_has_available_assets();
    } else {
        clear_has_available_assets();
    }
    available_assets_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        available_assets);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.OfferDataMarket_InternalPB.available_assets)
}

// optional string minimum_increment = 5;
inline bool OfferDataMarket_InternalPB::has_minimum_increment() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OfferDataMarket_InternalPB::set_has_minimum_increment()
{
    _has_bits_[0] |= 0x00000010u;
}
inline void OfferDataMarket_InternalPB::clear_has_minimum_increment()
{
    _has_bits_[0] &= ~0x00000010u;
}
inline void OfferDataMarket_InternalPB::clear_minimum_increment()
{
    minimum_increment_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_minimum_increment();
}
inline const ::std::string& OfferDataMarket_InternalPB::minimum_increment()
    const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferDataMarket_InternalPB.minimum_increment)
    return minimum_increment_.GetNoArena();
}
inline void OfferDataMarket_InternalPB::set_minimum_increment(
    const ::std::string& value)
{
    set_has_minimum_increment();
    minimum_increment_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.OfferDataMarket_InternalPB.minimum_increment)
}
#if LANG_CXX11
inline void OfferDataMarket_InternalPB::set_minimum_increment(
    ::std::string&& value)
{
    set_has_minimum_increment();
    minimum_increment_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.OfferDataMarket_InternalPB.minimum_increment)
}
#endif
inline void OfferDataMarket_InternalPB::set_minimum_increment(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_minimum_increment();
    minimum_increment_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.OfferDataMarket_InternalPB.minimum_increment)
}
inline void OfferDataMarket_InternalPB::set_minimum_increment(
    const char* value,
    size_t size)
{
    set_has_minimum_increment();
    minimum_increment_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.OfferDataMarket_InternalPB.minimum_increment)
}
inline ::std::string* OfferDataMarket_InternalPB::mutable_minimum_increment()
{
    set_has_minimum_increment();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferDataMarket_InternalPB.minimum_increment)
    return minimum_increment_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfferDataMarket_InternalPB::release_minimum_increment()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.OfferDataMarket_InternalPB.minimum_increment)
    clear_has_minimum_increment();
    return minimum_increment_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfferDataMarket_InternalPB::set_allocated_minimum_increment(
    ::std::string* minimum_increment)
{
    if (minimum_increment != NULL) {
        set_has_minimum_increment();
    } else {
        clear_has_minimum_increment();
    }
    minimum_increment_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        minimum_increment);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.OfferDataMarket_InternalPB.minimum_increment)
}

// optional string date = 6;
inline bool OfferDataMarket_InternalPB::has_date() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OfferDataMarket_InternalPB::set_has_date()
{
    _has_bits_[0] |= 0x00000020u;
}
inline void OfferDataMarket_InternalPB::clear_has_date()
{
    _has_bits_[0] &= ~0x00000020u;
}
inline void OfferDataMarket_InternalPB::clear_date()
{
    date_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_date();
}
inline const ::std::string& OfferDataMarket_InternalPB::date() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferDataMarket_InternalPB.date)
    return date_.GetNoArena();
}
inline void OfferDataMarket_InternalPB::set_date(const ::std::string& value)
{
    set_has_date();
    date_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.OfferDataMarket_InternalPB.date)
}
#if LANG_CXX11
inline void OfferDataMarket_InternalPB::set_date(::std::string&& value)
{
    set_has_date();
    date_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.OfferDataMarket_InternalPB.date)
}
#endif
inline void OfferDataMarket_InternalPB::set_date(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_date();
    date_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.OfferDataMarket_InternalPB.date)
}
inline void OfferDataMarket_InternalPB::set_date(const char* value, size_t size)
{
    set_has_date();
    date_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.OfferDataMarket_InternalPB.date)
}
inline ::std::string* OfferDataMarket_InternalPB::mutable_date()
{
    set_has_date();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferDataMarket_InternalPB.date)
    return date_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfferDataMarket_InternalPB::release_date()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.OfferDataMarket_InternalPB.date)
    clear_has_date();
    return date_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfferDataMarket_InternalPB::set_allocated_date(::std::string* date)
{
    if (date != NULL) {
        set_has_date();
    } else {
        clear_has_date();
    }
    date_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.OfferDataMarket_InternalPB.date)
}

// -------------------------------------------------------------------

// OfferListMarket_InternalPB

// repeated .opentxs.OTDB.OfferDataMarket_InternalPB bids = 1;
inline int OfferListMarket_InternalPB::bids_size() const
{
    return bids_.size();
}
inline void OfferListMarket_InternalPB::clear_bids() { bids_.Clear(); }
inline const ::opentxs::OTDB::OfferDataMarket_InternalPB&
OfferListMarket_InternalPB::bids(int index) const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferListMarket_InternalPB.bids)
    return bids_.Get(index);
}
inline ::opentxs::OTDB::OfferDataMarket_InternalPB* OfferListMarket_InternalPB::
    mutable_bids(int index)
{
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferListMarket_InternalPB.bids)
    return bids_.Mutable(index);
}
inline ::opentxs::OTDB::OfferDataMarket_InternalPB* OfferListMarket_InternalPB::
    add_bids()
{
    // @@protoc_insertion_point(field_add:opentxs.OTDB.OfferListMarket_InternalPB.bids)
    return bids_.Add();
}
inline ::google::protobuf::RepeatedPtrField<
    ::opentxs::OTDB::OfferDataMarket_InternalPB>*
OfferListMarket_InternalPB::mutable_bids()
{
    // @@protoc_insertion_point(field_mutable_list:opentxs.OTDB.OfferListMarket_InternalPB.bids)
    return &bids_;
}
inline const ::google::protobuf::RepeatedPtrField<
    ::opentxs::OTDB::OfferDataMarket_InternalPB>&
OfferListMarket_InternalPB::bids() const
{
    // @@protoc_insertion_point(field_list:opentxs.OTDB.OfferListMarket_InternalPB.bids)
    return bids_;
}

// repeated .opentxs.OTDB.OfferDataMarket_InternalPB asks = 2;
inline int OfferListMarket_InternalPB::asks_size() const
{
    return asks_.size();
}
inline void OfferListMarket_InternalPB::clear_asks() { asks_.Clear(); }
inline const ::opentxs::OTDB::OfferDataMarket_InternalPB&
OfferListMarket_InternalPB::asks(int index) const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferListMarket_InternalPB.asks)
    return asks_.Get(index);
}
inline ::opentxs::OTDB::OfferDataMarket_InternalPB* OfferListMarket_InternalPB::
    mutable_asks(int index)
{
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferListMarket_InternalPB.asks)
    return asks_.Mutable(index);
}
inline ::opentxs::OTDB::OfferDataMarket_InternalPB* OfferListMarket_InternalPB::
    add_asks()
{
    // @@protoc_insertion_point(field_add:opentxs.OTDB.OfferListMarket_InternalPB.asks)
    return asks_.Add();
}
inline ::google::protobuf::RepeatedPtrField<
    ::opentxs::OTDB::OfferDataMarket_InternalPB>*
OfferListMarket_InternalPB::mutable_asks()
{
    // @@protoc_insertion_point(field_mutable_list:opentxs.OTDB.OfferListMarket_InternalPB.asks)
    return &asks_;
}
inline const ::google::protobuf::RepeatedPtrField<
    ::opentxs::OTDB::OfferDataMarket_InternalPB>&
OfferListMarket_InternalPB::asks() const
{
    // @@protoc_insertion_point(field_list:opentxs.OTDB.OfferListMarket_InternalPB.asks)
    return asks_;
}

// -------------------------------------------------------------------

// TradeDataMarket_InternalPB

// optional string gui_label = 1;
inline bool TradeDataMarket_InternalPB::has_gui_label() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TradeDataMarket_InternalPB::set_has_gui_label()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void TradeDataMarket_InternalPB::clear_has_gui_label()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void TradeDataMarket_InternalPB::clear_gui_label()
{
    gui_label_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_gui_label();
}
inline const ::std::string& TradeDataMarket_InternalPB::gui_label() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeDataMarket_InternalPB.gui_label)
    return gui_label_.GetNoArena();
}
inline void TradeDataMarket_InternalPB::set_gui_label(
    const ::std::string& value)
{
    set_has_gui_label();
    gui_label_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.TradeDataMarket_InternalPB.gui_label)
}
#if LANG_CXX11
inline void TradeDataMarket_InternalPB::set_gui_label(::std::string&& value)
{
    set_has_gui_label();
    gui_label_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.TradeDataMarket_InternalPB.gui_label)
}
#endif
inline void TradeDataMarket_InternalPB::set_gui_label(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_gui_label();
    gui_label_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.TradeDataMarket_InternalPB.gui_label)
}
inline void TradeDataMarket_InternalPB::set_gui_label(
    const char* value,
    size_t size)
{
    set_has_gui_label();
    gui_label_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.TradeDataMarket_InternalPB.gui_label)
}
inline ::std::string* TradeDataMarket_InternalPB::mutable_gui_label()
{
    set_has_gui_label();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeDataMarket_InternalPB.gui_label)
    return gui_label_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeDataMarket_InternalPB::release_gui_label()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.TradeDataMarket_InternalPB.gui_label)
    clear_has_gui_label();
    return gui_label_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeDataMarket_InternalPB::set_allocated_gui_label(
    ::std::string* gui_label)
{
    if (gui_label != NULL) {
        set_has_gui_label();
    } else {
        clear_has_gui_label();
    }
    gui_label_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        gui_label);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.TradeDataMarket_InternalPB.gui_label)
}

// optional string transaction_id = 2;
inline bool TradeDataMarket_InternalPB::has_transaction_id() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TradeDataMarket_InternalPB::set_has_transaction_id()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void TradeDataMarket_InternalPB::clear_has_transaction_id()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void TradeDataMarket_InternalPB::clear_transaction_id()
{
    transaction_id_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_transaction_id();
}
inline const ::std::string& TradeDataMarket_InternalPB::transaction_id() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeDataMarket_InternalPB.transaction_id)
    return transaction_id_.GetNoArena();
}
inline void TradeDataMarket_InternalPB::set_transaction_id(
    const ::std::string& value)
{
    set_has_transaction_id();
    transaction_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.TradeDataMarket_InternalPB.transaction_id)
}
#if LANG_CXX11
inline void TradeDataMarket_InternalPB::set_transaction_id(
    ::std::string&& value)
{
    set_has_transaction_id();
    transaction_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.TradeDataMarket_InternalPB.transaction_id)
}
#endif
inline void TradeDataMarket_InternalPB::set_transaction_id(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_transaction_id();
    transaction_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.TradeDataMarket_InternalPB.transaction_id)
}
inline void TradeDataMarket_InternalPB::set_transaction_id(
    const char* value,
    size_t size)
{
    set_has_transaction_id();
    transaction_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.TradeDataMarket_InternalPB.transaction_id)
}
inline ::std::string* TradeDataMarket_InternalPB::mutable_transaction_id()
{
    set_has_transaction_id();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeDataMarket_InternalPB.transaction_id)
    return transaction_id_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeDataMarket_InternalPB::release_transaction_id()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.TradeDataMarket_InternalPB.transaction_id)
    clear_has_transaction_id();
    return transaction_id_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeDataMarket_InternalPB::set_allocated_transaction_id(
    ::std::string* transaction_id)
{
    if (transaction_id != NULL) {
        set_has_transaction_id();
    } else {
        clear_has_transaction_id();
    }
    transaction_id_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        transaction_id);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.TradeDataMarket_InternalPB.transaction_id)
}

// optional string date = 3;
inline bool TradeDataMarket_InternalPB::has_date() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TradeDataMarket_InternalPB::set_has_date()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void TradeDataMarket_InternalPB::clear_has_date()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void TradeDataMarket_InternalPB::clear_date()
{
    date_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_date();
}
inline const ::std::string& TradeDataMarket_InternalPB::date() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeDataMarket_InternalPB.date)
    return date_.GetNoArena();
}
inline void TradeDataMarket_InternalPB::set_date(const ::std::string& value)
{
    set_has_date();
    date_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.TradeDataMarket_InternalPB.date)
}
#if LANG_CXX11
inline void TradeDataMarket_InternalPB::set_date(::std::string&& value)
{
    set_has_date();
    date_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.TradeDataMarket_InternalPB.date)
}
#endif
inline void TradeDataMarket_InternalPB::set_date(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_date();
    date_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.TradeDataMarket_InternalPB.date)
}
inline void TradeDataMarket_InternalPB::set_date(const char* value, size_t size)
{
    set_has_date();
    date_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.TradeDataMarket_InternalPB.date)
}
inline ::std::string* TradeDataMarket_InternalPB::mutable_date()
{
    set_has_date();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeDataMarket_InternalPB.date)
    return date_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeDataMarket_InternalPB::release_date()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.TradeDataMarket_InternalPB.date)
    clear_has_date();
    return date_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeDataMarket_InternalPB::set_allocated_date(::std::string* date)
{
    if (date != NULL) {
        set_has_date();
    } else {
        clear_has_date();
    }
    date_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.TradeDataMarket_InternalPB.date)
}

// optional string price = 4;
inline bool TradeDataMarket_InternalPB::has_price() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TradeDataMarket_InternalPB::set_has_price()
{
    _has_bits_[0] |= 0x00000008u;
}
inline void TradeDataMarket_InternalPB::clear_has_price()
{
    _has_bits_[0] &= ~0x00000008u;
}
inline void TradeDataMarket_InternalPB::clear_price()
{
    price_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_price();
}
inline const ::std::string& TradeDataMarket_InternalPB::price() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeDataMarket_InternalPB.price)
    return price_.GetNoArena();
}
inline void TradeDataMarket_InternalPB::set_price(const ::std::string& value)
{
    set_has_price();
    price_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.TradeDataMarket_InternalPB.price)
}
#if LANG_CXX11
inline void TradeDataMarket_InternalPB::set_price(::std::string&& value)
{
    set_has_price();
    price_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.TradeDataMarket_InternalPB.price)
}
#endif
inline void TradeDataMarket_InternalPB::set_price(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_price();
    price_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.TradeDataMarket_InternalPB.price)
}
inline void TradeDataMarket_InternalPB::set_price(
    const char* value,
    size_t size)
{
    set_has_price();
    price_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.TradeDataMarket_InternalPB.price)
}
inline ::std::string* TradeDataMarket_InternalPB::mutable_price()
{
    set_has_price();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeDataMarket_InternalPB.price)
    return price_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeDataMarket_InternalPB::release_price()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.TradeDataMarket_InternalPB.price)
    clear_has_price();
    return price_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeDataMarket_InternalPB::set_allocated_price(
    ::std::string* price)
{
    if (price != NULL) {
        set_has_price();
    } else {
        clear_has_price();
    }
    price_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), price);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.TradeDataMarket_InternalPB.price)
}

// optional string amount_sold = 5;
inline bool TradeDataMarket_InternalPB::has_amount_sold() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TradeDataMarket_InternalPB::set_has_amount_sold()
{
    _has_bits_[0] |= 0x00000010u;
}
inline void TradeDataMarket_InternalPB::clear_has_amount_sold()
{
    _has_bits_[0] &= ~0x00000010u;
}
inline void TradeDataMarket_InternalPB::clear_amount_sold()
{
    amount_sold_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_amount_sold();
}
inline const ::std::string& TradeDataMarket_InternalPB::amount_sold() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeDataMarket_InternalPB.amount_sold)
    return amount_sold_.GetNoArena();
}
inline void TradeDataMarket_InternalPB::set_amount_sold(
    const ::std::string& value)
{
    set_has_amount_sold();
    amount_sold_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.TradeDataMarket_InternalPB.amount_sold)
}
#if LANG_CXX11
inline void TradeDataMarket_InternalPB::set_amount_sold(::std::string&& value)
{
    set_has_amount_sold();
    amount_sold_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.TradeDataMarket_InternalPB.amount_sold)
}
#endif
inline void TradeDataMarket_InternalPB::set_amount_sold(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_amount_sold();
    amount_sold_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.TradeDataMarket_InternalPB.amount_sold)
}
inline void TradeDataMarket_InternalPB::set_amount_sold(
    const char* value,
    size_t size)
{
    set_has_amount_sold();
    amount_sold_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.TradeDataMarket_InternalPB.amount_sold)
}
inline ::std::string* TradeDataMarket_InternalPB::mutable_amount_sold()
{
    set_has_amount_sold();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeDataMarket_InternalPB.amount_sold)
    return amount_sold_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeDataMarket_InternalPB::release_amount_sold()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.TradeDataMarket_InternalPB.amount_sold)
    clear_has_amount_sold();
    return amount_sold_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeDataMarket_InternalPB::set_allocated_amount_sold(
    ::std::string* amount_sold)
{
    if (amount_sold != NULL) {
        set_has_amount_sold();
    } else {
        clear_has_amount_sold();
    }
    amount_sold_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        amount_sold);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.TradeDataMarket_InternalPB.amount_sold)
}

// -------------------------------------------------------------------

// TradeListMarket_InternalPB

// repeated .opentxs.OTDB.TradeDataMarket_InternalPB trades = 1;
inline int TradeListMarket_InternalPB::trades_size() const
{
    return trades_.size();
}
inline void TradeListMarket_InternalPB::clear_trades() { trades_.Clear(); }
inline const ::opentxs::OTDB::TradeDataMarket_InternalPB&
TradeListMarket_InternalPB::trades(int index) const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeListMarket_InternalPB.trades)
    return trades_.Get(index);
}
inline ::opentxs::OTDB::TradeDataMarket_InternalPB* TradeListMarket_InternalPB::
    mutable_trades(int index)
{
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeListMarket_InternalPB.trades)
    return trades_.Mutable(index);
}
inline ::opentxs::OTDB::TradeDataMarket_InternalPB* TradeListMarket_InternalPB::
    add_trades()
{
    // @@protoc_insertion_point(field_add:opentxs.OTDB.TradeListMarket_InternalPB.trades)
    return trades_.Add();
}
inline ::google::protobuf::RepeatedPtrField<
    ::opentxs::OTDB::TradeDataMarket_InternalPB>*
TradeListMarket_InternalPB::mutable_trades()
{
    // @@protoc_insertion_point(field_mutable_list:opentxs.OTDB.TradeListMarket_InternalPB.trades)
    return &trades_;
}
inline const ::google::protobuf::RepeatedPtrField<
    ::opentxs::OTDB::TradeDataMarket_InternalPB>&
TradeListMarket_InternalPB::trades() const
{
    // @@protoc_insertion_point(field_list:opentxs.OTDB.TradeListMarket_InternalPB.trades)
    return trades_;
}

// -------------------------------------------------------------------

// OfferDataNym_InternalPB

// optional string gui_label = 1;
inline bool OfferDataNym_InternalPB::has_gui_label() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OfferDataNym_InternalPB::set_has_gui_label()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void OfferDataNym_InternalPB::clear_has_gui_label()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void OfferDataNym_InternalPB::clear_gui_label()
{
    gui_label_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_gui_label();
}
inline const ::std::string& OfferDataNym_InternalPB::gui_label() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferDataNym_InternalPB.gui_label)
    return gui_label_.GetNoArena();
}
inline void OfferDataNym_InternalPB::set_gui_label(const ::std::string& value)
{
    set_has_gui_label();
    gui_label_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.OfferDataNym_InternalPB.gui_label)
}
#if LANG_CXX11
inline void OfferDataNym_InternalPB::set_gui_label(::std::string&& value)
{
    set_has_gui_label();
    gui_label_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.OfferDataNym_InternalPB.gui_label)
}
#endif
inline void OfferDataNym_InternalPB::set_gui_label(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_gui_label();
    gui_label_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.OfferDataNym_InternalPB.gui_label)
}
inline void OfferDataNym_InternalPB::set_gui_label(
    const char* value,
    size_t size)
{
    set_has_gui_label();
    gui_label_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.OfferDataNym_InternalPB.gui_label)
}
inline ::std::string* OfferDataNym_InternalPB::mutable_gui_label()
{
    set_has_gui_label();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferDataNym_InternalPB.gui_label)
    return gui_label_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfferDataNym_InternalPB::release_gui_label()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.OfferDataNym_InternalPB.gui_label)
    clear_has_gui_label();
    return gui_label_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfferDataNym_InternalPB::set_allocated_gui_label(
    ::std::string* gui_label)
{
    if (gui_label != NULL) {
        set_has_gui_label();
    } else {
        clear_has_gui_label();
    }
    gui_label_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        gui_label);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.OfferDataNym_InternalPB.gui_label)
}

// optional string valid_from = 2;
inline bool OfferDataNym_InternalPB::has_valid_from() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OfferDataNym_InternalPB::set_has_valid_from()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void OfferDataNym_InternalPB::clear_has_valid_from()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void OfferDataNym_InternalPB::clear_valid_from()
{
    valid_from_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_valid_from();
}
inline const ::std::string& OfferDataNym_InternalPB::valid_from() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferDataNym_InternalPB.valid_from)
    return valid_from_.GetNoArena();
}
inline void OfferDataNym_InternalPB::set_valid_from(const ::std::string& value)
{
    set_has_valid_from();
    valid_from_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.OfferDataNym_InternalPB.valid_from)
}
#if LANG_CXX11
inline void OfferDataNym_InternalPB::set_valid_from(::std::string&& value)
{
    set_has_valid_from();
    valid_from_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.OfferDataNym_InternalPB.valid_from)
}
#endif
inline void OfferDataNym_InternalPB::set_valid_from(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_valid_from();
    valid_from_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.OfferDataNym_InternalPB.valid_from)
}
inline void OfferDataNym_InternalPB::set_valid_from(
    const char* value,
    size_t size)
{
    set_has_valid_from();
    valid_from_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.OfferDataNym_InternalPB.valid_from)
}
inline ::std::string* OfferDataNym_InternalPB::mutable_valid_from()
{
    set_has_valid_from();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferDataNym_InternalPB.valid_from)
    return valid_from_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfferDataNym_InternalPB::release_valid_from()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.OfferDataNym_InternalPB.valid_from)
    clear_has_valid_from();
    return valid_from_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfferDataNym_InternalPB::set_allocated_valid_from(
    ::std::string* valid_from)
{
    if (valid_from != NULL) {
        set_has_valid_from();
    } else {
        clear_has_valid_from();
    }
    valid_from_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        valid_from);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.OfferDataNym_InternalPB.valid_from)
}

// optional string valid_to = 3;
inline bool OfferDataNym_InternalPB::has_valid_to() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OfferDataNym_InternalPB::set_has_valid_to()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void OfferDataNym_InternalPB::clear_has_valid_to()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void OfferDataNym_InternalPB::clear_valid_to()
{
    valid_to_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_valid_to();
}
inline const ::std::string& OfferDataNym_InternalPB::valid_to() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferDataNym_InternalPB.valid_to)
    return valid_to_.GetNoArena();
}
inline void OfferDataNym_InternalPB::set_valid_to(const ::std::string& value)
{
    set_has_valid_to();
    valid_to_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.OfferDataNym_InternalPB.valid_to)
}
#if LANG_CXX11
inline void OfferDataNym_InternalPB::set_valid_to(::std::string&& value)
{
    set_has_valid_to();
    valid_to_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.OfferDataNym_InternalPB.valid_to)
}
#endif
inline void OfferDataNym_InternalPB::set_valid_to(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_valid_to();
    valid_to_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.OfferDataNym_InternalPB.valid_to)
}
inline void OfferDataNym_InternalPB::set_valid_to(
    const char* value,
    size_t size)
{
    set_has_valid_to();
    valid_to_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.OfferDataNym_InternalPB.valid_to)
}
inline ::std::string* OfferDataNym_InternalPB::mutable_valid_to()
{
    set_has_valid_to();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferDataNym_InternalPB.valid_to)
    return valid_to_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfferDataNym_InternalPB::release_valid_to()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.OfferDataNym_InternalPB.valid_to)
    clear_has_valid_to();
    return valid_to_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfferDataNym_InternalPB::set_allocated_valid_to(
    ::std::string* valid_to)
{
    if (valid_to != NULL) {
        set_has_valid_to();
    } else {
        clear_has_valid_to();
    }
    valid_to_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), valid_to);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.OfferDataNym_InternalPB.valid_to)
}

// optional string notary_id = 4;
inline bool OfferDataNym_InternalPB::has_notary_id() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OfferDataNym_InternalPB::set_has_notary_id()
{
    _has_bits_[0] |= 0x00000008u;
}
inline void OfferDataNym_InternalPB::clear_has_notary_id()
{
    _has_bits_[0] &= ~0x00000008u;
}
inline void OfferDataNym_InternalPB::clear_notary_id()
{
    notary_id_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_notary_id();
}
inline const ::std::string& OfferDataNym_InternalPB::notary_id() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferDataNym_InternalPB.notary_id)
    return notary_id_.GetNoArena();
}
inline void OfferDataNym_InternalPB::set_notary_id(const ::std::string& value)
{
    set_has_notary_id();
    notary_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.OfferDataNym_InternalPB.notary_id)
}
#if LANG_CXX11
inline void OfferDataNym_InternalPB::set_notary_id(::std::string&& value)
{
    set_has_notary_id();
    notary_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.OfferDataNym_InternalPB.notary_id)
}
#endif
inline void OfferDataNym_InternalPB::set_notary_id(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_notary_id();
    notary_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.OfferDataNym_InternalPB.notary_id)
}
inline void OfferDataNym_InternalPB::set_notary_id(
    const char* value,
    size_t size)
{
    set_has_notary_id();
    notary_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.OfferDataNym_InternalPB.notary_id)
}
inline ::std::string* OfferDataNym_InternalPB::mutable_notary_id()
{
    set_has_notary_id();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferDataNym_InternalPB.notary_id)
    return notary_id_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfferDataNym_InternalPB::release_notary_id()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.OfferDataNym_InternalPB.notary_id)
    clear_has_notary_id();
    return notary_id_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfferDataNym_InternalPB::set_allocated_notary_id(
    ::std::string* notary_id)
{
    if (notary_id != NULL) {
        set_has_notary_id();
    } else {
        clear_has_notary_id();
    }
    notary_id_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        notary_id);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.OfferDataNym_InternalPB.notary_id)
}

// optional string instrument_definition_id = 5;
inline bool OfferDataNym_InternalPB::has_instrument_definition_id() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OfferDataNym_InternalPB::set_has_instrument_definition_id()
{
    _has_bits_[0] |= 0x00000010u;
}
inline void OfferDataNym_InternalPB::clear_has_instrument_definition_id()
{
    _has_bits_[0] &= ~0x00000010u;
}
inline void OfferDataNym_InternalPB::clear_instrument_definition_id()
{
    instrument_definition_id_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_instrument_definition_id();
}
inline const ::std::string& OfferDataNym_InternalPB::instrument_definition_id()
    const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferDataNym_InternalPB.instrument_definition_id)
    return instrument_definition_id_.GetNoArena();
}
inline void OfferDataNym_InternalPB::set_instrument_definition_id(
    const ::std::string& value)
{
    set_has_instrument_definition_id();
    instrument_definition_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.OfferDataNym_InternalPB.instrument_definition_id)
}
#if LANG_CXX11
inline void OfferDataNym_InternalPB::set_instrument_definition_id(
    ::std::string&& value)
{
    set_has_instrument_definition_id();
    instrument_definition_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.OfferDataNym_InternalPB.instrument_definition_id)
}
#endif
inline void OfferDataNym_InternalPB::set_instrument_definition_id(
    const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_instrument_definition_id();
    instrument_definition_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.OfferDataNym_InternalPB.instrument_definition_id)
}
inline void OfferDataNym_InternalPB::set_instrument_definition_id(
    const char* value,
    size_t size)
{
    set_has_instrument_definition_id();
    instrument_definition_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.OfferDataNym_InternalPB.instrument_definition_id)
}
inline ::std::string* OfferDataNym_InternalPB::
    mutable_instrument_definition_id()
{
    set_has_instrument_definition_id();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferDataNym_InternalPB.instrument_definition_id)
    return instrument_definition_id_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfferDataNym_InternalPB::
    release_instrument_definition_id()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.OfferDataNym_InternalPB.instrument_definition_id)
    clear_has_instrument_definition_id();
    return instrument_definition_id_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfferDataNym_InternalPB::set_allocated_instrument_definition_id(
    ::std::string* instrument_definition_id)
{
    if (instrument_definition_id != NULL) {
        set_has_instrument_definition_id();
    } else {
        clear_has_instrument_definition_id();
    }
    instrument_definition_id_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        instrument_definition_id);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.OfferDataNym_InternalPB.instrument_definition_id)
}

// optional string asset_acct_id = 6;
inline bool OfferDataNym_InternalPB::has_asset_acct_id() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OfferDataNym_InternalPB::set_has_asset_acct_id()
{
    _has_bits_[0] |= 0x00000020u;
}
inline void OfferDataNym_InternalPB::clear_has_asset_acct_id()
{
    _has_bits_[0] &= ~0x00000020u;
}
inline void OfferDataNym_InternalPB::clear_asset_acct_id()
{
    asset_acct_id_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_asset_acct_id();
}
inline const ::std::string& OfferDataNym_InternalPB::asset_acct_id() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferDataNym_InternalPB.asset_acct_id)
    return asset_acct_id_.GetNoArena();
}
inline void OfferDataNym_InternalPB::set_asset_acct_id(
    const ::std::string& value)
{
    set_has_asset_acct_id();
    asset_acct_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.OfferDataNym_InternalPB.asset_acct_id)
}
#if LANG_CXX11
inline void OfferDataNym_InternalPB::set_asset_acct_id(::std::string&& value)
{
    set_has_asset_acct_id();
    asset_acct_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.OfferDataNym_InternalPB.asset_acct_id)
}
#endif
inline void OfferDataNym_InternalPB::set_asset_acct_id(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_asset_acct_id();
    asset_acct_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.OfferDataNym_InternalPB.asset_acct_id)
}
inline void OfferDataNym_InternalPB::set_asset_acct_id(
    const char* value,
    size_t size)
{
    set_has_asset_acct_id();
    asset_acct_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.OfferDataNym_InternalPB.asset_acct_id)
}
inline ::std::string* OfferDataNym_InternalPB::mutable_asset_acct_id()
{
    set_has_asset_acct_id();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferDataNym_InternalPB.asset_acct_id)
    return asset_acct_id_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfferDataNym_InternalPB::release_asset_acct_id()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.OfferDataNym_InternalPB.asset_acct_id)
    clear_has_asset_acct_id();
    return asset_acct_id_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfferDataNym_InternalPB::set_allocated_asset_acct_id(
    ::std::string* asset_acct_id)
{
    if (asset_acct_id != NULL) {
        set_has_asset_acct_id();
    } else {
        clear_has_asset_acct_id();
    }
    asset_acct_id_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        asset_acct_id);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.OfferDataNym_InternalPB.asset_acct_id)
}

// optional string currency_type_id = 7;
inline bool OfferDataNym_InternalPB::has_currency_type_id() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OfferDataNym_InternalPB::set_has_currency_type_id()
{
    _has_bits_[0] |= 0x00000040u;
}
inline void OfferDataNym_InternalPB::clear_has_currency_type_id()
{
    _has_bits_[0] &= ~0x00000040u;
}
inline void OfferDataNym_InternalPB::clear_currency_type_id()
{
    currency_type_id_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_currency_type_id();
}
inline const ::std::string& OfferDataNym_InternalPB::currency_type_id() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferDataNym_InternalPB.currency_type_id)
    return currency_type_id_.GetNoArena();
}
inline void OfferDataNym_InternalPB::set_currency_type_id(
    const ::std::string& value)
{
    set_has_currency_type_id();
    currency_type_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.OfferDataNym_InternalPB.currency_type_id)
}
#if LANG_CXX11
inline void OfferDataNym_InternalPB::set_currency_type_id(::std::string&& value)
{
    set_has_currency_type_id();
    currency_type_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.OfferDataNym_InternalPB.currency_type_id)
}
#endif
inline void OfferDataNym_InternalPB::set_currency_type_id(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_currency_type_id();
    currency_type_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.OfferDataNym_InternalPB.currency_type_id)
}
inline void OfferDataNym_InternalPB::set_currency_type_id(
    const char* value,
    size_t size)
{
    set_has_currency_type_id();
    currency_type_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.OfferDataNym_InternalPB.currency_type_id)
}
inline ::std::string* OfferDataNym_InternalPB::mutable_currency_type_id()
{
    set_has_currency_type_id();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferDataNym_InternalPB.currency_type_id)
    return currency_type_id_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfferDataNym_InternalPB::release_currency_type_id()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.OfferDataNym_InternalPB.currency_type_id)
    clear_has_currency_type_id();
    return currency_type_id_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfferDataNym_InternalPB::set_allocated_currency_type_id(
    ::std::string* currency_type_id)
{
    if (currency_type_id != NULL) {
        set_has_currency_type_id();
    } else {
        clear_has_currency_type_id();
    }
    currency_type_id_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        currency_type_id);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.OfferDataNym_InternalPB.currency_type_id)
}

// optional string currency_acct_id = 8;
inline bool OfferDataNym_InternalPB::has_currency_acct_id() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OfferDataNym_InternalPB::set_has_currency_acct_id()
{
    _has_bits_[0] |= 0x00000080u;
}
inline void OfferDataNym_InternalPB::clear_has_currency_acct_id()
{
    _has_bits_[0] &= ~0x00000080u;
}
inline void OfferDataNym_InternalPB::clear_currency_acct_id()
{
    currency_acct_id_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_currency_acct_id();
}
inline const ::std::string& OfferDataNym_InternalPB::currency_acct_id() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferDataNym_InternalPB.currency_acct_id)
    return currency_acct_id_.GetNoArena();
}
inline void OfferDataNym_InternalPB::set_currency_acct_id(
    const ::std::string& value)
{
    set_has_currency_acct_id();
    currency_acct_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.OfferDataNym_InternalPB.currency_acct_id)
}
#if LANG_CXX11
inline void OfferDataNym_InternalPB::set_currency_acct_id(::std::string&& value)
{
    set_has_currency_acct_id();
    currency_acct_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.OfferDataNym_InternalPB.currency_acct_id)
}
#endif
inline void OfferDataNym_InternalPB::set_currency_acct_id(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_currency_acct_id();
    currency_acct_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.OfferDataNym_InternalPB.currency_acct_id)
}
inline void OfferDataNym_InternalPB::set_currency_acct_id(
    const char* value,
    size_t size)
{
    set_has_currency_acct_id();
    currency_acct_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.OfferDataNym_InternalPB.currency_acct_id)
}
inline ::std::string* OfferDataNym_InternalPB::mutable_currency_acct_id()
{
    set_has_currency_acct_id();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferDataNym_InternalPB.currency_acct_id)
    return currency_acct_id_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfferDataNym_InternalPB::release_currency_acct_id()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.OfferDataNym_InternalPB.currency_acct_id)
    clear_has_currency_acct_id();
    return currency_acct_id_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfferDataNym_InternalPB::set_allocated_currency_acct_id(
    ::std::string* currency_acct_id)
{
    if (currency_acct_id != NULL) {
        set_has_currency_acct_id();
    } else {
        clear_has_currency_acct_id();
    }
    currency_acct_id_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        currency_acct_id);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.OfferDataNym_InternalPB.currency_acct_id)
}

// optional bool selling = 9;
inline bool OfferDataNym_InternalPB::has_selling() const
{
    return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void OfferDataNym_InternalPB::set_has_selling()
{
    _has_bits_[0] |= 0x00020000u;
}
inline void OfferDataNym_InternalPB::clear_has_selling()
{
    _has_bits_[0] &= ~0x00020000u;
}
inline void OfferDataNym_InternalPB::clear_selling()
{
    selling_ = false;
    clear_has_selling();
}
inline bool OfferDataNym_InternalPB::selling() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferDataNym_InternalPB.selling)
    return selling_;
}
inline void OfferDataNym_InternalPB::set_selling(bool value)
{
    set_has_selling();
    selling_ = value;
    // @@protoc_insertion_point(field_set:opentxs.OTDB.OfferDataNym_InternalPB.selling)
}

// optional string scale = 10;
inline bool OfferDataNym_InternalPB::has_scale() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OfferDataNym_InternalPB::set_has_scale()
{
    _has_bits_[0] |= 0x00000100u;
}
inline void OfferDataNym_InternalPB::clear_has_scale()
{
    _has_bits_[0] &= ~0x00000100u;
}
inline void OfferDataNym_InternalPB::clear_scale()
{
    scale_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_scale();
}
inline const ::std::string& OfferDataNym_InternalPB::scale() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferDataNym_InternalPB.scale)
    return scale_.GetNoArena();
}
inline void OfferDataNym_InternalPB::set_scale(const ::std::string& value)
{
    set_has_scale();
    scale_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.OfferDataNym_InternalPB.scale)
}
#if LANG_CXX11
inline void OfferDataNym_InternalPB::set_scale(::std::string&& value)
{
    set_has_scale();
    scale_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.OfferDataNym_InternalPB.scale)
}
#endif
inline void OfferDataNym_InternalPB::set_scale(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_scale();
    scale_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.OfferDataNym_InternalPB.scale)
}
inline void OfferDataNym_InternalPB::set_scale(const char* value, size_t size)
{
    set_has_scale();
    scale_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.OfferDataNym_InternalPB.scale)
}
inline ::std::string* OfferDataNym_InternalPB::mutable_scale()
{
    set_has_scale();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferDataNym_InternalPB.scale)
    return scale_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfferDataNym_InternalPB::release_scale()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.OfferDataNym_InternalPB.scale)
    clear_has_scale();
    return scale_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfferDataNym_InternalPB::set_allocated_scale(::std::string* scale)
{
    if (scale != NULL) {
        set_has_scale();
    } else {
        clear_has_scale();
    }
    scale_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), scale);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.OfferDataNym_InternalPB.scale)
}

// optional string price_per_scale = 11;
inline bool OfferDataNym_InternalPB::has_price_per_scale() const
{
    return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OfferDataNym_InternalPB::set_has_price_per_scale()
{
    _has_bits_[0] |= 0x00000200u;
}
inline void OfferDataNym_InternalPB::clear_has_price_per_scale()
{
    _has_bits_[0] &= ~0x00000200u;
}
inline void OfferDataNym_InternalPB::clear_price_per_scale()
{
    price_per_scale_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_price_per_scale();
}
inline const ::std::string& OfferDataNym_InternalPB::price_per_scale() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferDataNym_InternalPB.price_per_scale)
    return price_per_scale_.GetNoArena();
}
inline void OfferDataNym_InternalPB::set_price_per_scale(
    const ::std::string& value)
{
    set_has_price_per_scale();
    price_per_scale_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.OfferDataNym_InternalPB.price_per_scale)
}
#if LANG_CXX11
inline void OfferDataNym_InternalPB::set_price_per_scale(::std::string&& value)
{
    set_has_price_per_scale();
    price_per_scale_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.OfferDataNym_InternalPB.price_per_scale)
}
#endif
inline void OfferDataNym_InternalPB::set_price_per_scale(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_price_per_scale();
    price_per_scale_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.OfferDataNym_InternalPB.price_per_scale)
}
inline void OfferDataNym_InternalPB::set_price_per_scale(
    const char* value,
    size_t size)
{
    set_has_price_per_scale();
    price_per_scale_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.OfferDataNym_InternalPB.price_per_scale)
}
inline ::std::string* OfferDataNym_InternalPB::mutable_price_per_scale()
{
    set_has_price_per_scale();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferDataNym_InternalPB.price_per_scale)
    return price_per_scale_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfferDataNym_InternalPB::release_price_per_scale()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.OfferDataNym_InternalPB.price_per_scale)
    clear_has_price_per_scale();
    return price_per_scale_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfferDataNym_InternalPB::set_allocated_price_per_scale(
    ::std::string* price_per_scale)
{
    if (price_per_scale != NULL) {
        set_has_price_per_scale();
    } else {
        clear_has_price_per_scale();
    }
    price_per_scale_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        price_per_scale);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.OfferDataNym_InternalPB.price_per_scale)
}

// optional string transaction_id = 12;
inline bool OfferDataNym_InternalPB::has_transaction_id() const
{
    return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OfferDataNym_InternalPB::set_has_transaction_id()
{
    _has_bits_[0] |= 0x00000400u;
}
inline void OfferDataNym_InternalPB::clear_has_transaction_id()
{
    _has_bits_[0] &= ~0x00000400u;
}
inline void OfferDataNym_InternalPB::clear_transaction_id()
{
    transaction_id_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_transaction_id();
}
inline const ::std::string& OfferDataNym_InternalPB::transaction_id() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferDataNym_InternalPB.transaction_id)
    return transaction_id_.GetNoArena();
}
inline void OfferDataNym_InternalPB::set_transaction_id(
    const ::std::string& value)
{
    set_has_transaction_id();
    transaction_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.OfferDataNym_InternalPB.transaction_id)
}
#if LANG_CXX11
inline void OfferDataNym_InternalPB::set_transaction_id(::std::string&& value)
{
    set_has_transaction_id();
    transaction_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.OfferDataNym_InternalPB.transaction_id)
}
#endif
inline void OfferDataNym_InternalPB::set_transaction_id(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_transaction_id();
    transaction_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.OfferDataNym_InternalPB.transaction_id)
}
inline void OfferDataNym_InternalPB::set_transaction_id(
    const char* value,
    size_t size)
{
    set_has_transaction_id();
    transaction_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.OfferDataNym_InternalPB.transaction_id)
}
inline ::std::string* OfferDataNym_InternalPB::mutable_transaction_id()
{
    set_has_transaction_id();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferDataNym_InternalPB.transaction_id)
    return transaction_id_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfferDataNym_InternalPB::release_transaction_id()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.OfferDataNym_InternalPB.transaction_id)
    clear_has_transaction_id();
    return transaction_id_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfferDataNym_InternalPB::set_allocated_transaction_id(
    ::std::string* transaction_id)
{
    if (transaction_id != NULL) {
        set_has_transaction_id();
    } else {
        clear_has_transaction_id();
    }
    transaction_id_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        transaction_id);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.OfferDataNym_InternalPB.transaction_id)
}

// optional string total_assets = 13;
inline bool OfferDataNym_InternalPB::has_total_assets() const
{
    return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OfferDataNym_InternalPB::set_has_total_assets()
{
    _has_bits_[0] |= 0x00000800u;
}
inline void OfferDataNym_InternalPB::clear_has_total_assets()
{
    _has_bits_[0] &= ~0x00000800u;
}
inline void OfferDataNym_InternalPB::clear_total_assets()
{
    total_assets_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_total_assets();
}
inline const ::std::string& OfferDataNym_InternalPB::total_assets() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferDataNym_InternalPB.total_assets)
    return total_assets_.GetNoArena();
}
inline void OfferDataNym_InternalPB::set_total_assets(
    const ::std::string& value)
{
    set_has_total_assets();
    total_assets_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.OfferDataNym_InternalPB.total_assets)
}
#if LANG_CXX11
inline void OfferDataNym_InternalPB::set_total_assets(::std::string&& value)
{
    set_has_total_assets();
    total_assets_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.OfferDataNym_InternalPB.total_assets)
}
#endif
inline void OfferDataNym_InternalPB::set_total_assets(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_total_assets();
    total_assets_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.OfferDataNym_InternalPB.total_assets)
}
inline void OfferDataNym_InternalPB::set_total_assets(
    const char* value,
    size_t size)
{
    set_has_total_assets();
    total_assets_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.OfferDataNym_InternalPB.total_assets)
}
inline ::std::string* OfferDataNym_InternalPB::mutable_total_assets()
{
    set_has_total_assets();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferDataNym_InternalPB.total_assets)
    return total_assets_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfferDataNym_InternalPB::release_total_assets()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.OfferDataNym_InternalPB.total_assets)
    clear_has_total_assets();
    return total_assets_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfferDataNym_InternalPB::set_allocated_total_assets(
    ::std::string* total_assets)
{
    if (total_assets != NULL) {
        set_has_total_assets();
    } else {
        clear_has_total_assets();
    }
    total_assets_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        total_assets);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.OfferDataNym_InternalPB.total_assets)
}

// optional string finished_so_far = 14;
inline bool OfferDataNym_InternalPB::has_finished_so_far() const
{
    return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OfferDataNym_InternalPB::set_has_finished_so_far()
{
    _has_bits_[0] |= 0x00001000u;
}
inline void OfferDataNym_InternalPB::clear_has_finished_so_far()
{
    _has_bits_[0] &= ~0x00001000u;
}
inline void OfferDataNym_InternalPB::clear_finished_so_far()
{
    finished_so_far_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_finished_so_far();
}
inline const ::std::string& OfferDataNym_InternalPB::finished_so_far() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferDataNym_InternalPB.finished_so_far)
    return finished_so_far_.GetNoArena();
}
inline void OfferDataNym_InternalPB::set_finished_so_far(
    const ::std::string& value)
{
    set_has_finished_so_far();
    finished_so_far_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.OfferDataNym_InternalPB.finished_so_far)
}
#if LANG_CXX11
inline void OfferDataNym_InternalPB::set_finished_so_far(::std::string&& value)
{
    set_has_finished_so_far();
    finished_so_far_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.OfferDataNym_InternalPB.finished_so_far)
}
#endif
inline void OfferDataNym_InternalPB::set_finished_so_far(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_finished_so_far();
    finished_so_far_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.OfferDataNym_InternalPB.finished_so_far)
}
inline void OfferDataNym_InternalPB::set_finished_so_far(
    const char* value,
    size_t size)
{
    set_has_finished_so_far();
    finished_so_far_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.OfferDataNym_InternalPB.finished_so_far)
}
inline ::std::string* OfferDataNym_InternalPB::mutable_finished_so_far()
{
    set_has_finished_so_far();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferDataNym_InternalPB.finished_so_far)
    return finished_so_far_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfferDataNym_InternalPB::release_finished_so_far()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.OfferDataNym_InternalPB.finished_so_far)
    clear_has_finished_so_far();
    return finished_so_far_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfferDataNym_InternalPB::set_allocated_finished_so_far(
    ::std::string* finished_so_far)
{
    if (finished_so_far != NULL) {
        set_has_finished_so_far();
    } else {
        clear_has_finished_so_far();
    }
    finished_so_far_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        finished_so_far);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.OfferDataNym_InternalPB.finished_so_far)
}

// optional string minimum_increment = 15;
inline bool OfferDataNym_InternalPB::has_minimum_increment() const
{
    return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OfferDataNym_InternalPB::set_has_minimum_increment()
{
    _has_bits_[0] |= 0x00002000u;
}
inline void OfferDataNym_InternalPB::clear_has_minimum_increment()
{
    _has_bits_[0] &= ~0x00002000u;
}
inline void OfferDataNym_InternalPB::clear_minimum_increment()
{
    minimum_increment_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_minimum_increment();
}
inline const ::std::string& OfferDataNym_InternalPB::minimum_increment() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferDataNym_InternalPB.minimum_increment)
    return minimum_increment_.GetNoArena();
}
inline void OfferDataNym_InternalPB::set_minimum_increment(
    const ::std::string& value)
{
    set_has_minimum_increment();
    minimum_increment_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.OfferDataNym_InternalPB.minimum_increment)
}
#if LANG_CXX11
inline void OfferDataNym_InternalPB::set_minimum_increment(
    ::std::string&& value)
{
    set_has_minimum_increment();
    minimum_increment_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.OfferDataNym_InternalPB.minimum_increment)
}
#endif
inline void OfferDataNym_InternalPB::set_minimum_increment(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_minimum_increment();
    minimum_increment_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.OfferDataNym_InternalPB.minimum_increment)
}
inline void OfferDataNym_InternalPB::set_minimum_increment(
    const char* value,
    size_t size)
{
    set_has_minimum_increment();
    minimum_increment_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.OfferDataNym_InternalPB.minimum_increment)
}
inline ::std::string* OfferDataNym_InternalPB::mutable_minimum_increment()
{
    set_has_minimum_increment();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferDataNym_InternalPB.minimum_increment)
    return minimum_increment_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfferDataNym_InternalPB::release_minimum_increment()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.OfferDataNym_InternalPB.minimum_increment)
    clear_has_minimum_increment();
    return minimum_increment_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfferDataNym_InternalPB::set_allocated_minimum_increment(
    ::std::string* minimum_increment)
{
    if (minimum_increment != NULL) {
        set_has_minimum_increment();
    } else {
        clear_has_minimum_increment();
    }
    minimum_increment_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        minimum_increment);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.OfferDataNym_InternalPB.minimum_increment)
}

// optional string stop_sign = 16;
inline bool OfferDataNym_InternalPB::has_stop_sign() const
{
    return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OfferDataNym_InternalPB::set_has_stop_sign()
{
    _has_bits_[0] |= 0x00004000u;
}
inline void OfferDataNym_InternalPB::clear_has_stop_sign()
{
    _has_bits_[0] &= ~0x00004000u;
}
inline void OfferDataNym_InternalPB::clear_stop_sign()
{
    stop_sign_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_stop_sign();
}
inline const ::std::string& OfferDataNym_InternalPB::stop_sign() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferDataNym_InternalPB.stop_sign)
    return stop_sign_.GetNoArena();
}
inline void OfferDataNym_InternalPB::set_stop_sign(const ::std::string& value)
{
    set_has_stop_sign();
    stop_sign_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.OfferDataNym_InternalPB.stop_sign)
}
#if LANG_CXX11
inline void OfferDataNym_InternalPB::set_stop_sign(::std::string&& value)
{
    set_has_stop_sign();
    stop_sign_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.OfferDataNym_InternalPB.stop_sign)
}
#endif
inline void OfferDataNym_InternalPB::set_stop_sign(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_stop_sign();
    stop_sign_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.OfferDataNym_InternalPB.stop_sign)
}
inline void OfferDataNym_InternalPB::set_stop_sign(
    const char* value,
    size_t size)
{
    set_has_stop_sign();
    stop_sign_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.OfferDataNym_InternalPB.stop_sign)
}
inline ::std::string* OfferDataNym_InternalPB::mutable_stop_sign()
{
    set_has_stop_sign();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferDataNym_InternalPB.stop_sign)
    return stop_sign_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfferDataNym_InternalPB::release_stop_sign()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.OfferDataNym_InternalPB.stop_sign)
    clear_has_stop_sign();
    return stop_sign_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfferDataNym_InternalPB::set_allocated_stop_sign(
    ::std::string* stop_sign)
{
    if (stop_sign != NULL) {
        set_has_stop_sign();
    } else {
        clear_has_stop_sign();
    }
    stop_sign_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        stop_sign);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.OfferDataNym_InternalPB.stop_sign)
}

// optional string stop_price = 17;
inline bool OfferDataNym_InternalPB::has_stop_price() const
{
    return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OfferDataNym_InternalPB::set_has_stop_price()
{
    _has_bits_[0] |= 0x00008000u;
}
inline void OfferDataNym_InternalPB::clear_has_stop_price()
{
    _has_bits_[0] &= ~0x00008000u;
}
inline void OfferDataNym_InternalPB::clear_stop_price()
{
    stop_price_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_stop_price();
}
inline const ::std::string& OfferDataNym_InternalPB::stop_price() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferDataNym_InternalPB.stop_price)
    return stop_price_.GetNoArena();
}
inline void OfferDataNym_InternalPB::set_stop_price(const ::std::string& value)
{
    set_has_stop_price();
    stop_price_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.OfferDataNym_InternalPB.stop_price)
}
#if LANG_CXX11
inline void OfferDataNym_InternalPB::set_stop_price(::std::string&& value)
{
    set_has_stop_price();
    stop_price_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.OfferDataNym_InternalPB.stop_price)
}
#endif
inline void OfferDataNym_InternalPB::set_stop_price(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_stop_price();
    stop_price_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.OfferDataNym_InternalPB.stop_price)
}
inline void OfferDataNym_InternalPB::set_stop_price(
    const char* value,
    size_t size)
{
    set_has_stop_price();
    stop_price_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.OfferDataNym_InternalPB.stop_price)
}
inline ::std::string* OfferDataNym_InternalPB::mutable_stop_price()
{
    set_has_stop_price();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferDataNym_InternalPB.stop_price)
    return stop_price_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfferDataNym_InternalPB::release_stop_price()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.OfferDataNym_InternalPB.stop_price)
    clear_has_stop_price();
    return stop_price_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfferDataNym_InternalPB::set_allocated_stop_price(
    ::std::string* stop_price)
{
    if (stop_price != NULL) {
        set_has_stop_price();
    } else {
        clear_has_stop_price();
    }
    stop_price_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        stop_price);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.OfferDataNym_InternalPB.stop_price)
}

// optional string date = 18;
inline bool OfferDataNym_InternalPB::has_date() const
{
    return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OfferDataNym_InternalPB::set_has_date()
{
    _has_bits_[0] |= 0x00010000u;
}
inline void OfferDataNym_InternalPB::clear_has_date()
{
    _has_bits_[0] &= ~0x00010000u;
}
inline void OfferDataNym_InternalPB::clear_date()
{
    date_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_date();
}
inline const ::std::string& OfferDataNym_InternalPB::date() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferDataNym_InternalPB.date)
    return date_.GetNoArena();
}
inline void OfferDataNym_InternalPB::set_date(const ::std::string& value)
{
    set_has_date();
    date_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.OfferDataNym_InternalPB.date)
}
#if LANG_CXX11
inline void OfferDataNym_InternalPB::set_date(::std::string&& value)
{
    set_has_date();
    date_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.OfferDataNym_InternalPB.date)
}
#endif
inline void OfferDataNym_InternalPB::set_date(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_date();
    date_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.OfferDataNym_InternalPB.date)
}
inline void OfferDataNym_InternalPB::set_date(const char* value, size_t size)
{
    set_has_date();
    date_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.OfferDataNym_InternalPB.date)
}
inline ::std::string* OfferDataNym_InternalPB::mutable_date()
{
    set_has_date();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferDataNym_InternalPB.date)
    return date_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfferDataNym_InternalPB::release_date()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.OfferDataNym_InternalPB.date)
    clear_has_date();
    return date_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfferDataNym_InternalPB::set_allocated_date(::std::string* date)
{
    if (date != NULL) {
        set_has_date();
    } else {
        clear_has_date();
    }
    date_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.OfferDataNym_InternalPB.date)
}

// -------------------------------------------------------------------

// OfferListNym_InternalPB

// repeated .opentxs.OTDB.OfferDataNym_InternalPB offers = 1;
inline int OfferListNym_InternalPB::offers_size() const
{
    return offers_.size();
}
inline void OfferListNym_InternalPB::clear_offers() { offers_.Clear(); }
inline const ::opentxs::OTDB::OfferDataNym_InternalPB& OfferListNym_InternalPB::
    offers(int index) const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.OfferListNym_InternalPB.offers)
    return offers_.Get(index);
}
inline ::opentxs::OTDB::OfferDataNym_InternalPB* OfferListNym_InternalPB::
    mutable_offers(int index)
{
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.OfferListNym_InternalPB.offers)
    return offers_.Mutable(index);
}
inline ::opentxs::OTDB::OfferDataNym_InternalPB* OfferListNym_InternalPB::
    add_offers()
{
    // @@protoc_insertion_point(field_add:opentxs.OTDB.OfferListNym_InternalPB.offers)
    return offers_.Add();
}
inline ::google::protobuf::RepeatedPtrField<
    ::opentxs::OTDB::OfferDataNym_InternalPB>*
OfferListNym_InternalPB::mutable_offers()
{
    // @@protoc_insertion_point(field_mutable_list:opentxs.OTDB.OfferListNym_InternalPB.offers)
    return &offers_;
}
inline const ::google::protobuf::RepeatedPtrField<
    ::opentxs::OTDB::OfferDataNym_InternalPB>&
OfferListNym_InternalPB::offers() const
{
    // @@protoc_insertion_point(field_list:opentxs.OTDB.OfferListNym_InternalPB.offers)
    return offers_;
}

// -------------------------------------------------------------------

// TradeDataNym_InternalPB

// optional string gui_label = 1;
inline bool TradeDataNym_InternalPB::has_gui_label() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TradeDataNym_InternalPB::set_has_gui_label()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void TradeDataNym_InternalPB::clear_has_gui_label()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void TradeDataNym_InternalPB::clear_gui_label()
{
    gui_label_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_gui_label();
}
inline const ::std::string& TradeDataNym_InternalPB::gui_label() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeDataNym_InternalPB.gui_label)
    return gui_label_.GetNoArena();
}
inline void TradeDataNym_InternalPB::set_gui_label(const ::std::string& value)
{
    set_has_gui_label();
    gui_label_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.TradeDataNym_InternalPB.gui_label)
}
#if LANG_CXX11
inline void TradeDataNym_InternalPB::set_gui_label(::std::string&& value)
{
    set_has_gui_label();
    gui_label_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.TradeDataNym_InternalPB.gui_label)
}
#endif
inline void TradeDataNym_InternalPB::set_gui_label(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_gui_label();
    gui_label_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.TradeDataNym_InternalPB.gui_label)
}
inline void TradeDataNym_InternalPB::set_gui_label(
    const char* value,
    size_t size)
{
    set_has_gui_label();
    gui_label_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.TradeDataNym_InternalPB.gui_label)
}
inline ::std::string* TradeDataNym_InternalPB::mutable_gui_label()
{
    set_has_gui_label();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeDataNym_InternalPB.gui_label)
    return gui_label_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeDataNym_InternalPB::release_gui_label()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.TradeDataNym_InternalPB.gui_label)
    clear_has_gui_label();
    return gui_label_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeDataNym_InternalPB::set_allocated_gui_label(
    ::std::string* gui_label)
{
    if (gui_label != NULL) {
        set_has_gui_label();
    } else {
        clear_has_gui_label();
    }
    gui_label_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        gui_label);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.TradeDataNym_InternalPB.gui_label)
}

// optional string completed_count = 2;
inline bool TradeDataNym_InternalPB::has_completed_count() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TradeDataNym_InternalPB::set_has_completed_count()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void TradeDataNym_InternalPB::clear_has_completed_count()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void TradeDataNym_InternalPB::clear_completed_count()
{
    completed_count_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_completed_count();
}
inline const ::std::string& TradeDataNym_InternalPB::completed_count() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeDataNym_InternalPB.completed_count)
    return completed_count_.GetNoArena();
}
inline void TradeDataNym_InternalPB::set_completed_count(
    const ::std::string& value)
{
    set_has_completed_count();
    completed_count_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.TradeDataNym_InternalPB.completed_count)
}
#if LANG_CXX11
inline void TradeDataNym_InternalPB::set_completed_count(::std::string&& value)
{
    set_has_completed_count();
    completed_count_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.TradeDataNym_InternalPB.completed_count)
}
#endif
inline void TradeDataNym_InternalPB::set_completed_count(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_completed_count();
    completed_count_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.TradeDataNym_InternalPB.completed_count)
}
inline void TradeDataNym_InternalPB::set_completed_count(
    const char* value,
    size_t size)
{
    set_has_completed_count();
    completed_count_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.TradeDataNym_InternalPB.completed_count)
}
inline ::std::string* TradeDataNym_InternalPB::mutable_completed_count()
{
    set_has_completed_count();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeDataNym_InternalPB.completed_count)
    return completed_count_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeDataNym_InternalPB::release_completed_count()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.TradeDataNym_InternalPB.completed_count)
    clear_has_completed_count();
    return completed_count_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeDataNym_InternalPB::set_allocated_completed_count(
    ::std::string* completed_count)
{
    if (completed_count != NULL) {
        set_has_completed_count();
    } else {
        clear_has_completed_count();
    }
    completed_count_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        completed_count);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.TradeDataNym_InternalPB.completed_count)
}

// optional string date = 3;
inline bool TradeDataNym_InternalPB::has_date() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TradeDataNym_InternalPB::set_has_date()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void TradeDataNym_InternalPB::clear_has_date()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void TradeDataNym_InternalPB::clear_date()
{
    date_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_date();
}
inline const ::std::string& TradeDataNym_InternalPB::date() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeDataNym_InternalPB.date)
    return date_.GetNoArena();
}
inline void TradeDataNym_InternalPB::set_date(const ::std::string& value)
{
    set_has_date();
    date_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.TradeDataNym_InternalPB.date)
}
#if LANG_CXX11
inline void TradeDataNym_InternalPB::set_date(::std::string&& value)
{
    set_has_date();
    date_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.TradeDataNym_InternalPB.date)
}
#endif
inline void TradeDataNym_InternalPB::set_date(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_date();
    date_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.TradeDataNym_InternalPB.date)
}
inline void TradeDataNym_InternalPB::set_date(const char* value, size_t size)
{
    set_has_date();
    date_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.TradeDataNym_InternalPB.date)
}
inline ::std::string* TradeDataNym_InternalPB::mutable_date()
{
    set_has_date();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeDataNym_InternalPB.date)
    return date_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeDataNym_InternalPB::release_date()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.TradeDataNym_InternalPB.date)
    clear_has_date();
    return date_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeDataNym_InternalPB::set_allocated_date(::std::string* date)
{
    if (date != NULL) {
        set_has_date();
    } else {
        clear_has_date();
    }
    date_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.TradeDataNym_InternalPB.date)
}

// optional string price = 4;
inline bool TradeDataNym_InternalPB::has_price() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TradeDataNym_InternalPB::set_has_price()
{
    _has_bits_[0] |= 0x00000008u;
}
inline void TradeDataNym_InternalPB::clear_has_price()
{
    _has_bits_[0] &= ~0x00000008u;
}
inline void TradeDataNym_InternalPB::clear_price()
{
    price_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_price();
}
inline const ::std::string& TradeDataNym_InternalPB::price() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeDataNym_InternalPB.price)
    return price_.GetNoArena();
}
inline void TradeDataNym_InternalPB::set_price(const ::std::string& value)
{
    set_has_price();
    price_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.TradeDataNym_InternalPB.price)
}
#if LANG_CXX11
inline void TradeDataNym_InternalPB::set_price(::std::string&& value)
{
    set_has_price();
    price_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.TradeDataNym_InternalPB.price)
}
#endif
inline void TradeDataNym_InternalPB::set_price(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_price();
    price_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.TradeDataNym_InternalPB.price)
}
inline void TradeDataNym_InternalPB::set_price(const char* value, size_t size)
{
    set_has_price();
    price_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.TradeDataNym_InternalPB.price)
}
inline ::std::string* TradeDataNym_InternalPB::mutable_price()
{
    set_has_price();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeDataNym_InternalPB.price)
    return price_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeDataNym_InternalPB::release_price()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.TradeDataNym_InternalPB.price)
    clear_has_price();
    return price_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeDataNym_InternalPB::set_allocated_price(::std::string* price)
{
    if (price != NULL) {
        set_has_price();
    } else {
        clear_has_price();
    }
    price_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), price);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.TradeDataNym_InternalPB.price)
}

// optional string amount_sold = 5;
inline bool TradeDataNym_InternalPB::has_amount_sold() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TradeDataNym_InternalPB::set_has_amount_sold()
{
    _has_bits_[0] |= 0x00000010u;
}
inline void TradeDataNym_InternalPB::clear_has_amount_sold()
{
    _has_bits_[0] &= ~0x00000010u;
}
inline void TradeDataNym_InternalPB::clear_amount_sold()
{
    amount_sold_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_amount_sold();
}
inline const ::std::string& TradeDataNym_InternalPB::amount_sold() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeDataNym_InternalPB.amount_sold)
    return amount_sold_.GetNoArena();
}
inline void TradeDataNym_InternalPB::set_amount_sold(const ::std::string& value)
{
    set_has_amount_sold();
    amount_sold_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.TradeDataNym_InternalPB.amount_sold)
}
#if LANG_CXX11
inline void TradeDataNym_InternalPB::set_amount_sold(::std::string&& value)
{
    set_has_amount_sold();
    amount_sold_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.TradeDataNym_InternalPB.amount_sold)
}
#endif
inline void TradeDataNym_InternalPB::set_amount_sold(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_amount_sold();
    amount_sold_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.TradeDataNym_InternalPB.amount_sold)
}
inline void TradeDataNym_InternalPB::set_amount_sold(
    const char* value,
    size_t size)
{
    set_has_amount_sold();
    amount_sold_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.TradeDataNym_InternalPB.amount_sold)
}
inline ::std::string* TradeDataNym_InternalPB::mutable_amount_sold()
{
    set_has_amount_sold();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeDataNym_InternalPB.amount_sold)
    return amount_sold_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeDataNym_InternalPB::release_amount_sold()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.TradeDataNym_InternalPB.amount_sold)
    clear_has_amount_sold();
    return amount_sold_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeDataNym_InternalPB::set_allocated_amount_sold(
    ::std::string* amount_sold)
{
    if (amount_sold != NULL) {
        set_has_amount_sold();
    } else {
        clear_has_amount_sold();
    }
    amount_sold_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        amount_sold);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.TradeDataNym_InternalPB.amount_sold)
}

// optional string transaction_id = 6;
inline bool TradeDataNym_InternalPB::has_transaction_id() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TradeDataNym_InternalPB::set_has_transaction_id()
{
    _has_bits_[0] |= 0x00000020u;
}
inline void TradeDataNym_InternalPB::clear_has_transaction_id()
{
    _has_bits_[0] &= ~0x00000020u;
}
inline void TradeDataNym_InternalPB::clear_transaction_id()
{
    transaction_id_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_transaction_id();
}
inline const ::std::string& TradeDataNym_InternalPB::transaction_id() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeDataNym_InternalPB.transaction_id)
    return transaction_id_.GetNoArena();
}
inline void TradeDataNym_InternalPB::set_transaction_id(
    const ::std::string& value)
{
    set_has_transaction_id();
    transaction_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.TradeDataNym_InternalPB.transaction_id)
}
#if LANG_CXX11
inline void TradeDataNym_InternalPB::set_transaction_id(::std::string&& value)
{
    set_has_transaction_id();
    transaction_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.TradeDataNym_InternalPB.transaction_id)
}
#endif
inline void TradeDataNym_InternalPB::set_transaction_id(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_transaction_id();
    transaction_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.TradeDataNym_InternalPB.transaction_id)
}
inline void TradeDataNym_InternalPB::set_transaction_id(
    const char* value,
    size_t size)
{
    set_has_transaction_id();
    transaction_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.TradeDataNym_InternalPB.transaction_id)
}
inline ::std::string* TradeDataNym_InternalPB::mutable_transaction_id()
{
    set_has_transaction_id();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeDataNym_InternalPB.transaction_id)
    return transaction_id_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeDataNym_InternalPB::release_transaction_id()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.TradeDataNym_InternalPB.transaction_id)
    clear_has_transaction_id();
    return transaction_id_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeDataNym_InternalPB::set_allocated_transaction_id(
    ::std::string* transaction_id)
{
    if (transaction_id != NULL) {
        set_has_transaction_id();
    } else {
        clear_has_transaction_id();
    }
    transaction_id_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        transaction_id);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.TradeDataNym_InternalPB.transaction_id)
}

// optional string updated_id = 7;
inline bool TradeDataNym_InternalPB::has_updated_id() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TradeDataNym_InternalPB::set_has_updated_id()
{
    _has_bits_[0] |= 0x00000040u;
}
inline void TradeDataNym_InternalPB::clear_has_updated_id()
{
    _has_bits_[0] &= ~0x00000040u;
}
inline void TradeDataNym_InternalPB::clear_updated_id()
{
    updated_id_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_updated_id();
}
inline const ::std::string& TradeDataNym_InternalPB::updated_id() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeDataNym_InternalPB.updated_id)
    return updated_id_.GetNoArena();
}
inline void TradeDataNym_InternalPB::set_updated_id(const ::std::string& value)
{
    set_has_updated_id();
    updated_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.TradeDataNym_InternalPB.updated_id)
}
#if LANG_CXX11
inline void TradeDataNym_InternalPB::set_updated_id(::std::string&& value)
{
    set_has_updated_id();
    updated_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.TradeDataNym_InternalPB.updated_id)
}
#endif
inline void TradeDataNym_InternalPB::set_updated_id(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_updated_id();
    updated_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.TradeDataNym_InternalPB.updated_id)
}
inline void TradeDataNym_InternalPB::set_updated_id(
    const char* value,
    size_t size)
{
    set_has_updated_id();
    updated_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.TradeDataNym_InternalPB.updated_id)
}
inline ::std::string* TradeDataNym_InternalPB::mutable_updated_id()
{
    set_has_updated_id();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeDataNym_InternalPB.updated_id)
    return updated_id_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeDataNym_InternalPB::release_updated_id()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.TradeDataNym_InternalPB.updated_id)
    clear_has_updated_id();
    return updated_id_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeDataNym_InternalPB::set_allocated_updated_id(
    ::std::string* updated_id)
{
    if (updated_id != NULL) {
        set_has_updated_id();
    } else {
        clear_has_updated_id();
    }
    updated_id_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        updated_id);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.TradeDataNym_InternalPB.updated_id)
}

// optional string offer_price = 8;
inline bool TradeDataNym_InternalPB::has_offer_price() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TradeDataNym_InternalPB::set_has_offer_price()
{
    _has_bits_[0] |= 0x00000080u;
}
inline void TradeDataNym_InternalPB::clear_has_offer_price()
{
    _has_bits_[0] &= ~0x00000080u;
}
inline void TradeDataNym_InternalPB::clear_offer_price()
{
    offer_price_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_offer_price();
}
inline const ::std::string& TradeDataNym_InternalPB::offer_price() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeDataNym_InternalPB.offer_price)
    return offer_price_.GetNoArena();
}
inline void TradeDataNym_InternalPB::set_offer_price(const ::std::string& value)
{
    set_has_offer_price();
    offer_price_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.TradeDataNym_InternalPB.offer_price)
}
#if LANG_CXX11
inline void TradeDataNym_InternalPB::set_offer_price(::std::string&& value)
{
    set_has_offer_price();
    offer_price_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.TradeDataNym_InternalPB.offer_price)
}
#endif
inline void TradeDataNym_InternalPB::set_offer_price(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_offer_price();
    offer_price_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.TradeDataNym_InternalPB.offer_price)
}
inline void TradeDataNym_InternalPB::set_offer_price(
    const char* value,
    size_t size)
{
    set_has_offer_price();
    offer_price_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.TradeDataNym_InternalPB.offer_price)
}
inline ::std::string* TradeDataNym_InternalPB::mutable_offer_price()
{
    set_has_offer_price();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeDataNym_InternalPB.offer_price)
    return offer_price_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeDataNym_InternalPB::release_offer_price()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.TradeDataNym_InternalPB.offer_price)
    clear_has_offer_price();
    return offer_price_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeDataNym_InternalPB::set_allocated_offer_price(
    ::std::string* offer_price)
{
    if (offer_price != NULL) {
        set_has_offer_price();
    } else {
        clear_has_offer_price();
    }
    offer_price_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        offer_price);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.TradeDataNym_InternalPB.offer_price)
}

// optional string finished_so_far = 9;
inline bool TradeDataNym_InternalPB::has_finished_so_far() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TradeDataNym_InternalPB::set_has_finished_so_far()
{
    _has_bits_[0] |= 0x00000100u;
}
inline void TradeDataNym_InternalPB::clear_has_finished_so_far()
{
    _has_bits_[0] &= ~0x00000100u;
}
inline void TradeDataNym_InternalPB::clear_finished_so_far()
{
    finished_so_far_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_finished_so_far();
}
inline const ::std::string& TradeDataNym_InternalPB::finished_so_far() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeDataNym_InternalPB.finished_so_far)
    return finished_so_far_.GetNoArena();
}
inline void TradeDataNym_InternalPB::set_finished_so_far(
    const ::std::string& value)
{
    set_has_finished_so_far();
    finished_so_far_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.TradeDataNym_InternalPB.finished_so_far)
}
#if LANG_CXX11
inline void TradeDataNym_InternalPB::set_finished_so_far(::std::string&& value)
{
    set_has_finished_so_far();
    finished_so_far_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.TradeDataNym_InternalPB.finished_so_far)
}
#endif
inline void TradeDataNym_InternalPB::set_finished_so_far(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_finished_so_far();
    finished_so_far_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.TradeDataNym_InternalPB.finished_so_far)
}
inline void TradeDataNym_InternalPB::set_finished_so_far(
    const char* value,
    size_t size)
{
    set_has_finished_so_far();
    finished_so_far_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.TradeDataNym_InternalPB.finished_so_far)
}
inline ::std::string* TradeDataNym_InternalPB::mutable_finished_so_far()
{
    set_has_finished_so_far();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeDataNym_InternalPB.finished_so_far)
    return finished_so_far_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeDataNym_InternalPB::release_finished_so_far()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.TradeDataNym_InternalPB.finished_so_far)
    clear_has_finished_so_far();
    return finished_so_far_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeDataNym_InternalPB::set_allocated_finished_so_far(
    ::std::string* finished_so_far)
{
    if (finished_so_far != NULL) {
        set_has_finished_so_far();
    } else {
        clear_has_finished_so_far();
    }
    finished_so_far_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        finished_so_far);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.TradeDataNym_InternalPB.finished_so_far)
}

// optional string instrument_definition_id = 10;
inline bool TradeDataNym_InternalPB::has_instrument_definition_id() const
{
    return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TradeDataNym_InternalPB::set_has_instrument_definition_id()
{
    _has_bits_[0] |= 0x00000200u;
}
inline void TradeDataNym_InternalPB::clear_has_instrument_definition_id()
{
    _has_bits_[0] &= ~0x00000200u;
}
inline void TradeDataNym_InternalPB::clear_instrument_definition_id()
{
    instrument_definition_id_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_instrument_definition_id();
}
inline const ::std::string& TradeDataNym_InternalPB::instrument_definition_id()
    const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeDataNym_InternalPB.instrument_definition_id)
    return instrument_definition_id_.GetNoArena();
}
inline void TradeDataNym_InternalPB::set_instrument_definition_id(
    const ::std::string& value)
{
    set_has_instrument_definition_id();
    instrument_definition_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.TradeDataNym_InternalPB.instrument_definition_id)
}
#if LANG_CXX11
inline void TradeDataNym_InternalPB::set_instrument_definition_id(
    ::std::string&& value)
{
    set_has_instrument_definition_id();
    instrument_definition_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.TradeDataNym_InternalPB.instrument_definition_id)
}
#endif
inline void TradeDataNym_InternalPB::set_instrument_definition_id(
    const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_instrument_definition_id();
    instrument_definition_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.TradeDataNym_InternalPB.instrument_definition_id)
}
inline void TradeDataNym_InternalPB::set_instrument_definition_id(
    const char* value,
    size_t size)
{
    set_has_instrument_definition_id();
    instrument_definition_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.TradeDataNym_InternalPB.instrument_definition_id)
}
inline ::std::string* TradeDataNym_InternalPB::
    mutable_instrument_definition_id()
{
    set_has_instrument_definition_id();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeDataNym_InternalPB.instrument_definition_id)
    return instrument_definition_id_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeDataNym_InternalPB::
    release_instrument_definition_id()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.TradeDataNym_InternalPB.instrument_definition_id)
    clear_has_instrument_definition_id();
    return instrument_definition_id_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeDataNym_InternalPB::set_allocated_instrument_definition_id(
    ::std::string* instrument_definition_id)
{
    if (instrument_definition_id != NULL) {
        set_has_instrument_definition_id();
    } else {
        clear_has_instrument_definition_id();
    }
    instrument_definition_id_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        instrument_definition_id);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.TradeDataNym_InternalPB.instrument_definition_id)
}

// optional string currency_id = 11;
inline bool TradeDataNym_InternalPB::has_currency_id() const
{
    return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TradeDataNym_InternalPB::set_has_currency_id()
{
    _has_bits_[0] |= 0x00000400u;
}
inline void TradeDataNym_InternalPB::clear_has_currency_id()
{
    _has_bits_[0] &= ~0x00000400u;
}
inline void TradeDataNym_InternalPB::clear_currency_id()
{
    currency_id_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_currency_id();
}
inline const ::std::string& TradeDataNym_InternalPB::currency_id() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeDataNym_InternalPB.currency_id)
    return currency_id_.GetNoArena();
}
inline void TradeDataNym_InternalPB::set_currency_id(const ::std::string& value)
{
    set_has_currency_id();
    currency_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.TradeDataNym_InternalPB.currency_id)
}
#if LANG_CXX11
inline void TradeDataNym_InternalPB::set_currency_id(::std::string&& value)
{
    set_has_currency_id();
    currency_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.TradeDataNym_InternalPB.currency_id)
}
#endif
inline void TradeDataNym_InternalPB::set_currency_id(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_currency_id();
    currency_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.TradeDataNym_InternalPB.currency_id)
}
inline void TradeDataNym_InternalPB::set_currency_id(
    const char* value,
    size_t size)
{
    set_has_currency_id();
    currency_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.TradeDataNym_InternalPB.currency_id)
}
inline ::std::string* TradeDataNym_InternalPB::mutable_currency_id()
{
    set_has_currency_id();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeDataNym_InternalPB.currency_id)
    return currency_id_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeDataNym_InternalPB::release_currency_id()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.TradeDataNym_InternalPB.currency_id)
    clear_has_currency_id();
    return currency_id_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeDataNym_InternalPB::set_allocated_currency_id(
    ::std::string* currency_id)
{
    if (currency_id != NULL) {
        set_has_currency_id();
    } else {
        clear_has_currency_id();
    }
    currency_id_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        currency_id);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.TradeDataNym_InternalPB.currency_id)
}

// optional string currency_paid = 12;
inline bool TradeDataNym_InternalPB::has_currency_paid() const
{
    return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TradeDataNym_InternalPB::set_has_currency_paid()
{
    _has_bits_[0] |= 0x00000800u;
}
inline void TradeDataNym_InternalPB::clear_has_currency_paid()
{
    _has_bits_[0] &= ~0x00000800u;
}
inline void TradeDataNym_InternalPB::clear_currency_paid()
{
    currency_paid_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_currency_paid();
}
inline const ::std::string& TradeDataNym_InternalPB::currency_paid() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeDataNym_InternalPB.currency_paid)
    return currency_paid_.GetNoArena();
}
inline void TradeDataNym_InternalPB::set_currency_paid(
    const ::std::string& value)
{
    set_has_currency_paid();
    currency_paid_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.TradeDataNym_InternalPB.currency_paid)
}
#if LANG_CXX11
inline void TradeDataNym_InternalPB::set_currency_paid(::std::string&& value)
{
    set_has_currency_paid();
    currency_paid_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.TradeDataNym_InternalPB.currency_paid)
}
#endif
inline void TradeDataNym_InternalPB::set_currency_paid(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_currency_paid();
    currency_paid_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.TradeDataNym_InternalPB.currency_paid)
}
inline void TradeDataNym_InternalPB::set_currency_paid(
    const char* value,
    size_t size)
{
    set_has_currency_paid();
    currency_paid_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.TradeDataNym_InternalPB.currency_paid)
}
inline ::std::string* TradeDataNym_InternalPB::mutable_currency_paid()
{
    set_has_currency_paid();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeDataNym_InternalPB.currency_paid)
    return currency_paid_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeDataNym_InternalPB::release_currency_paid()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.TradeDataNym_InternalPB.currency_paid)
    clear_has_currency_paid();
    return currency_paid_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeDataNym_InternalPB::set_allocated_currency_paid(
    ::std::string* currency_paid)
{
    if (currency_paid != NULL) {
        set_has_currency_paid();
    } else {
        clear_has_currency_paid();
    }
    currency_paid_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        currency_paid);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.TradeDataNym_InternalPB.currency_paid)
}

// optional string asset_acct_id = 13;
inline bool TradeDataNym_InternalPB::has_asset_acct_id() const
{
    return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TradeDataNym_InternalPB::set_has_asset_acct_id()
{
    _has_bits_[0] |= 0x00001000u;
}
inline void TradeDataNym_InternalPB::clear_has_asset_acct_id()
{
    _has_bits_[0] &= ~0x00001000u;
}
inline void TradeDataNym_InternalPB::clear_asset_acct_id()
{
    asset_acct_id_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_asset_acct_id();
}
inline const ::std::string& TradeDataNym_InternalPB::asset_acct_id() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeDataNym_InternalPB.asset_acct_id)
    return asset_acct_id_.GetNoArena();
}
inline void TradeDataNym_InternalPB::set_asset_acct_id(
    const ::std::string& value)
{
    set_has_asset_acct_id();
    asset_acct_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.TradeDataNym_InternalPB.asset_acct_id)
}
#if LANG_CXX11
inline void TradeDataNym_InternalPB::set_asset_acct_id(::std::string&& value)
{
    set_has_asset_acct_id();
    asset_acct_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.TradeDataNym_InternalPB.asset_acct_id)
}
#endif
inline void TradeDataNym_InternalPB::set_asset_acct_id(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_asset_acct_id();
    asset_acct_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.TradeDataNym_InternalPB.asset_acct_id)
}
inline void TradeDataNym_InternalPB::set_asset_acct_id(
    const char* value,
    size_t size)
{
    set_has_asset_acct_id();
    asset_acct_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.TradeDataNym_InternalPB.asset_acct_id)
}
inline ::std::string* TradeDataNym_InternalPB::mutable_asset_acct_id()
{
    set_has_asset_acct_id();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeDataNym_InternalPB.asset_acct_id)
    return asset_acct_id_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeDataNym_InternalPB::release_asset_acct_id()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.TradeDataNym_InternalPB.asset_acct_id)
    clear_has_asset_acct_id();
    return asset_acct_id_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeDataNym_InternalPB::set_allocated_asset_acct_id(
    ::std::string* asset_acct_id)
{
    if (asset_acct_id != NULL) {
        set_has_asset_acct_id();
    } else {
        clear_has_asset_acct_id();
    }
    asset_acct_id_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        asset_acct_id);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.TradeDataNym_InternalPB.asset_acct_id)
}

// optional string currency_acct_id = 14;
inline bool TradeDataNym_InternalPB::has_currency_acct_id() const
{
    return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TradeDataNym_InternalPB::set_has_currency_acct_id()
{
    _has_bits_[0] |= 0x00002000u;
}
inline void TradeDataNym_InternalPB::clear_has_currency_acct_id()
{
    _has_bits_[0] &= ~0x00002000u;
}
inline void TradeDataNym_InternalPB::clear_currency_acct_id()
{
    currency_acct_id_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_currency_acct_id();
}
inline const ::std::string& TradeDataNym_InternalPB::currency_acct_id() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeDataNym_InternalPB.currency_acct_id)
    return currency_acct_id_.GetNoArena();
}
inline void TradeDataNym_InternalPB::set_currency_acct_id(
    const ::std::string& value)
{
    set_has_currency_acct_id();
    currency_acct_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.TradeDataNym_InternalPB.currency_acct_id)
}
#if LANG_CXX11
inline void TradeDataNym_InternalPB::set_currency_acct_id(::std::string&& value)
{
    set_has_currency_acct_id();
    currency_acct_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.TradeDataNym_InternalPB.currency_acct_id)
}
#endif
inline void TradeDataNym_InternalPB::set_currency_acct_id(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_currency_acct_id();
    currency_acct_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.TradeDataNym_InternalPB.currency_acct_id)
}
inline void TradeDataNym_InternalPB::set_currency_acct_id(
    const char* value,
    size_t size)
{
    set_has_currency_acct_id();
    currency_acct_id_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.TradeDataNym_InternalPB.currency_acct_id)
}
inline ::std::string* TradeDataNym_InternalPB::mutable_currency_acct_id()
{
    set_has_currency_acct_id();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeDataNym_InternalPB.currency_acct_id)
    return currency_acct_id_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeDataNym_InternalPB::release_currency_acct_id()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.TradeDataNym_InternalPB.currency_acct_id)
    clear_has_currency_acct_id();
    return currency_acct_id_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeDataNym_InternalPB::set_allocated_currency_acct_id(
    ::std::string* currency_acct_id)
{
    if (currency_acct_id != NULL) {
        set_has_currency_acct_id();
    } else {
        clear_has_currency_acct_id();
    }
    currency_acct_id_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        currency_acct_id);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.TradeDataNym_InternalPB.currency_acct_id)
}

// optional string scale = 15;
inline bool TradeDataNym_InternalPB::has_scale() const
{
    return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TradeDataNym_InternalPB::set_has_scale()
{
    _has_bits_[0] |= 0x00004000u;
}
inline void TradeDataNym_InternalPB::clear_has_scale()
{
    _has_bits_[0] &= ~0x00004000u;
}
inline void TradeDataNym_InternalPB::clear_scale()
{
    scale_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_scale();
}
inline const ::std::string& TradeDataNym_InternalPB::scale() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeDataNym_InternalPB.scale)
    return scale_.GetNoArena();
}
inline void TradeDataNym_InternalPB::set_scale(const ::std::string& value)
{
    set_has_scale();
    scale_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.TradeDataNym_InternalPB.scale)
}
#if LANG_CXX11
inline void TradeDataNym_InternalPB::set_scale(::std::string&& value)
{
    set_has_scale();
    scale_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.TradeDataNym_InternalPB.scale)
}
#endif
inline void TradeDataNym_InternalPB::set_scale(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_scale();
    scale_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.TradeDataNym_InternalPB.scale)
}
inline void TradeDataNym_InternalPB::set_scale(const char* value, size_t size)
{
    set_has_scale();
    scale_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.TradeDataNym_InternalPB.scale)
}
inline ::std::string* TradeDataNym_InternalPB::mutable_scale()
{
    set_has_scale();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeDataNym_InternalPB.scale)
    return scale_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeDataNym_InternalPB::release_scale()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.TradeDataNym_InternalPB.scale)
    clear_has_scale();
    return scale_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeDataNym_InternalPB::set_allocated_scale(::std::string* scale)
{
    if (scale != NULL) {
        set_has_scale();
    } else {
        clear_has_scale();
    }
    scale_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), scale);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.TradeDataNym_InternalPB.scale)
}

// optional bool is_bid = 16;
inline bool TradeDataNym_InternalPB::has_is_bid() const
{
    return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TradeDataNym_InternalPB::set_has_is_bid()
{
    _has_bits_[0] |= 0x00040000u;
}
inline void TradeDataNym_InternalPB::clear_has_is_bid()
{
    _has_bits_[0] &= ~0x00040000u;
}
inline void TradeDataNym_InternalPB::clear_is_bid()
{
    is_bid_ = false;
    clear_has_is_bid();
}
inline bool TradeDataNym_InternalPB::is_bid() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeDataNym_InternalPB.is_bid)
    return is_bid_;
}
inline void TradeDataNym_InternalPB::set_is_bid(bool value)
{
    set_has_is_bid();
    is_bid_ = value;
    // @@protoc_insertion_point(field_set:opentxs.OTDB.TradeDataNym_InternalPB.is_bid)
}

// optional string asset_receipt = 17;
inline bool TradeDataNym_InternalPB::has_asset_receipt() const
{
    return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TradeDataNym_InternalPB::set_has_asset_receipt()
{
    _has_bits_[0] |= 0x00008000u;
}
inline void TradeDataNym_InternalPB::clear_has_asset_receipt()
{
    _has_bits_[0] &= ~0x00008000u;
}
inline void TradeDataNym_InternalPB::clear_asset_receipt()
{
    asset_receipt_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_asset_receipt();
}
inline const ::std::string& TradeDataNym_InternalPB::asset_receipt() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeDataNym_InternalPB.asset_receipt)
    return asset_receipt_.GetNoArena();
}
inline void TradeDataNym_InternalPB::set_asset_receipt(
    const ::std::string& value)
{
    set_has_asset_receipt();
    asset_receipt_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.TradeDataNym_InternalPB.asset_receipt)
}
#if LANG_CXX11
inline void TradeDataNym_InternalPB::set_asset_receipt(::std::string&& value)
{
    set_has_asset_receipt();
    asset_receipt_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.TradeDataNym_InternalPB.asset_receipt)
}
#endif
inline void TradeDataNym_InternalPB::set_asset_receipt(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_asset_receipt();
    asset_receipt_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.TradeDataNym_InternalPB.asset_receipt)
}
inline void TradeDataNym_InternalPB::set_asset_receipt(
    const char* value,
    size_t size)
{
    set_has_asset_receipt();
    asset_receipt_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.TradeDataNym_InternalPB.asset_receipt)
}
inline ::std::string* TradeDataNym_InternalPB::mutable_asset_receipt()
{
    set_has_asset_receipt();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeDataNym_InternalPB.asset_receipt)
    return asset_receipt_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeDataNym_InternalPB::release_asset_receipt()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.TradeDataNym_InternalPB.asset_receipt)
    clear_has_asset_receipt();
    return asset_receipt_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeDataNym_InternalPB::set_allocated_asset_receipt(
    ::std::string* asset_receipt)
{
    if (asset_receipt != NULL) {
        set_has_asset_receipt();
    } else {
        clear_has_asset_receipt();
    }
    asset_receipt_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        asset_receipt);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.TradeDataNym_InternalPB.asset_receipt)
}

// optional string currency_receipt = 18;
inline bool TradeDataNym_InternalPB::has_currency_receipt() const
{
    return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TradeDataNym_InternalPB::set_has_currency_receipt()
{
    _has_bits_[0] |= 0x00010000u;
}
inline void TradeDataNym_InternalPB::clear_has_currency_receipt()
{
    _has_bits_[0] &= ~0x00010000u;
}
inline void TradeDataNym_InternalPB::clear_currency_receipt()
{
    currency_receipt_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_currency_receipt();
}
inline const ::std::string& TradeDataNym_InternalPB::currency_receipt() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeDataNym_InternalPB.currency_receipt)
    return currency_receipt_.GetNoArena();
}
inline void TradeDataNym_InternalPB::set_currency_receipt(
    const ::std::string& value)
{
    set_has_currency_receipt();
    currency_receipt_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.TradeDataNym_InternalPB.currency_receipt)
}
#if LANG_CXX11
inline void TradeDataNym_InternalPB::set_currency_receipt(::std::string&& value)
{
    set_has_currency_receipt();
    currency_receipt_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.TradeDataNym_InternalPB.currency_receipt)
}
#endif
inline void TradeDataNym_InternalPB::set_currency_receipt(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_currency_receipt();
    currency_receipt_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.TradeDataNym_InternalPB.currency_receipt)
}
inline void TradeDataNym_InternalPB::set_currency_receipt(
    const char* value,
    size_t size)
{
    set_has_currency_receipt();
    currency_receipt_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.TradeDataNym_InternalPB.currency_receipt)
}
inline ::std::string* TradeDataNym_InternalPB::mutable_currency_receipt()
{
    set_has_currency_receipt();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeDataNym_InternalPB.currency_receipt)
    return currency_receipt_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeDataNym_InternalPB::release_currency_receipt()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.TradeDataNym_InternalPB.currency_receipt)
    clear_has_currency_receipt();
    return currency_receipt_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeDataNym_InternalPB::set_allocated_currency_receipt(
    ::std::string* currency_receipt)
{
    if (currency_receipt != NULL) {
        set_has_currency_receipt();
    } else {
        clear_has_currency_receipt();
    }
    currency_receipt_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        currency_receipt);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.TradeDataNym_InternalPB.currency_receipt)
}

// optional string final_receipt = 19;
inline bool TradeDataNym_InternalPB::has_final_receipt() const
{
    return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TradeDataNym_InternalPB::set_has_final_receipt()
{
    _has_bits_[0] |= 0x00020000u;
}
inline void TradeDataNym_InternalPB::clear_has_final_receipt()
{
    _has_bits_[0] &= ~0x00020000u;
}
inline void TradeDataNym_InternalPB::clear_final_receipt()
{
    final_receipt_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_final_receipt();
}
inline const ::std::string& TradeDataNym_InternalPB::final_receipt() const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeDataNym_InternalPB.final_receipt)
    return final_receipt_.GetNoArena();
}
inline void TradeDataNym_InternalPB::set_final_receipt(
    const ::std::string& value)
{
    set_has_final_receipt();
    final_receipt_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:opentxs.OTDB.TradeDataNym_InternalPB.final_receipt)
}
#if LANG_CXX11
inline void TradeDataNym_InternalPB::set_final_receipt(::std::string&& value)
{
    set_has_final_receipt();
    final_receipt_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.TradeDataNym_InternalPB.final_receipt)
}
#endif
inline void TradeDataNym_InternalPB::set_final_receipt(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_final_receipt();
    final_receipt_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:opentxs.OTDB.TradeDataNym_InternalPB.final_receipt)
}
inline void TradeDataNym_InternalPB::set_final_receipt(
    const char* value,
    size_t size)
{
    set_has_final_receipt();
    final_receipt_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.TradeDataNym_InternalPB.final_receipt)
}
inline ::std::string* TradeDataNym_InternalPB::mutable_final_receipt()
{
    set_has_final_receipt();
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeDataNym_InternalPB.final_receipt)
    return final_receipt_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeDataNym_InternalPB::release_final_receipt()
{
    // @@protoc_insertion_point(field_release:opentxs.OTDB.TradeDataNym_InternalPB.final_receipt)
    clear_has_final_receipt();
    return final_receipt_.ReleaseNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeDataNym_InternalPB::set_allocated_final_receipt(
    ::std::string* final_receipt)
{
    if (final_receipt != NULL) {
        set_has_final_receipt();
    } else {
        clear_has_final_receipt();
    }
    final_receipt_.SetAllocatedNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        final_receipt);
    // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.TradeDataNym_InternalPB.final_receipt)
}

// -------------------------------------------------------------------

// TradeListNym_InternalPB

// repeated .opentxs.OTDB.TradeDataNym_InternalPB trades = 1;
inline int TradeListNym_InternalPB::trades_size() const
{
    return trades_.size();
}
inline void TradeListNym_InternalPB::clear_trades() { trades_.Clear(); }
inline const ::opentxs::OTDB::TradeDataNym_InternalPB& TradeListNym_InternalPB::
    trades(int index) const
{
    // @@protoc_insertion_point(field_get:opentxs.OTDB.TradeListNym_InternalPB.trades)
    return trades_.Get(index);
}
inline ::opentxs::OTDB::TradeDataNym_InternalPB* TradeListNym_InternalPB::
    mutable_trades(int index)
{
    // @@protoc_insertion_point(field_mutable:opentxs.OTDB.TradeListNym_InternalPB.trades)
    return trades_.Mutable(index);
}
inline ::opentxs::OTDB::TradeDataNym_InternalPB* TradeListNym_InternalPB::
    add_trades()
{
    // @@protoc_insertion_point(field_add:opentxs.OTDB.TradeListNym_InternalPB.trades)
    return trades_.Add();
}
inline ::google::protobuf::RepeatedPtrField<
    ::opentxs::OTDB::TradeDataNym_InternalPB>*
TradeListNym_InternalPB::mutable_trades()
{
    // @@protoc_insertion_point(field_mutable_list:opentxs.OTDB.TradeListNym_InternalPB.trades)
    return &trades_;
}
inline const ::google::protobuf::RepeatedPtrField<
    ::opentxs::OTDB::TradeDataNym_InternalPB>&
TradeListNym_InternalPB::trades() const
{
    // @@protoc_insertion_point(field_list:opentxs.OTDB.TradeListNym_InternalPB.trades)
    return trades_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

}  // namespace OTDB
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)
