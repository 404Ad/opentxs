// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Moneychanger.proto

#ifndef PROTOBUF_Moneychanger_2eproto__INCLUDED
#define PROTOBUF_Moneychanger_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "Generics.pb.h"
#include "Bitcoin.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_Moneychanger_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsServerInfo_InternalPBImpl();
void InitDefaultsServerInfo_InternalPB();
void InitDefaultsContactNym_InternalPBImpl();
void InitDefaultsContactNym_InternalPB();
void InitDefaultsContactAcct_InternalPBImpl();
void InitDefaultsContactAcct_InternalPB();
void InitDefaultsContact_InternalPBImpl();
void InitDefaultsContact_InternalPB();
void InitDefaultsAddressBook_InternalPBImpl();
void InitDefaultsAddressBook_InternalPB();
void InitDefaultsWalletData_InternalPBImpl();
void InitDefaultsWalletData_InternalPB();
inline void InitDefaults() {
  InitDefaultsServerInfo_InternalPB();
  InitDefaultsContactNym_InternalPB();
  InitDefaultsContactAcct_InternalPB();
  InitDefaultsContact_InternalPB();
  InitDefaultsAddressBook_InternalPB();
  InitDefaultsWalletData_InternalPB();
}
}  // namespace protobuf_Moneychanger_2eproto
namespace opentxs {
namespace OTDB {
class AddressBook_InternalPB;
class AddressBook_InternalPBDefaultTypeInternal;
extern AddressBook_InternalPBDefaultTypeInternal _AddressBook_InternalPB_default_instance_;
class ContactAcct_InternalPB;
class ContactAcct_InternalPBDefaultTypeInternal;
extern ContactAcct_InternalPBDefaultTypeInternal _ContactAcct_InternalPB_default_instance_;
class ContactNym_InternalPB;
class ContactNym_InternalPBDefaultTypeInternal;
extern ContactNym_InternalPBDefaultTypeInternal _ContactNym_InternalPB_default_instance_;
class Contact_InternalPB;
class Contact_InternalPBDefaultTypeInternal;
extern Contact_InternalPBDefaultTypeInternal _Contact_InternalPB_default_instance_;
class ServerInfo_InternalPB;
class ServerInfo_InternalPBDefaultTypeInternal;
extern ServerInfo_InternalPBDefaultTypeInternal _ServerInfo_InternalPB_default_instance_;
class WalletData_InternalPB;
class WalletData_InternalPBDefaultTypeInternal;
extern WalletData_InternalPBDefaultTypeInternal _WalletData_InternalPB_default_instance_;
}  // namespace OTDB
}  // namespace opentxs
namespace opentxs {
namespace OTDB {

// ===================================================================

class ServerInfo_InternalPB : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.OTDB.ServerInfo_InternalPB) */ {
 public:
  ServerInfo_InternalPB();
  virtual ~ServerInfo_InternalPB();

  ServerInfo_InternalPB(const ServerInfo_InternalPB& from);

  inline ServerInfo_InternalPB& operator=(const ServerInfo_InternalPB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfo_InternalPB(ServerInfo_InternalPB&& from) noexcept
    : ServerInfo_InternalPB() {
    *this = ::std::move(from);
  }

  inline ServerInfo_InternalPB& operator=(ServerInfo_InternalPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServerInfo_InternalPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfo_InternalPB* internal_default_instance() {
    return reinterpret_cast<const ServerInfo_InternalPB*>(
               &_ServerInfo_InternalPB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ServerInfo_InternalPB* other);
  friend void swap(ServerInfo_InternalPB& a, ServerInfo_InternalPB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfo_InternalPB* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerInfo_InternalPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ServerInfo_InternalPB& from);
  void MergeFrom(const ServerInfo_InternalPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerInfo_InternalPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string server_type = 1;
  bool has_server_type() const;
  void clear_server_type();
  static const int kServerTypeFieldNumber = 1;
  const ::std::string& server_type() const;
  void set_server_type(const ::std::string& value);
  #if LANG_CXX11
  void set_server_type(::std::string&& value);
  #endif
  void set_server_type(const char* value);
  void set_server_type(const char* value, size_t size);
  ::std::string* mutable_server_type();
  ::std::string* release_server_type();
  void set_allocated_server_type(::std::string* server_type);

  // optional string notary_id = 2;
  bool has_notary_id() const;
  void clear_notary_id();
  static const int kNotaryIdFieldNumber = 2;
  const ::std::string& notary_id() const;
  void set_notary_id(const ::std::string& value);
  #if LANG_CXX11
  void set_notary_id(::std::string&& value);
  #endif
  void set_notary_id(const char* value);
  void set_notary_id(const char* value, size_t size);
  ::std::string* mutable_notary_id();
  ::std::string* release_notary_id();
  void set_allocated_notary_id(::std::string* notary_id);

  // @@protoc_insertion_point(class_scope:opentxs.OTDB.ServerInfo_InternalPB)
 private:
  void set_has_server_type();
  void clear_has_server_type();
  void set_has_notary_id();
  void clear_has_notary_id();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr server_type_;
  ::google::protobuf::internal::ArenaStringPtr notary_id_;
  friend struct ::protobuf_Moneychanger_2eproto::TableStruct;
  friend void ::protobuf_Moneychanger_2eproto::InitDefaultsServerInfo_InternalPBImpl();
};
// -------------------------------------------------------------------

class ContactNym_InternalPB : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.OTDB.ContactNym_InternalPB) */ {
 public:
  ContactNym_InternalPB();
  virtual ~ContactNym_InternalPB();

  ContactNym_InternalPB(const ContactNym_InternalPB& from);

  inline ContactNym_InternalPB& operator=(const ContactNym_InternalPB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContactNym_InternalPB(ContactNym_InternalPB&& from) noexcept
    : ContactNym_InternalPB() {
    *this = ::std::move(from);
  }

  inline ContactNym_InternalPB& operator=(ContactNym_InternalPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ContactNym_InternalPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContactNym_InternalPB* internal_default_instance() {
    return reinterpret_cast<const ContactNym_InternalPB*>(
               &_ContactNym_InternalPB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ContactNym_InternalPB* other);
  friend void swap(ContactNym_InternalPB& a, ContactNym_InternalPB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContactNym_InternalPB* New() const PROTOBUF_FINAL { return New(NULL); }

  ContactNym_InternalPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ContactNym_InternalPB& from);
  void MergeFrom(const ContactNym_InternalPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContactNym_InternalPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .opentxs.OTDB.ServerInfo_InternalPB servers = 6;
  int servers_size() const;
  void clear_servers();
  static const int kServersFieldNumber = 6;
  const ::opentxs::OTDB::ServerInfo_InternalPB& servers(int index) const;
  ::opentxs::OTDB::ServerInfo_InternalPB* mutable_servers(int index);
  ::opentxs::OTDB::ServerInfo_InternalPB* add_servers();
  ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ServerInfo_InternalPB >*
      mutable_servers();
  const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ServerInfo_InternalPB >&
      servers() const;

  // optional string gui_label = 1;
  bool has_gui_label() const;
  void clear_gui_label();
  static const int kGuiLabelFieldNumber = 1;
  const ::std::string& gui_label() const;
  void set_gui_label(const ::std::string& value);
  #if LANG_CXX11
  void set_gui_label(::std::string&& value);
  #endif
  void set_gui_label(const char* value);
  void set_gui_label(const char* value, size_t size);
  ::std::string* mutable_gui_label();
  ::std::string* release_gui_label();
  void set_allocated_gui_label(::std::string* gui_label);

  // optional string nym_type = 2;
  bool has_nym_type() const;
  void clear_nym_type();
  static const int kNymTypeFieldNumber = 2;
  const ::std::string& nym_type() const;
  void set_nym_type(const ::std::string& value);
  #if LANG_CXX11
  void set_nym_type(::std::string&& value);
  #endif
  void set_nym_type(const char* value);
  void set_nym_type(const char* value, size_t size);
  ::std::string* mutable_nym_type();
  ::std::string* release_nym_type();
  void set_allocated_nym_type(::std::string* nym_type);

  // optional string nym_id = 3;
  bool has_nym_id() const;
  void clear_nym_id();
  static const int kNymIdFieldNumber = 3;
  const ::std::string& nym_id() const;
  void set_nym_id(const ::std::string& value);
  #if LANG_CXX11
  void set_nym_id(::std::string&& value);
  #endif
  void set_nym_id(const char* value);
  void set_nym_id(const char* value, size_t size);
  ::std::string* mutable_nym_id();
  ::std::string* release_nym_id();
  void set_allocated_nym_id(::std::string* nym_id);

  // optional string public_key = 4;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 4;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // optional string memo = 5;
  bool has_memo() const;
  void clear_memo();
  static const int kMemoFieldNumber = 5;
  const ::std::string& memo() const;
  void set_memo(const ::std::string& value);
  #if LANG_CXX11
  void set_memo(::std::string&& value);
  #endif
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  ::std::string* mutable_memo();
  ::std::string* release_memo();
  void set_allocated_memo(::std::string* memo);

  // @@protoc_insertion_point(class_scope:opentxs.OTDB.ContactNym_InternalPB)
 private:
  void set_has_gui_label();
  void clear_has_gui_label();
  void set_has_nym_type();
  void clear_has_nym_type();
  void set_has_nym_id();
  void clear_has_nym_id();
  void set_has_public_key();
  void clear_has_public_key();
  void set_has_memo();
  void clear_has_memo();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ServerInfo_InternalPB > servers_;
  ::google::protobuf::internal::ArenaStringPtr gui_label_;
  ::google::protobuf::internal::ArenaStringPtr nym_type_;
  ::google::protobuf::internal::ArenaStringPtr nym_id_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::internal::ArenaStringPtr memo_;
  friend struct ::protobuf_Moneychanger_2eproto::TableStruct;
  friend void ::protobuf_Moneychanger_2eproto::InitDefaultsContactNym_InternalPBImpl();
};
// -------------------------------------------------------------------

class ContactAcct_InternalPB : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.OTDB.ContactAcct_InternalPB) */ {
 public:
  ContactAcct_InternalPB();
  virtual ~ContactAcct_InternalPB();

  ContactAcct_InternalPB(const ContactAcct_InternalPB& from);

  inline ContactAcct_InternalPB& operator=(const ContactAcct_InternalPB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContactAcct_InternalPB(ContactAcct_InternalPB&& from) noexcept
    : ContactAcct_InternalPB() {
    *this = ::std::move(from);
  }

  inline ContactAcct_InternalPB& operator=(ContactAcct_InternalPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ContactAcct_InternalPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContactAcct_InternalPB* internal_default_instance() {
    return reinterpret_cast<const ContactAcct_InternalPB*>(
               &_ContactAcct_InternalPB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ContactAcct_InternalPB* other);
  friend void swap(ContactAcct_InternalPB& a, ContactAcct_InternalPB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContactAcct_InternalPB* New() const PROTOBUF_FINAL { return New(NULL); }

  ContactAcct_InternalPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ContactAcct_InternalPB& from);
  void MergeFrom(const ContactAcct_InternalPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContactAcct_InternalPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string gui_label = 1;
  bool has_gui_label() const;
  void clear_gui_label();
  static const int kGuiLabelFieldNumber = 1;
  const ::std::string& gui_label() const;
  void set_gui_label(const ::std::string& value);
  #if LANG_CXX11
  void set_gui_label(::std::string&& value);
  #endif
  void set_gui_label(const char* value);
  void set_gui_label(const char* value, size_t size);
  ::std::string* mutable_gui_label();
  ::std::string* release_gui_label();
  void set_allocated_gui_label(::std::string* gui_label);

  // optional string server_type = 2;
  bool has_server_type() const;
  void clear_server_type();
  static const int kServerTypeFieldNumber = 2;
  const ::std::string& server_type() const;
  void set_server_type(const ::std::string& value);
  #if LANG_CXX11
  void set_server_type(::std::string&& value);
  #endif
  void set_server_type(const char* value);
  void set_server_type(const char* value, size_t size);
  ::std::string* mutable_server_type();
  ::std::string* release_server_type();
  void set_allocated_server_type(::std::string* server_type);

  // optional string notary_id = 3;
  bool has_notary_id() const;
  void clear_notary_id();
  static const int kNotaryIdFieldNumber = 3;
  const ::std::string& notary_id() const;
  void set_notary_id(const ::std::string& value);
  #if LANG_CXX11
  void set_notary_id(::std::string&& value);
  #endif
  void set_notary_id(const char* value);
  void set_notary_id(const char* value, size_t size);
  ::std::string* mutable_notary_id();
  ::std::string* release_notary_id();
  void set_allocated_notary_id(::std::string* notary_id);

  // optional string instrument_definition_id = 4;
  bool has_instrument_definition_id() const;
  void clear_instrument_definition_id();
  static const int kInstrumentDefinitionIdFieldNumber = 4;
  const ::std::string& instrument_definition_id() const;
  void set_instrument_definition_id(const ::std::string& value);
  #if LANG_CXX11
  void set_instrument_definition_id(::std::string&& value);
  #endif
  void set_instrument_definition_id(const char* value);
  void set_instrument_definition_id(const char* value, size_t size);
  ::std::string* mutable_instrument_definition_id();
  ::std::string* release_instrument_definition_id();
  void set_allocated_instrument_definition_id(::std::string* instrument_definition_id);

  // optional string acct_id = 5;
  bool has_acct_id() const;
  void clear_acct_id();
  static const int kAcctIdFieldNumber = 5;
  const ::std::string& acct_id() const;
  void set_acct_id(const ::std::string& value);
  #if LANG_CXX11
  void set_acct_id(::std::string&& value);
  #endif
  void set_acct_id(const char* value);
  void set_acct_id(const char* value, size_t size);
  ::std::string* mutable_acct_id();
  ::std::string* release_acct_id();
  void set_allocated_acct_id(::std::string* acct_id);

  // optional string nym_id = 6;
  bool has_nym_id() const;
  void clear_nym_id();
  static const int kNymIdFieldNumber = 6;
  const ::std::string& nym_id() const;
  void set_nym_id(const ::std::string& value);
  #if LANG_CXX11
  void set_nym_id(::std::string&& value);
  #endif
  void set_nym_id(const char* value);
  void set_nym_id(const char* value, size_t size);
  ::std::string* mutable_nym_id();
  ::std::string* release_nym_id();
  void set_allocated_nym_id(::std::string* nym_id);

  // optional string memo = 7;
  bool has_memo() const;
  void clear_memo();
  static const int kMemoFieldNumber = 7;
  const ::std::string& memo() const;
  void set_memo(const ::std::string& value);
  #if LANG_CXX11
  void set_memo(::std::string&& value);
  #endif
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  ::std::string* mutable_memo();
  ::std::string* release_memo();
  void set_allocated_memo(::std::string* memo);

  // optional string public_key = 8;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 8;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // @@protoc_insertion_point(class_scope:opentxs.OTDB.ContactAcct_InternalPB)
 private:
  void set_has_gui_label();
  void clear_has_gui_label();
  void set_has_server_type();
  void clear_has_server_type();
  void set_has_notary_id();
  void clear_has_notary_id();
  void set_has_instrument_definition_id();
  void clear_has_instrument_definition_id();
  void set_has_acct_id();
  void clear_has_acct_id();
  void set_has_nym_id();
  void clear_has_nym_id();
  void set_has_memo();
  void clear_has_memo();
  void set_has_public_key();
  void clear_has_public_key();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gui_label_;
  ::google::protobuf::internal::ArenaStringPtr server_type_;
  ::google::protobuf::internal::ArenaStringPtr notary_id_;
  ::google::protobuf::internal::ArenaStringPtr instrument_definition_id_;
  ::google::protobuf::internal::ArenaStringPtr acct_id_;
  ::google::protobuf::internal::ArenaStringPtr nym_id_;
  ::google::protobuf::internal::ArenaStringPtr memo_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  friend struct ::protobuf_Moneychanger_2eproto::TableStruct;
  friend void ::protobuf_Moneychanger_2eproto::InitDefaultsContactAcct_InternalPBImpl();
};
// -------------------------------------------------------------------

class Contact_InternalPB : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.OTDB.Contact_InternalPB) */ {
 public:
  Contact_InternalPB();
  virtual ~Contact_InternalPB();

  Contact_InternalPB(const Contact_InternalPB& from);

  inline Contact_InternalPB& operator=(const Contact_InternalPB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Contact_InternalPB(Contact_InternalPB&& from) noexcept
    : Contact_InternalPB() {
    *this = ::std::move(from);
  }

  inline Contact_InternalPB& operator=(Contact_InternalPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Contact_InternalPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Contact_InternalPB* internal_default_instance() {
    return reinterpret_cast<const Contact_InternalPB*>(
               &_Contact_InternalPB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Contact_InternalPB* other);
  friend void swap(Contact_InternalPB& a, Contact_InternalPB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Contact_InternalPB* New() const PROTOBUF_FINAL { return New(NULL); }

  Contact_InternalPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Contact_InternalPB& from);
  void MergeFrom(const Contact_InternalPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Contact_InternalPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .opentxs.OTDB.ContactNym_InternalPB nyms = 6;
  int nyms_size() const;
  void clear_nyms();
  static const int kNymsFieldNumber = 6;
  const ::opentxs::OTDB::ContactNym_InternalPB& nyms(int index) const;
  ::opentxs::OTDB::ContactNym_InternalPB* mutable_nyms(int index);
  ::opentxs::OTDB::ContactNym_InternalPB* add_nyms();
  ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ContactNym_InternalPB >*
      mutable_nyms();
  const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ContactNym_InternalPB >&
      nyms() const;

  // repeated .opentxs.OTDB.ContactAcct_InternalPB accounts = 7;
  int accounts_size() const;
  void clear_accounts();
  static const int kAccountsFieldNumber = 7;
  const ::opentxs::OTDB::ContactAcct_InternalPB& accounts(int index) const;
  ::opentxs::OTDB::ContactAcct_InternalPB* mutable_accounts(int index);
  ::opentxs::OTDB::ContactAcct_InternalPB* add_accounts();
  ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ContactAcct_InternalPB >*
      mutable_accounts();
  const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ContactAcct_InternalPB >&
      accounts() const;

  // optional string gui_label = 1;
  bool has_gui_label() const;
  void clear_gui_label();
  static const int kGuiLabelFieldNumber = 1;
  const ::std::string& gui_label() const;
  void set_gui_label(const ::std::string& value);
  #if LANG_CXX11
  void set_gui_label(::std::string&& value);
  #endif
  void set_gui_label(const char* value);
  void set_gui_label(const char* value, size_t size);
  ::std::string* mutable_gui_label();
  ::std::string* release_gui_label();
  void set_allocated_gui_label(::std::string* gui_label);

  // optional string contact_id = 2;
  bool has_contact_id() const;
  void clear_contact_id();
  static const int kContactIdFieldNumber = 2;
  const ::std::string& contact_id() const;
  void set_contact_id(const ::std::string& value);
  #if LANG_CXX11
  void set_contact_id(::std::string&& value);
  #endif
  void set_contact_id(const char* value);
  void set_contact_id(const char* value, size_t size);
  ::std::string* mutable_contact_id();
  ::std::string* release_contact_id();
  void set_allocated_contact_id(::std::string* contact_id);

  // optional string email = 3;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 3;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional string memo = 4;
  bool has_memo() const;
  void clear_memo();
  static const int kMemoFieldNumber = 4;
  const ::std::string& memo() const;
  void set_memo(const ::std::string& value);
  #if LANG_CXX11
  void set_memo(::std::string&& value);
  #endif
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  ::std::string* mutable_memo();
  ::std::string* release_memo();
  void set_allocated_memo(::std::string* memo);

  // optional string public_key = 5;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 5;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // @@protoc_insertion_point(class_scope:opentxs.OTDB.Contact_InternalPB)
 private:
  void set_has_gui_label();
  void clear_has_gui_label();
  void set_has_contact_id();
  void clear_has_contact_id();
  void set_has_email();
  void clear_has_email();
  void set_has_memo();
  void clear_has_memo();
  void set_has_public_key();
  void clear_has_public_key();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ContactNym_InternalPB > nyms_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ContactAcct_InternalPB > accounts_;
  ::google::protobuf::internal::ArenaStringPtr gui_label_;
  ::google::protobuf::internal::ArenaStringPtr contact_id_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr memo_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  friend struct ::protobuf_Moneychanger_2eproto::TableStruct;
  friend void ::protobuf_Moneychanger_2eproto::InitDefaultsContact_InternalPBImpl();
};
// -------------------------------------------------------------------

class AddressBook_InternalPB : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.OTDB.AddressBook_InternalPB) */ {
 public:
  AddressBook_InternalPB();
  virtual ~AddressBook_InternalPB();

  AddressBook_InternalPB(const AddressBook_InternalPB& from);

  inline AddressBook_InternalPB& operator=(const AddressBook_InternalPB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressBook_InternalPB(AddressBook_InternalPB&& from) noexcept
    : AddressBook_InternalPB() {
    *this = ::std::move(from);
  }

  inline AddressBook_InternalPB& operator=(AddressBook_InternalPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AddressBook_InternalPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressBook_InternalPB* internal_default_instance() {
    return reinterpret_cast<const AddressBook_InternalPB*>(
               &_AddressBook_InternalPB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(AddressBook_InternalPB* other);
  friend void swap(AddressBook_InternalPB& a, AddressBook_InternalPB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressBook_InternalPB* New() const PROTOBUF_FINAL { return New(NULL); }

  AddressBook_InternalPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const AddressBook_InternalPB& from);
  void MergeFrom(const AddressBook_InternalPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddressBook_InternalPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .opentxs.OTDB.Contact_InternalPB contacts = 1;
  int contacts_size() const;
  void clear_contacts();
  static const int kContactsFieldNumber = 1;
  const ::opentxs::OTDB::Contact_InternalPB& contacts(int index) const;
  ::opentxs::OTDB::Contact_InternalPB* mutable_contacts(int index);
  ::opentxs::OTDB::Contact_InternalPB* add_contacts();
  ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::Contact_InternalPB >*
      mutable_contacts();
  const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::Contact_InternalPB >&
      contacts() const;

  // @@protoc_insertion_point(class_scope:opentxs.OTDB.AddressBook_InternalPB)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::Contact_InternalPB > contacts_;
  friend struct ::protobuf_Moneychanger_2eproto::TableStruct;
  friend void ::protobuf_Moneychanger_2eproto::InitDefaultsAddressBook_InternalPBImpl();
};
// -------------------------------------------------------------------

class WalletData_InternalPB : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.OTDB.WalletData_InternalPB) */ {
 public:
  WalletData_InternalPB();
  virtual ~WalletData_InternalPB();

  WalletData_InternalPB(const WalletData_InternalPB& from);

  inline WalletData_InternalPB& operator=(const WalletData_InternalPB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WalletData_InternalPB(WalletData_InternalPB&& from) noexcept
    : WalletData_InternalPB() {
    *this = ::std::move(from);
  }

  inline WalletData_InternalPB& operator=(WalletData_InternalPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const WalletData_InternalPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WalletData_InternalPB* internal_default_instance() {
    return reinterpret_cast<const WalletData_InternalPB*>(
               &_WalletData_InternalPB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(WalletData_InternalPB* other);
  friend void swap(WalletData_InternalPB& a, WalletData_InternalPB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WalletData_InternalPB* New() const PROTOBUF_FINAL { return New(NULL); }

  WalletData_InternalPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const WalletData_InternalPB& from);
  void MergeFrom(const WalletData_InternalPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WalletData_InternalPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .opentxs.OTDB.BitcoinServer_InternalPB bitcoin_server = 1;
  int bitcoin_server_size() const;
  void clear_bitcoin_server();
  static const int kBitcoinServerFieldNumber = 1;
  const ::opentxs::OTDB::BitcoinServer_InternalPB& bitcoin_server(int index) const;
  ::opentxs::OTDB::BitcoinServer_InternalPB* mutable_bitcoin_server(int index);
  ::opentxs::OTDB::BitcoinServer_InternalPB* add_bitcoin_server();
  ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::BitcoinServer_InternalPB >*
      mutable_bitcoin_server();
  const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::BitcoinServer_InternalPB >&
      bitcoin_server() const;

  // repeated .opentxs.OTDB.BitcoinAcct_InternalPB bitcoin_acct = 2;
  int bitcoin_acct_size() const;
  void clear_bitcoin_acct();
  static const int kBitcoinAcctFieldNumber = 2;
  const ::opentxs::OTDB::BitcoinAcct_InternalPB& bitcoin_acct(int index) const;
  ::opentxs::OTDB::BitcoinAcct_InternalPB* mutable_bitcoin_acct(int index);
  ::opentxs::OTDB::BitcoinAcct_InternalPB* add_bitcoin_acct();
  ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::BitcoinAcct_InternalPB >*
      mutable_bitcoin_acct();
  const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::BitcoinAcct_InternalPB >&
      bitcoin_acct() const;

  // repeated .opentxs.OTDB.RippleServer_InternalPB ripple_server = 3;
  int ripple_server_size() const;
  void clear_ripple_server();
  static const int kRippleServerFieldNumber = 3;
  const ::opentxs::OTDB::RippleServer_InternalPB& ripple_server(int index) const;
  ::opentxs::OTDB::RippleServer_InternalPB* mutable_ripple_server(int index);
  ::opentxs::OTDB::RippleServer_InternalPB* add_ripple_server();
  ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::RippleServer_InternalPB >*
      mutable_ripple_server();
  const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::RippleServer_InternalPB >&
      ripple_server() const;

  // repeated .opentxs.OTDB.LoomServer_InternalPB loom_server = 4;
  int loom_server_size() const;
  void clear_loom_server();
  static const int kLoomServerFieldNumber = 4;
  const ::opentxs::OTDB::LoomServer_InternalPB& loom_server(int index) const;
  ::opentxs::OTDB::LoomServer_InternalPB* mutable_loom_server(int index);
  ::opentxs::OTDB::LoomServer_InternalPB* add_loom_server();
  ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::LoomServer_InternalPB >*
      mutable_loom_server();
  const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::LoomServer_InternalPB >&
      loom_server() const;

  // @@protoc_insertion_point(class_scope:opentxs.OTDB.WalletData_InternalPB)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::BitcoinServer_InternalPB > bitcoin_server_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::BitcoinAcct_InternalPB > bitcoin_acct_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::RippleServer_InternalPB > ripple_server_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::LoomServer_InternalPB > loom_server_;
  friend struct ::protobuf_Moneychanger_2eproto::TableStruct;
  friend void ::protobuf_Moneychanger_2eproto::InitDefaultsWalletData_InternalPBImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerInfo_InternalPB

// optional string server_type = 1;
inline bool ServerInfo_InternalPB::has_server_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerInfo_InternalPB::set_has_server_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerInfo_InternalPB::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerInfo_InternalPB::clear_server_type() {
  server_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_type();
}
inline const ::std::string& ServerInfo_InternalPB::server_type() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ServerInfo_InternalPB.server_type)
  return server_type_.GetNoArena();
}
inline void ServerInfo_InternalPB::set_server_type(const ::std::string& value) {
  set_has_server_type();
  server_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ServerInfo_InternalPB.server_type)
}
#if LANG_CXX11
inline void ServerInfo_InternalPB::set_server_type(::std::string&& value) {
  set_has_server_type();
  server_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.ServerInfo_InternalPB.server_type)
}
#endif
inline void ServerInfo_InternalPB::set_server_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_type();
  server_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ServerInfo_InternalPB.server_type)
}
inline void ServerInfo_InternalPB::set_server_type(const char* value, size_t size) {
  set_has_server_type();
  server_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ServerInfo_InternalPB.server_type)
}
inline ::std::string* ServerInfo_InternalPB::mutable_server_type() {
  set_has_server_type();
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ServerInfo_InternalPB.server_type)
  return server_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfo_InternalPB::release_server_type() {
  // @@protoc_insertion_point(field_release:opentxs.OTDB.ServerInfo_InternalPB.server_type)
  clear_has_server_type();
  return server_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo_InternalPB::set_allocated_server_type(::std::string* server_type) {
  if (server_type != NULL) {
    set_has_server_type();
  } else {
    clear_has_server_type();
  }
  server_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_type);
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ServerInfo_InternalPB.server_type)
}

// optional string notary_id = 2;
inline bool ServerInfo_InternalPB::has_notary_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerInfo_InternalPB::set_has_notary_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerInfo_InternalPB::clear_has_notary_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerInfo_InternalPB::clear_notary_id() {
  notary_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_notary_id();
}
inline const ::std::string& ServerInfo_InternalPB::notary_id() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ServerInfo_InternalPB.notary_id)
  return notary_id_.GetNoArena();
}
inline void ServerInfo_InternalPB::set_notary_id(const ::std::string& value) {
  set_has_notary_id();
  notary_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ServerInfo_InternalPB.notary_id)
}
#if LANG_CXX11
inline void ServerInfo_InternalPB::set_notary_id(::std::string&& value) {
  set_has_notary_id();
  notary_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.ServerInfo_InternalPB.notary_id)
}
#endif
inline void ServerInfo_InternalPB::set_notary_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_notary_id();
  notary_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ServerInfo_InternalPB.notary_id)
}
inline void ServerInfo_InternalPB::set_notary_id(const char* value, size_t size) {
  set_has_notary_id();
  notary_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ServerInfo_InternalPB.notary_id)
}
inline ::std::string* ServerInfo_InternalPB::mutable_notary_id() {
  set_has_notary_id();
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ServerInfo_InternalPB.notary_id)
  return notary_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfo_InternalPB::release_notary_id() {
  // @@protoc_insertion_point(field_release:opentxs.OTDB.ServerInfo_InternalPB.notary_id)
  clear_has_notary_id();
  return notary_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo_InternalPB::set_allocated_notary_id(::std::string* notary_id) {
  if (notary_id != NULL) {
    set_has_notary_id();
  } else {
    clear_has_notary_id();
  }
  notary_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notary_id);
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ServerInfo_InternalPB.notary_id)
}

// -------------------------------------------------------------------

// ContactNym_InternalPB

// optional string gui_label = 1;
inline bool ContactNym_InternalPB::has_gui_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContactNym_InternalPB::set_has_gui_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContactNym_InternalPB::clear_has_gui_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContactNym_InternalPB::clear_gui_label() {
  gui_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gui_label();
}
inline const ::std::string& ContactNym_InternalPB::gui_label() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactNym_InternalPB.gui_label)
  return gui_label_.GetNoArena();
}
inline void ContactNym_InternalPB::set_gui_label(const ::std::string& value) {
  set_has_gui_label();
  gui_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactNym_InternalPB.gui_label)
}
#if LANG_CXX11
inline void ContactNym_InternalPB::set_gui_label(::std::string&& value) {
  set_has_gui_label();
  gui_label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.ContactNym_InternalPB.gui_label)
}
#endif
inline void ContactNym_InternalPB::set_gui_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gui_label();
  gui_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactNym_InternalPB.gui_label)
}
inline void ContactNym_InternalPB::set_gui_label(const char* value, size_t size) {
  set_has_gui_label();
  gui_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactNym_InternalPB.gui_label)
}
inline ::std::string* ContactNym_InternalPB::mutable_gui_label() {
  set_has_gui_label();
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactNym_InternalPB.gui_label)
  return gui_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactNym_InternalPB::release_gui_label() {
  // @@protoc_insertion_point(field_release:opentxs.OTDB.ContactNym_InternalPB.gui_label)
  clear_has_gui_label();
  return gui_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactNym_InternalPB::set_allocated_gui_label(::std::string* gui_label) {
  if (gui_label != NULL) {
    set_has_gui_label();
  } else {
    clear_has_gui_label();
  }
  gui_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gui_label);
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactNym_InternalPB.gui_label)
}

// optional string nym_type = 2;
inline bool ContactNym_InternalPB::has_nym_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContactNym_InternalPB::set_has_nym_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContactNym_InternalPB::clear_has_nym_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContactNym_InternalPB::clear_nym_type() {
  nym_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nym_type();
}
inline const ::std::string& ContactNym_InternalPB::nym_type() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactNym_InternalPB.nym_type)
  return nym_type_.GetNoArena();
}
inline void ContactNym_InternalPB::set_nym_type(const ::std::string& value) {
  set_has_nym_type();
  nym_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactNym_InternalPB.nym_type)
}
#if LANG_CXX11
inline void ContactNym_InternalPB::set_nym_type(::std::string&& value) {
  set_has_nym_type();
  nym_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.ContactNym_InternalPB.nym_type)
}
#endif
inline void ContactNym_InternalPB::set_nym_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nym_type();
  nym_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactNym_InternalPB.nym_type)
}
inline void ContactNym_InternalPB::set_nym_type(const char* value, size_t size) {
  set_has_nym_type();
  nym_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactNym_InternalPB.nym_type)
}
inline ::std::string* ContactNym_InternalPB::mutable_nym_type() {
  set_has_nym_type();
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactNym_InternalPB.nym_type)
  return nym_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactNym_InternalPB::release_nym_type() {
  // @@protoc_insertion_point(field_release:opentxs.OTDB.ContactNym_InternalPB.nym_type)
  clear_has_nym_type();
  return nym_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactNym_InternalPB::set_allocated_nym_type(::std::string* nym_type) {
  if (nym_type != NULL) {
    set_has_nym_type();
  } else {
    clear_has_nym_type();
  }
  nym_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nym_type);
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactNym_InternalPB.nym_type)
}

// optional string nym_id = 3;
inline bool ContactNym_InternalPB::has_nym_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContactNym_InternalPB::set_has_nym_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContactNym_InternalPB::clear_has_nym_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContactNym_InternalPB::clear_nym_id() {
  nym_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nym_id();
}
inline const ::std::string& ContactNym_InternalPB::nym_id() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactNym_InternalPB.nym_id)
  return nym_id_.GetNoArena();
}
inline void ContactNym_InternalPB::set_nym_id(const ::std::string& value) {
  set_has_nym_id();
  nym_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactNym_InternalPB.nym_id)
}
#if LANG_CXX11
inline void ContactNym_InternalPB::set_nym_id(::std::string&& value) {
  set_has_nym_id();
  nym_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.ContactNym_InternalPB.nym_id)
}
#endif
inline void ContactNym_InternalPB::set_nym_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nym_id();
  nym_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactNym_InternalPB.nym_id)
}
inline void ContactNym_InternalPB::set_nym_id(const char* value, size_t size) {
  set_has_nym_id();
  nym_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactNym_InternalPB.nym_id)
}
inline ::std::string* ContactNym_InternalPB::mutable_nym_id() {
  set_has_nym_id();
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactNym_InternalPB.nym_id)
  return nym_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactNym_InternalPB::release_nym_id() {
  // @@protoc_insertion_point(field_release:opentxs.OTDB.ContactNym_InternalPB.nym_id)
  clear_has_nym_id();
  return nym_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactNym_InternalPB::set_allocated_nym_id(::std::string* nym_id) {
  if (nym_id != NULL) {
    set_has_nym_id();
  } else {
    clear_has_nym_id();
  }
  nym_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nym_id);
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactNym_InternalPB.nym_id)
}

// optional string public_key = 4;
inline bool ContactNym_InternalPB::has_public_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContactNym_InternalPB::set_has_public_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContactNym_InternalPB::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContactNym_InternalPB::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key();
}
inline const ::std::string& ContactNym_InternalPB::public_key() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactNym_InternalPB.public_key)
  return public_key_.GetNoArena();
}
inline void ContactNym_InternalPB::set_public_key(const ::std::string& value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactNym_InternalPB.public_key)
}
#if LANG_CXX11
inline void ContactNym_InternalPB::set_public_key(::std::string&& value) {
  set_has_public_key();
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.ContactNym_InternalPB.public_key)
}
#endif
inline void ContactNym_InternalPB::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactNym_InternalPB.public_key)
}
inline void ContactNym_InternalPB::set_public_key(const char* value, size_t size) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactNym_InternalPB.public_key)
}
inline ::std::string* ContactNym_InternalPB::mutable_public_key() {
  set_has_public_key();
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactNym_InternalPB.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactNym_InternalPB::release_public_key() {
  // @@protoc_insertion_point(field_release:opentxs.OTDB.ContactNym_InternalPB.public_key)
  clear_has_public_key();
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactNym_InternalPB::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    set_has_public_key();
  } else {
    clear_has_public_key();
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactNym_InternalPB.public_key)
}

// optional string memo = 5;
inline bool ContactNym_InternalPB::has_memo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContactNym_InternalPB::set_has_memo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContactNym_InternalPB::clear_has_memo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContactNym_InternalPB::clear_memo() {
  memo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_memo();
}
inline const ::std::string& ContactNym_InternalPB::memo() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactNym_InternalPB.memo)
  return memo_.GetNoArena();
}
inline void ContactNym_InternalPB::set_memo(const ::std::string& value) {
  set_has_memo();
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactNym_InternalPB.memo)
}
#if LANG_CXX11
inline void ContactNym_InternalPB::set_memo(::std::string&& value) {
  set_has_memo();
  memo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.ContactNym_InternalPB.memo)
}
#endif
inline void ContactNym_InternalPB::set_memo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_memo();
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactNym_InternalPB.memo)
}
inline void ContactNym_InternalPB::set_memo(const char* value, size_t size) {
  set_has_memo();
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactNym_InternalPB.memo)
}
inline ::std::string* ContactNym_InternalPB::mutable_memo() {
  set_has_memo();
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactNym_InternalPB.memo)
  return memo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactNym_InternalPB::release_memo() {
  // @@protoc_insertion_point(field_release:opentxs.OTDB.ContactNym_InternalPB.memo)
  clear_has_memo();
  return memo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactNym_InternalPB::set_allocated_memo(::std::string* memo) {
  if (memo != NULL) {
    set_has_memo();
  } else {
    clear_has_memo();
  }
  memo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), memo);
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactNym_InternalPB.memo)
}

// repeated .opentxs.OTDB.ServerInfo_InternalPB servers = 6;
inline int ContactNym_InternalPB::servers_size() const {
  return servers_.size();
}
inline void ContactNym_InternalPB::clear_servers() {
  servers_.Clear();
}
inline const ::opentxs::OTDB::ServerInfo_InternalPB& ContactNym_InternalPB::servers(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactNym_InternalPB.servers)
  return servers_.Get(index);
}
inline ::opentxs::OTDB::ServerInfo_InternalPB* ContactNym_InternalPB::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactNym_InternalPB.servers)
  return servers_.Mutable(index);
}
inline ::opentxs::OTDB::ServerInfo_InternalPB* ContactNym_InternalPB::add_servers() {
  // @@protoc_insertion_point(field_add:opentxs.OTDB.ContactNym_InternalPB.servers)
  return servers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ServerInfo_InternalPB >*
ContactNym_InternalPB::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.OTDB.ContactNym_InternalPB.servers)
  return &servers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ServerInfo_InternalPB >&
ContactNym_InternalPB::servers() const {
  // @@protoc_insertion_point(field_list:opentxs.OTDB.ContactNym_InternalPB.servers)
  return servers_;
}

// -------------------------------------------------------------------

// ContactAcct_InternalPB

// optional string gui_label = 1;
inline bool ContactAcct_InternalPB::has_gui_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContactAcct_InternalPB::set_has_gui_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContactAcct_InternalPB::clear_has_gui_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContactAcct_InternalPB::clear_gui_label() {
  gui_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gui_label();
}
inline const ::std::string& ContactAcct_InternalPB::gui_label() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactAcct_InternalPB.gui_label)
  return gui_label_.GetNoArena();
}
inline void ContactAcct_InternalPB::set_gui_label(const ::std::string& value) {
  set_has_gui_label();
  gui_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactAcct_InternalPB.gui_label)
}
#if LANG_CXX11
inline void ContactAcct_InternalPB::set_gui_label(::std::string&& value) {
  set_has_gui_label();
  gui_label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.ContactAcct_InternalPB.gui_label)
}
#endif
inline void ContactAcct_InternalPB::set_gui_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gui_label();
  gui_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactAcct_InternalPB.gui_label)
}
inline void ContactAcct_InternalPB::set_gui_label(const char* value, size_t size) {
  set_has_gui_label();
  gui_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactAcct_InternalPB.gui_label)
}
inline ::std::string* ContactAcct_InternalPB::mutable_gui_label() {
  set_has_gui_label();
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactAcct_InternalPB.gui_label)
  return gui_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactAcct_InternalPB::release_gui_label() {
  // @@protoc_insertion_point(field_release:opentxs.OTDB.ContactAcct_InternalPB.gui_label)
  clear_has_gui_label();
  return gui_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactAcct_InternalPB::set_allocated_gui_label(::std::string* gui_label) {
  if (gui_label != NULL) {
    set_has_gui_label();
  } else {
    clear_has_gui_label();
  }
  gui_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gui_label);
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactAcct_InternalPB.gui_label)
}

// optional string server_type = 2;
inline bool ContactAcct_InternalPB::has_server_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContactAcct_InternalPB::set_has_server_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContactAcct_InternalPB::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContactAcct_InternalPB::clear_server_type() {
  server_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_type();
}
inline const ::std::string& ContactAcct_InternalPB::server_type() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactAcct_InternalPB.server_type)
  return server_type_.GetNoArena();
}
inline void ContactAcct_InternalPB::set_server_type(const ::std::string& value) {
  set_has_server_type();
  server_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactAcct_InternalPB.server_type)
}
#if LANG_CXX11
inline void ContactAcct_InternalPB::set_server_type(::std::string&& value) {
  set_has_server_type();
  server_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.ContactAcct_InternalPB.server_type)
}
#endif
inline void ContactAcct_InternalPB::set_server_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_type();
  server_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactAcct_InternalPB.server_type)
}
inline void ContactAcct_InternalPB::set_server_type(const char* value, size_t size) {
  set_has_server_type();
  server_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactAcct_InternalPB.server_type)
}
inline ::std::string* ContactAcct_InternalPB::mutable_server_type() {
  set_has_server_type();
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactAcct_InternalPB.server_type)
  return server_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactAcct_InternalPB::release_server_type() {
  // @@protoc_insertion_point(field_release:opentxs.OTDB.ContactAcct_InternalPB.server_type)
  clear_has_server_type();
  return server_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactAcct_InternalPB::set_allocated_server_type(::std::string* server_type) {
  if (server_type != NULL) {
    set_has_server_type();
  } else {
    clear_has_server_type();
  }
  server_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_type);
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactAcct_InternalPB.server_type)
}

// optional string notary_id = 3;
inline bool ContactAcct_InternalPB::has_notary_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContactAcct_InternalPB::set_has_notary_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContactAcct_InternalPB::clear_has_notary_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContactAcct_InternalPB::clear_notary_id() {
  notary_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_notary_id();
}
inline const ::std::string& ContactAcct_InternalPB::notary_id() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactAcct_InternalPB.notary_id)
  return notary_id_.GetNoArena();
}
inline void ContactAcct_InternalPB::set_notary_id(const ::std::string& value) {
  set_has_notary_id();
  notary_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactAcct_InternalPB.notary_id)
}
#if LANG_CXX11
inline void ContactAcct_InternalPB::set_notary_id(::std::string&& value) {
  set_has_notary_id();
  notary_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.ContactAcct_InternalPB.notary_id)
}
#endif
inline void ContactAcct_InternalPB::set_notary_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_notary_id();
  notary_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactAcct_InternalPB.notary_id)
}
inline void ContactAcct_InternalPB::set_notary_id(const char* value, size_t size) {
  set_has_notary_id();
  notary_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactAcct_InternalPB.notary_id)
}
inline ::std::string* ContactAcct_InternalPB::mutable_notary_id() {
  set_has_notary_id();
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactAcct_InternalPB.notary_id)
  return notary_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactAcct_InternalPB::release_notary_id() {
  // @@protoc_insertion_point(field_release:opentxs.OTDB.ContactAcct_InternalPB.notary_id)
  clear_has_notary_id();
  return notary_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactAcct_InternalPB::set_allocated_notary_id(::std::string* notary_id) {
  if (notary_id != NULL) {
    set_has_notary_id();
  } else {
    clear_has_notary_id();
  }
  notary_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notary_id);
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactAcct_InternalPB.notary_id)
}

// optional string instrument_definition_id = 4;
inline bool ContactAcct_InternalPB::has_instrument_definition_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContactAcct_InternalPB::set_has_instrument_definition_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContactAcct_InternalPB::clear_has_instrument_definition_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContactAcct_InternalPB::clear_instrument_definition_id() {
  instrument_definition_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_instrument_definition_id();
}
inline const ::std::string& ContactAcct_InternalPB::instrument_definition_id() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactAcct_InternalPB.instrument_definition_id)
  return instrument_definition_id_.GetNoArena();
}
inline void ContactAcct_InternalPB::set_instrument_definition_id(const ::std::string& value) {
  set_has_instrument_definition_id();
  instrument_definition_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactAcct_InternalPB.instrument_definition_id)
}
#if LANG_CXX11
inline void ContactAcct_InternalPB::set_instrument_definition_id(::std::string&& value) {
  set_has_instrument_definition_id();
  instrument_definition_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.ContactAcct_InternalPB.instrument_definition_id)
}
#endif
inline void ContactAcct_InternalPB::set_instrument_definition_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_instrument_definition_id();
  instrument_definition_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactAcct_InternalPB.instrument_definition_id)
}
inline void ContactAcct_InternalPB::set_instrument_definition_id(const char* value, size_t size) {
  set_has_instrument_definition_id();
  instrument_definition_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactAcct_InternalPB.instrument_definition_id)
}
inline ::std::string* ContactAcct_InternalPB::mutable_instrument_definition_id() {
  set_has_instrument_definition_id();
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactAcct_InternalPB.instrument_definition_id)
  return instrument_definition_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactAcct_InternalPB::release_instrument_definition_id() {
  // @@protoc_insertion_point(field_release:opentxs.OTDB.ContactAcct_InternalPB.instrument_definition_id)
  clear_has_instrument_definition_id();
  return instrument_definition_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactAcct_InternalPB::set_allocated_instrument_definition_id(::std::string* instrument_definition_id) {
  if (instrument_definition_id != NULL) {
    set_has_instrument_definition_id();
  } else {
    clear_has_instrument_definition_id();
  }
  instrument_definition_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument_definition_id);
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactAcct_InternalPB.instrument_definition_id)
}

// optional string acct_id = 5;
inline bool ContactAcct_InternalPB::has_acct_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContactAcct_InternalPB::set_has_acct_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContactAcct_InternalPB::clear_has_acct_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContactAcct_InternalPB::clear_acct_id() {
  acct_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_acct_id();
}
inline const ::std::string& ContactAcct_InternalPB::acct_id() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactAcct_InternalPB.acct_id)
  return acct_id_.GetNoArena();
}
inline void ContactAcct_InternalPB::set_acct_id(const ::std::string& value) {
  set_has_acct_id();
  acct_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactAcct_InternalPB.acct_id)
}
#if LANG_CXX11
inline void ContactAcct_InternalPB::set_acct_id(::std::string&& value) {
  set_has_acct_id();
  acct_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.ContactAcct_InternalPB.acct_id)
}
#endif
inline void ContactAcct_InternalPB::set_acct_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_acct_id();
  acct_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactAcct_InternalPB.acct_id)
}
inline void ContactAcct_InternalPB::set_acct_id(const char* value, size_t size) {
  set_has_acct_id();
  acct_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactAcct_InternalPB.acct_id)
}
inline ::std::string* ContactAcct_InternalPB::mutable_acct_id() {
  set_has_acct_id();
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactAcct_InternalPB.acct_id)
  return acct_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactAcct_InternalPB::release_acct_id() {
  // @@protoc_insertion_point(field_release:opentxs.OTDB.ContactAcct_InternalPB.acct_id)
  clear_has_acct_id();
  return acct_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactAcct_InternalPB::set_allocated_acct_id(::std::string* acct_id) {
  if (acct_id != NULL) {
    set_has_acct_id();
  } else {
    clear_has_acct_id();
  }
  acct_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), acct_id);
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactAcct_InternalPB.acct_id)
}

// optional string nym_id = 6;
inline bool ContactAcct_InternalPB::has_nym_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ContactAcct_InternalPB::set_has_nym_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ContactAcct_InternalPB::clear_has_nym_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ContactAcct_InternalPB::clear_nym_id() {
  nym_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nym_id();
}
inline const ::std::string& ContactAcct_InternalPB::nym_id() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactAcct_InternalPB.nym_id)
  return nym_id_.GetNoArena();
}
inline void ContactAcct_InternalPB::set_nym_id(const ::std::string& value) {
  set_has_nym_id();
  nym_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactAcct_InternalPB.nym_id)
}
#if LANG_CXX11
inline void ContactAcct_InternalPB::set_nym_id(::std::string&& value) {
  set_has_nym_id();
  nym_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.ContactAcct_InternalPB.nym_id)
}
#endif
inline void ContactAcct_InternalPB::set_nym_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nym_id();
  nym_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactAcct_InternalPB.nym_id)
}
inline void ContactAcct_InternalPB::set_nym_id(const char* value, size_t size) {
  set_has_nym_id();
  nym_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactAcct_InternalPB.nym_id)
}
inline ::std::string* ContactAcct_InternalPB::mutable_nym_id() {
  set_has_nym_id();
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactAcct_InternalPB.nym_id)
  return nym_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactAcct_InternalPB::release_nym_id() {
  // @@protoc_insertion_point(field_release:opentxs.OTDB.ContactAcct_InternalPB.nym_id)
  clear_has_nym_id();
  return nym_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactAcct_InternalPB::set_allocated_nym_id(::std::string* nym_id) {
  if (nym_id != NULL) {
    set_has_nym_id();
  } else {
    clear_has_nym_id();
  }
  nym_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nym_id);
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactAcct_InternalPB.nym_id)
}

// optional string memo = 7;
inline bool ContactAcct_InternalPB::has_memo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ContactAcct_InternalPB::set_has_memo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ContactAcct_InternalPB::clear_has_memo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ContactAcct_InternalPB::clear_memo() {
  memo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_memo();
}
inline const ::std::string& ContactAcct_InternalPB::memo() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactAcct_InternalPB.memo)
  return memo_.GetNoArena();
}
inline void ContactAcct_InternalPB::set_memo(const ::std::string& value) {
  set_has_memo();
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactAcct_InternalPB.memo)
}
#if LANG_CXX11
inline void ContactAcct_InternalPB::set_memo(::std::string&& value) {
  set_has_memo();
  memo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.ContactAcct_InternalPB.memo)
}
#endif
inline void ContactAcct_InternalPB::set_memo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_memo();
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactAcct_InternalPB.memo)
}
inline void ContactAcct_InternalPB::set_memo(const char* value, size_t size) {
  set_has_memo();
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactAcct_InternalPB.memo)
}
inline ::std::string* ContactAcct_InternalPB::mutable_memo() {
  set_has_memo();
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactAcct_InternalPB.memo)
  return memo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactAcct_InternalPB::release_memo() {
  // @@protoc_insertion_point(field_release:opentxs.OTDB.ContactAcct_InternalPB.memo)
  clear_has_memo();
  return memo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactAcct_InternalPB::set_allocated_memo(::std::string* memo) {
  if (memo != NULL) {
    set_has_memo();
  } else {
    clear_has_memo();
  }
  memo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), memo);
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactAcct_InternalPB.memo)
}

// optional string public_key = 8;
inline bool ContactAcct_InternalPB::has_public_key() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ContactAcct_InternalPB::set_has_public_key() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ContactAcct_InternalPB::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ContactAcct_InternalPB::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key();
}
inline const ::std::string& ContactAcct_InternalPB::public_key() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactAcct_InternalPB.public_key)
  return public_key_.GetNoArena();
}
inline void ContactAcct_InternalPB::set_public_key(const ::std::string& value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactAcct_InternalPB.public_key)
}
#if LANG_CXX11
inline void ContactAcct_InternalPB::set_public_key(::std::string&& value) {
  set_has_public_key();
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.ContactAcct_InternalPB.public_key)
}
#endif
inline void ContactAcct_InternalPB::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactAcct_InternalPB.public_key)
}
inline void ContactAcct_InternalPB::set_public_key(const char* value, size_t size) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactAcct_InternalPB.public_key)
}
inline ::std::string* ContactAcct_InternalPB::mutable_public_key() {
  set_has_public_key();
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactAcct_InternalPB.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactAcct_InternalPB::release_public_key() {
  // @@protoc_insertion_point(field_release:opentxs.OTDB.ContactAcct_InternalPB.public_key)
  clear_has_public_key();
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactAcct_InternalPB::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    set_has_public_key();
  } else {
    clear_has_public_key();
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactAcct_InternalPB.public_key)
}

// -------------------------------------------------------------------

// Contact_InternalPB

// optional string gui_label = 1;
inline bool Contact_InternalPB::has_gui_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Contact_InternalPB::set_has_gui_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Contact_InternalPB::clear_has_gui_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Contact_InternalPB::clear_gui_label() {
  gui_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gui_label();
}
inline const ::std::string& Contact_InternalPB::gui_label() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.Contact_InternalPB.gui_label)
  return gui_label_.GetNoArena();
}
inline void Contact_InternalPB::set_gui_label(const ::std::string& value) {
  set_has_gui_label();
  gui_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.Contact_InternalPB.gui_label)
}
#if LANG_CXX11
inline void Contact_InternalPB::set_gui_label(::std::string&& value) {
  set_has_gui_label();
  gui_label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.Contact_InternalPB.gui_label)
}
#endif
inline void Contact_InternalPB::set_gui_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gui_label();
  gui_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.Contact_InternalPB.gui_label)
}
inline void Contact_InternalPB::set_gui_label(const char* value, size_t size) {
  set_has_gui_label();
  gui_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.Contact_InternalPB.gui_label)
}
inline ::std::string* Contact_InternalPB::mutable_gui_label() {
  set_has_gui_label();
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.Contact_InternalPB.gui_label)
  return gui_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contact_InternalPB::release_gui_label() {
  // @@protoc_insertion_point(field_release:opentxs.OTDB.Contact_InternalPB.gui_label)
  clear_has_gui_label();
  return gui_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact_InternalPB::set_allocated_gui_label(::std::string* gui_label) {
  if (gui_label != NULL) {
    set_has_gui_label();
  } else {
    clear_has_gui_label();
  }
  gui_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gui_label);
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.Contact_InternalPB.gui_label)
}

// optional string contact_id = 2;
inline bool Contact_InternalPB::has_contact_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Contact_InternalPB::set_has_contact_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Contact_InternalPB::clear_has_contact_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Contact_InternalPB::clear_contact_id() {
  contact_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contact_id();
}
inline const ::std::string& Contact_InternalPB::contact_id() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.Contact_InternalPB.contact_id)
  return contact_id_.GetNoArena();
}
inline void Contact_InternalPB::set_contact_id(const ::std::string& value) {
  set_has_contact_id();
  contact_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.Contact_InternalPB.contact_id)
}
#if LANG_CXX11
inline void Contact_InternalPB::set_contact_id(::std::string&& value) {
  set_has_contact_id();
  contact_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.Contact_InternalPB.contact_id)
}
#endif
inline void Contact_InternalPB::set_contact_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contact_id();
  contact_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.Contact_InternalPB.contact_id)
}
inline void Contact_InternalPB::set_contact_id(const char* value, size_t size) {
  set_has_contact_id();
  contact_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.Contact_InternalPB.contact_id)
}
inline ::std::string* Contact_InternalPB::mutable_contact_id() {
  set_has_contact_id();
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.Contact_InternalPB.contact_id)
  return contact_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contact_InternalPB::release_contact_id() {
  // @@protoc_insertion_point(field_release:opentxs.OTDB.Contact_InternalPB.contact_id)
  clear_has_contact_id();
  return contact_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact_InternalPB::set_allocated_contact_id(::std::string* contact_id) {
  if (contact_id != NULL) {
    set_has_contact_id();
  } else {
    clear_has_contact_id();
  }
  contact_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contact_id);
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.Contact_InternalPB.contact_id)
}

// optional string email = 3;
inline bool Contact_InternalPB::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Contact_InternalPB::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Contact_InternalPB::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Contact_InternalPB::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& Contact_InternalPB::email() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.Contact_InternalPB.email)
  return email_.GetNoArena();
}
inline void Contact_InternalPB::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.Contact_InternalPB.email)
}
#if LANG_CXX11
inline void Contact_InternalPB::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.Contact_InternalPB.email)
}
#endif
inline void Contact_InternalPB::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.Contact_InternalPB.email)
}
inline void Contact_InternalPB::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.Contact_InternalPB.email)
}
inline ::std::string* Contact_InternalPB::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.Contact_InternalPB.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contact_InternalPB::release_email() {
  // @@protoc_insertion_point(field_release:opentxs.OTDB.Contact_InternalPB.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact_InternalPB::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.Contact_InternalPB.email)
}

// optional string memo = 4;
inline bool Contact_InternalPB::has_memo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Contact_InternalPB::set_has_memo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Contact_InternalPB::clear_has_memo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Contact_InternalPB::clear_memo() {
  memo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_memo();
}
inline const ::std::string& Contact_InternalPB::memo() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.Contact_InternalPB.memo)
  return memo_.GetNoArena();
}
inline void Contact_InternalPB::set_memo(const ::std::string& value) {
  set_has_memo();
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.Contact_InternalPB.memo)
}
#if LANG_CXX11
inline void Contact_InternalPB::set_memo(::std::string&& value) {
  set_has_memo();
  memo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.Contact_InternalPB.memo)
}
#endif
inline void Contact_InternalPB::set_memo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_memo();
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.Contact_InternalPB.memo)
}
inline void Contact_InternalPB::set_memo(const char* value, size_t size) {
  set_has_memo();
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.Contact_InternalPB.memo)
}
inline ::std::string* Contact_InternalPB::mutable_memo() {
  set_has_memo();
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.Contact_InternalPB.memo)
  return memo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contact_InternalPB::release_memo() {
  // @@protoc_insertion_point(field_release:opentxs.OTDB.Contact_InternalPB.memo)
  clear_has_memo();
  return memo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact_InternalPB::set_allocated_memo(::std::string* memo) {
  if (memo != NULL) {
    set_has_memo();
  } else {
    clear_has_memo();
  }
  memo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), memo);
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.Contact_InternalPB.memo)
}

// optional string public_key = 5;
inline bool Contact_InternalPB::has_public_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Contact_InternalPB::set_has_public_key() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Contact_InternalPB::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Contact_InternalPB::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key();
}
inline const ::std::string& Contact_InternalPB::public_key() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.Contact_InternalPB.public_key)
  return public_key_.GetNoArena();
}
inline void Contact_InternalPB::set_public_key(const ::std::string& value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.Contact_InternalPB.public_key)
}
#if LANG_CXX11
inline void Contact_InternalPB::set_public_key(::std::string&& value) {
  set_has_public_key();
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.OTDB.Contact_InternalPB.public_key)
}
#endif
inline void Contact_InternalPB::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.Contact_InternalPB.public_key)
}
inline void Contact_InternalPB::set_public_key(const char* value, size_t size) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.Contact_InternalPB.public_key)
}
inline ::std::string* Contact_InternalPB::mutable_public_key() {
  set_has_public_key();
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.Contact_InternalPB.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contact_InternalPB::release_public_key() {
  // @@protoc_insertion_point(field_release:opentxs.OTDB.Contact_InternalPB.public_key)
  clear_has_public_key();
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact_InternalPB::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    set_has_public_key();
  } else {
    clear_has_public_key();
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.Contact_InternalPB.public_key)
}

// repeated .opentxs.OTDB.ContactNym_InternalPB nyms = 6;
inline int Contact_InternalPB::nyms_size() const {
  return nyms_.size();
}
inline void Contact_InternalPB::clear_nyms() {
  nyms_.Clear();
}
inline const ::opentxs::OTDB::ContactNym_InternalPB& Contact_InternalPB::nyms(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.Contact_InternalPB.nyms)
  return nyms_.Get(index);
}
inline ::opentxs::OTDB::ContactNym_InternalPB* Contact_InternalPB::mutable_nyms(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.Contact_InternalPB.nyms)
  return nyms_.Mutable(index);
}
inline ::opentxs::OTDB::ContactNym_InternalPB* Contact_InternalPB::add_nyms() {
  // @@protoc_insertion_point(field_add:opentxs.OTDB.Contact_InternalPB.nyms)
  return nyms_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ContactNym_InternalPB >*
Contact_InternalPB::mutable_nyms() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.OTDB.Contact_InternalPB.nyms)
  return &nyms_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ContactNym_InternalPB >&
Contact_InternalPB::nyms() const {
  // @@protoc_insertion_point(field_list:opentxs.OTDB.Contact_InternalPB.nyms)
  return nyms_;
}

// repeated .opentxs.OTDB.ContactAcct_InternalPB accounts = 7;
inline int Contact_InternalPB::accounts_size() const {
  return accounts_.size();
}
inline void Contact_InternalPB::clear_accounts() {
  accounts_.Clear();
}
inline const ::opentxs::OTDB::ContactAcct_InternalPB& Contact_InternalPB::accounts(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.Contact_InternalPB.accounts)
  return accounts_.Get(index);
}
inline ::opentxs::OTDB::ContactAcct_InternalPB* Contact_InternalPB::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.Contact_InternalPB.accounts)
  return accounts_.Mutable(index);
}
inline ::opentxs::OTDB::ContactAcct_InternalPB* Contact_InternalPB::add_accounts() {
  // @@protoc_insertion_point(field_add:opentxs.OTDB.Contact_InternalPB.accounts)
  return accounts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ContactAcct_InternalPB >*
Contact_InternalPB::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.OTDB.Contact_InternalPB.accounts)
  return &accounts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ContactAcct_InternalPB >&
Contact_InternalPB::accounts() const {
  // @@protoc_insertion_point(field_list:opentxs.OTDB.Contact_InternalPB.accounts)
  return accounts_;
}

// -------------------------------------------------------------------

// AddressBook_InternalPB

// repeated .opentxs.OTDB.Contact_InternalPB contacts = 1;
inline int AddressBook_InternalPB::contacts_size() const {
  return contacts_.size();
}
inline void AddressBook_InternalPB::clear_contacts() {
  contacts_.Clear();
}
inline const ::opentxs::OTDB::Contact_InternalPB& AddressBook_InternalPB::contacts(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.AddressBook_InternalPB.contacts)
  return contacts_.Get(index);
}
inline ::opentxs::OTDB::Contact_InternalPB* AddressBook_InternalPB::mutable_contacts(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.AddressBook_InternalPB.contacts)
  return contacts_.Mutable(index);
}
inline ::opentxs::OTDB::Contact_InternalPB* AddressBook_InternalPB::add_contacts() {
  // @@protoc_insertion_point(field_add:opentxs.OTDB.AddressBook_InternalPB.contacts)
  return contacts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::Contact_InternalPB >*
AddressBook_InternalPB::mutable_contacts() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.OTDB.AddressBook_InternalPB.contacts)
  return &contacts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::Contact_InternalPB >&
AddressBook_InternalPB::contacts() const {
  // @@protoc_insertion_point(field_list:opentxs.OTDB.AddressBook_InternalPB.contacts)
  return contacts_;
}

// -------------------------------------------------------------------

// WalletData_InternalPB

// repeated .opentxs.OTDB.BitcoinServer_InternalPB bitcoin_server = 1;
inline int WalletData_InternalPB::bitcoin_server_size() const {
  return bitcoin_server_.size();
}
inline const ::opentxs::OTDB::BitcoinServer_InternalPB& WalletData_InternalPB::bitcoin_server(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.WalletData_InternalPB.bitcoin_server)
  return bitcoin_server_.Get(index);
}
inline ::opentxs::OTDB::BitcoinServer_InternalPB* WalletData_InternalPB::mutable_bitcoin_server(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.WalletData_InternalPB.bitcoin_server)
  return bitcoin_server_.Mutable(index);
}
inline ::opentxs::OTDB::BitcoinServer_InternalPB* WalletData_InternalPB::add_bitcoin_server() {
  // @@protoc_insertion_point(field_add:opentxs.OTDB.WalletData_InternalPB.bitcoin_server)
  return bitcoin_server_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::BitcoinServer_InternalPB >*
WalletData_InternalPB::mutable_bitcoin_server() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.OTDB.WalletData_InternalPB.bitcoin_server)
  return &bitcoin_server_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::BitcoinServer_InternalPB >&
WalletData_InternalPB::bitcoin_server() const {
  // @@protoc_insertion_point(field_list:opentxs.OTDB.WalletData_InternalPB.bitcoin_server)
  return bitcoin_server_;
}

// repeated .opentxs.OTDB.BitcoinAcct_InternalPB bitcoin_acct = 2;
inline int WalletData_InternalPB::bitcoin_acct_size() const {
  return bitcoin_acct_.size();
}
inline const ::opentxs::OTDB::BitcoinAcct_InternalPB& WalletData_InternalPB::bitcoin_acct(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.WalletData_InternalPB.bitcoin_acct)
  return bitcoin_acct_.Get(index);
}
inline ::opentxs::OTDB::BitcoinAcct_InternalPB* WalletData_InternalPB::mutable_bitcoin_acct(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.WalletData_InternalPB.bitcoin_acct)
  return bitcoin_acct_.Mutable(index);
}
inline ::opentxs::OTDB::BitcoinAcct_InternalPB* WalletData_InternalPB::add_bitcoin_acct() {
  // @@protoc_insertion_point(field_add:opentxs.OTDB.WalletData_InternalPB.bitcoin_acct)
  return bitcoin_acct_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::BitcoinAcct_InternalPB >*
WalletData_InternalPB::mutable_bitcoin_acct() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.OTDB.WalletData_InternalPB.bitcoin_acct)
  return &bitcoin_acct_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::BitcoinAcct_InternalPB >&
WalletData_InternalPB::bitcoin_acct() const {
  // @@protoc_insertion_point(field_list:opentxs.OTDB.WalletData_InternalPB.bitcoin_acct)
  return bitcoin_acct_;
}

// repeated .opentxs.OTDB.RippleServer_InternalPB ripple_server = 3;
inline int WalletData_InternalPB::ripple_server_size() const {
  return ripple_server_.size();
}
inline const ::opentxs::OTDB::RippleServer_InternalPB& WalletData_InternalPB::ripple_server(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.WalletData_InternalPB.ripple_server)
  return ripple_server_.Get(index);
}
inline ::opentxs::OTDB::RippleServer_InternalPB* WalletData_InternalPB::mutable_ripple_server(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.WalletData_InternalPB.ripple_server)
  return ripple_server_.Mutable(index);
}
inline ::opentxs::OTDB::RippleServer_InternalPB* WalletData_InternalPB::add_ripple_server() {
  // @@protoc_insertion_point(field_add:opentxs.OTDB.WalletData_InternalPB.ripple_server)
  return ripple_server_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::RippleServer_InternalPB >*
WalletData_InternalPB::mutable_ripple_server() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.OTDB.WalletData_InternalPB.ripple_server)
  return &ripple_server_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::RippleServer_InternalPB >&
WalletData_InternalPB::ripple_server() const {
  // @@protoc_insertion_point(field_list:opentxs.OTDB.WalletData_InternalPB.ripple_server)
  return ripple_server_;
}

// repeated .opentxs.OTDB.LoomServer_InternalPB loom_server = 4;
inline int WalletData_InternalPB::loom_server_size() const {
  return loom_server_.size();
}
inline const ::opentxs::OTDB::LoomServer_InternalPB& WalletData_InternalPB::loom_server(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.WalletData_InternalPB.loom_server)
  return loom_server_.Get(index);
}
inline ::opentxs::OTDB::LoomServer_InternalPB* WalletData_InternalPB::mutable_loom_server(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.WalletData_InternalPB.loom_server)
  return loom_server_.Mutable(index);
}
inline ::opentxs::OTDB::LoomServer_InternalPB* WalletData_InternalPB::add_loom_server() {
  // @@protoc_insertion_point(field_add:opentxs.OTDB.WalletData_InternalPB.loom_server)
  return loom_server_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::LoomServer_InternalPB >*
WalletData_InternalPB::mutable_loom_server() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.OTDB.WalletData_InternalPB.loom_server)
  return &loom_server_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::LoomServer_InternalPB >&
WalletData_InternalPB::loom_server() const {
  // @@protoc_insertion_point(field_list:opentxs.OTDB.WalletData_InternalPB.loom_server)
  return loom_server_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace OTDB
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Moneychanger_2eproto__INCLUDED
