// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Markets.proto

#include "Markets.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace opentxs {
namespace OTDB {
class MarketData_InternalPBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketData_InternalPB>
      _instance;
} _MarketData_InternalPB_default_instance_;
class MarketList_InternalPBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketList_InternalPB>
      _instance;
} _MarketList_InternalPB_default_instance_;
class OfferDataMarket_InternalPBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OfferDataMarket_InternalPB>
      _instance;
} _OfferDataMarket_InternalPB_default_instance_;
class OfferListMarket_InternalPBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OfferListMarket_InternalPB>
      _instance;
} _OfferListMarket_InternalPB_default_instance_;
class TradeDataMarket_InternalPBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeDataMarket_InternalPB>
      _instance;
} _TradeDataMarket_InternalPB_default_instance_;
class TradeListMarket_InternalPBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeListMarket_InternalPB>
      _instance;
} _TradeListMarket_InternalPB_default_instance_;
class OfferDataNym_InternalPBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OfferDataNym_InternalPB>
      _instance;
} _OfferDataNym_InternalPB_default_instance_;
class OfferListNym_InternalPBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OfferListNym_InternalPB>
      _instance;
} _OfferListNym_InternalPB_default_instance_;
class TradeDataNym_InternalPBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeDataNym_InternalPB>
      _instance;
} _TradeDataNym_InternalPB_default_instance_;
class TradeListNym_InternalPBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeListNym_InternalPB>
      _instance;
} _TradeListNym_InternalPB_default_instance_;
}  // namespace OTDB
}  // namespace opentxs
namespace protobuf_Markets_2eproto {
void InitDefaultsMarketData_InternalPBImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::opentxs::OTDB::_MarketData_InternalPB_default_instance_;
    new (ptr) ::opentxs::OTDB::MarketData_InternalPB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::OTDB::MarketData_InternalPB::InitAsDefaultInstance();
}

void InitDefaultsMarketData_InternalPB() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMarketData_InternalPBImpl);
}

void InitDefaultsMarketList_InternalPBImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Markets_2eproto::InitDefaultsMarketData_InternalPB();
  {
    void* ptr = &::opentxs::OTDB::_MarketList_InternalPB_default_instance_;
    new (ptr) ::opentxs::OTDB::MarketList_InternalPB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::OTDB::MarketList_InternalPB::InitAsDefaultInstance();
}

void InitDefaultsMarketList_InternalPB() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMarketList_InternalPBImpl);
}

void InitDefaultsOfferDataMarket_InternalPBImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::opentxs::OTDB::_OfferDataMarket_InternalPB_default_instance_;
    new (ptr) ::opentxs::OTDB::OfferDataMarket_InternalPB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::OTDB::OfferDataMarket_InternalPB::InitAsDefaultInstance();
}

void InitDefaultsOfferDataMarket_InternalPB() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOfferDataMarket_InternalPBImpl);
}

void InitDefaultsOfferListMarket_InternalPBImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Markets_2eproto::InitDefaultsOfferDataMarket_InternalPB();
  {
    void* ptr = &::opentxs::OTDB::_OfferListMarket_InternalPB_default_instance_;
    new (ptr) ::opentxs::OTDB::OfferListMarket_InternalPB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::OTDB::OfferListMarket_InternalPB::InitAsDefaultInstance();
}

void InitDefaultsOfferListMarket_InternalPB() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOfferListMarket_InternalPBImpl);
}

void InitDefaultsTradeDataMarket_InternalPBImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::opentxs::OTDB::_TradeDataMarket_InternalPB_default_instance_;
    new (ptr) ::opentxs::OTDB::TradeDataMarket_InternalPB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::OTDB::TradeDataMarket_InternalPB::InitAsDefaultInstance();
}

void InitDefaultsTradeDataMarket_InternalPB() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTradeDataMarket_InternalPBImpl);
}

void InitDefaultsTradeListMarket_InternalPBImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Markets_2eproto::InitDefaultsTradeDataMarket_InternalPB();
  {
    void* ptr = &::opentxs::OTDB::_TradeListMarket_InternalPB_default_instance_;
    new (ptr) ::opentxs::OTDB::TradeListMarket_InternalPB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::OTDB::TradeListMarket_InternalPB::InitAsDefaultInstance();
}

void InitDefaultsTradeListMarket_InternalPB() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTradeListMarket_InternalPBImpl);
}

void InitDefaultsOfferDataNym_InternalPBImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::opentxs::OTDB::_OfferDataNym_InternalPB_default_instance_;
    new (ptr) ::opentxs::OTDB::OfferDataNym_InternalPB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::OTDB::OfferDataNym_InternalPB::InitAsDefaultInstance();
}

void InitDefaultsOfferDataNym_InternalPB() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOfferDataNym_InternalPBImpl);
}

void InitDefaultsOfferListNym_InternalPBImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Markets_2eproto::InitDefaultsOfferDataNym_InternalPB();
  {
    void* ptr = &::opentxs::OTDB::_OfferListNym_InternalPB_default_instance_;
    new (ptr) ::opentxs::OTDB::OfferListNym_InternalPB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::OTDB::OfferListNym_InternalPB::InitAsDefaultInstance();
}

void InitDefaultsOfferListNym_InternalPB() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOfferListNym_InternalPBImpl);
}

void InitDefaultsTradeDataNym_InternalPBImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::opentxs::OTDB::_TradeDataNym_InternalPB_default_instance_;
    new (ptr) ::opentxs::OTDB::TradeDataNym_InternalPB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::OTDB::TradeDataNym_InternalPB::InitAsDefaultInstance();
}

void InitDefaultsTradeDataNym_InternalPB() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTradeDataNym_InternalPBImpl);
}

void InitDefaultsTradeListNym_InternalPBImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Markets_2eproto::InitDefaultsTradeDataNym_InternalPB();
  {
    void* ptr = &::opentxs::OTDB::_TradeListNym_InternalPB_default_instance_;
    new (ptr) ::opentxs::OTDB::TradeListNym_InternalPB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::OTDB::TradeListNym_InternalPB::InitAsDefaultInstance();
}

void InitDefaultsTradeListNym_InternalPB() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTradeListNym_InternalPBImpl);
}

}  // namespace protobuf_Markets_2eproto
namespace opentxs {
namespace OTDB {

// ===================================================================

void MarketData_InternalPB::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketData_InternalPB::kGuiLabelFieldNumber;
const int MarketData_InternalPB::kNotaryIdFieldNumber;
const int MarketData_InternalPB::kMarketIdFieldNumber;
const int MarketData_InternalPB::kInstrumentDefinitionIdFieldNumber;
const int MarketData_InternalPB::kCurrencyTypeIdFieldNumber;
const int MarketData_InternalPB::kScaleFieldNumber;
const int MarketData_InternalPB::kTotalAssetsFieldNumber;
const int MarketData_InternalPB::kNumberBidsFieldNumber;
const int MarketData_InternalPB::kNumberAsksFieldNumber;
const int MarketData_InternalPB::kLastSalePriceFieldNumber;
const int MarketData_InternalPB::kCurrentBidFieldNumber;
const int MarketData_InternalPB::kCurrentAskFieldNumber;
const int MarketData_InternalPB::kVolumeTradesFieldNumber;
const int MarketData_InternalPB::kVolumeAssetsFieldNumber;
const int MarketData_InternalPB::kVolumeCurrencyFieldNumber;
const int MarketData_InternalPB::kRecentHighestBidFieldNumber;
const int MarketData_InternalPB::kRecentLowestAskFieldNumber;
const int MarketData_InternalPB::kLastSaleDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketData_InternalPB::MarketData_InternalPB()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Markets_2eproto::InitDefaultsMarketData_InternalPB();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.OTDB.MarketData_InternalPB)
}
MarketData_InternalPB::MarketData_InternalPB(const MarketData_InternalPB& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gui_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gui_label()) {
    gui_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gui_label_);
  }
  notary_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_notary_id()) {
    notary_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notary_id_);
  }
  market_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_market_id()) {
    market_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.market_id_);
  }
  instrument_definition_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_instrument_definition_id()) {
    instrument_definition_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrument_definition_id_);
  }
  currency_type_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_currency_type_id()) {
    currency_type_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_type_id_);
  }
  scale_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_scale()) {
    scale_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scale_);
  }
  total_assets_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_total_assets()) {
    total_assets_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.total_assets_);
  }
  number_bids_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_number_bids()) {
    number_bids_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.number_bids_);
  }
  number_asks_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_number_asks()) {
    number_asks_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.number_asks_);
  }
  last_sale_price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_sale_price()) {
    last_sale_price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_sale_price_);
  }
  current_bid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_current_bid()) {
    current_bid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_bid_);
  }
  current_ask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_current_ask()) {
    current_ask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_ask_);
  }
  volume_trades_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_volume_trades()) {
    volume_trades_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.volume_trades_);
  }
  volume_assets_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_volume_assets()) {
    volume_assets_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.volume_assets_);
  }
  volume_currency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_volume_currency()) {
    volume_currency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.volume_currency_);
  }
  recent_highest_bid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_recent_highest_bid()) {
    recent_highest_bid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recent_highest_bid_);
  }
  recent_lowest_ask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_recent_lowest_ask()) {
    recent_lowest_ask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recent_lowest_ask_);
  }
  last_sale_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_sale_date()) {
    last_sale_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_sale_date_);
  }
  // @@protoc_insertion_point(copy_constructor:opentxs.OTDB.MarketData_InternalPB)
}

void MarketData_InternalPB::SharedCtor() {
  _cached_size_ = 0;
  gui_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notary_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  market_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrument_definition_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_type_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scale_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_assets_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_bids_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_asks_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_sale_price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_bid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_ask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volume_trades_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volume_assets_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volume_currency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recent_highest_bid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recent_lowest_ask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_sale_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MarketData_InternalPB::~MarketData_InternalPB() {
  // @@protoc_insertion_point(destructor:opentxs.OTDB.MarketData_InternalPB)
  SharedDtor();
}

void MarketData_InternalPB::SharedDtor() {
  gui_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notary_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  market_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrument_definition_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_type_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scale_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_assets_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_bids_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_asks_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_sale_price_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_bid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_ask_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volume_trades_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volume_assets_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volume_currency_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recent_highest_bid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recent_lowest_ask_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_sale_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketData_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MarketData_InternalPB& MarketData_InternalPB::default_instance() {
  ::protobuf_Markets_2eproto::InitDefaultsMarketData_InternalPB();
  return *internal_default_instance();
}

MarketData_InternalPB* MarketData_InternalPB::New(::google::protobuf::Arena* arena) const {
  MarketData_InternalPB* n = new MarketData_InternalPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarketData_InternalPB::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.OTDB.MarketData_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!gui_label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gui_label_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!notary_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*notary_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!market_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*market_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!instrument_definition_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*instrument_definition_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!currency_type_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*currency_type_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!scale_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*scale_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!total_assets_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*total_assets_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!number_bids_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*number_bids_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(!number_asks_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*number_asks_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(!last_sale_price_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*last_sale_price_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(!current_bid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*current_bid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(!current_ask_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*current_ask_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(!volume_trades_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*volume_trades_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(!volume_assets_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*volume_assets_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(!volume_currency_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*volume_currency_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(!recent_highest_bid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*recent_highest_bid_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(!recent_lowest_ask_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*recent_lowest_ask_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(!last_sale_date_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*last_sale_date_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketData_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.OTDB.MarketData_InternalPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gui_label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gui_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string notary_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notary_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string market_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_market_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string instrument_definition_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_definition_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string currency_type_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_type_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string scale = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string total_assets = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_total_assets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string number_bids = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number_bids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string number_asks = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number_asks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_sale_price = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_sale_price()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string current_bid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_current_bid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string current_ask = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_current_ask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string volume_trades = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_trades()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string volume_assets = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_assets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string volume_currency = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_currency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string recent_highest_bid = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recent_highest_bid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string recent_lowest_ask = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recent_lowest_ask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_sale_date = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_sale_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.OTDB.MarketData_InternalPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.OTDB.MarketData_InternalPB)
  return false;
#undef DO_
}

void MarketData_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.OTDB.MarketData_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gui_label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gui_label(), output);
  }

  // optional string notary_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->notary_id(), output);
  }

  // optional string market_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->market_id(), output);
  }

  // optional string instrument_definition_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->instrument_definition_id(), output);
  }

  // optional string currency_type_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->currency_type_id(), output);
  }

  // optional string scale = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->scale(), output);
  }

  // optional string total_assets = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->total_assets(), output);
  }

  // optional string number_bids = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->number_bids(), output);
  }

  // optional string number_asks = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->number_asks(), output);
  }

  // optional string last_sale_price = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->last_sale_price(), output);
  }

  // optional string current_bid = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->current_bid(), output);
  }

  // optional string current_ask = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->current_ask(), output);
  }

  // optional string volume_trades = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->volume_trades(), output);
  }

  // optional string volume_assets = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->volume_assets(), output);
  }

  // optional string volume_currency = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->volume_currency(), output);
  }

  // optional string recent_highest_bid = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->recent_highest_bid(), output);
  }

  // optional string recent_lowest_ask = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->recent_lowest_ask(), output);
  }

  // optional string last_sale_date = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->last_sale_date(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.OTDB.MarketData_InternalPB)
}

size_t MarketData_InternalPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.OTDB.MarketData_InternalPB)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string gui_label = 1;
    if (has_gui_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gui_label());
    }

    // optional string notary_id = 2;
    if (has_notary_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notary_id());
    }

    // optional string market_id = 3;
    if (has_market_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->market_id());
    }

    // optional string instrument_definition_id = 4;
    if (has_instrument_definition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument_definition_id());
    }

    // optional string currency_type_id = 5;
    if (has_currency_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency_type_id());
    }

    // optional string scale = 6;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scale());
    }

    // optional string total_assets = 7;
    if (has_total_assets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->total_assets());
    }

    // optional string number_bids = 8;
    if (has_number_bids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->number_bids());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string number_asks = 9;
    if (has_number_asks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->number_asks());
    }

    // optional string last_sale_price = 10;
    if (has_last_sale_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_sale_price());
    }

    // optional string current_bid = 11;
    if (has_current_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->current_bid());
    }

    // optional string current_ask = 12;
    if (has_current_ask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->current_ask());
    }

    // optional string volume_trades = 13;
    if (has_volume_trades()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_trades());
    }

    // optional string volume_assets = 14;
    if (has_volume_assets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_assets());
    }

    // optional string volume_currency = 15;
    if (has_volume_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_currency());
    }

    // optional string recent_highest_bid = 16;
    if (has_recent_highest_bid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recent_highest_bid());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional string recent_lowest_ask = 17;
    if (has_recent_lowest_ask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recent_lowest_ask());
    }

    // optional string last_sale_date = 18;
    if (has_last_sale_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_sale_date());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketData_InternalPB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MarketData_InternalPB*>(&from));
}

void MarketData_InternalPB::MergeFrom(const MarketData_InternalPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.OTDB.MarketData_InternalPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gui_label();
      gui_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gui_label_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_notary_id();
      notary_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notary_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_market_id();
      market_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.market_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_instrument_definition_id();
      instrument_definition_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrument_definition_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_currency_type_id();
      currency_type_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_type_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_scale();
      scale_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scale_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_total_assets();
      total_assets_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.total_assets_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_number_bids();
      number_bids_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.number_bids_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_number_asks();
      number_asks_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.number_asks_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_last_sale_price();
      last_sale_price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_sale_price_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_current_bid();
      current_bid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_bid_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_current_ask();
      current_ask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_ask_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_volume_trades();
      volume_trades_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.volume_trades_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_volume_assets();
      volume_assets_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.volume_assets_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_volume_currency();
      volume_currency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.volume_currency_);
    }
    if (cached_has_bits & 0x00008000u) {
      set_has_recent_highest_bid();
      recent_highest_bid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recent_highest_bid_);
    }
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      set_has_recent_lowest_ask();
      recent_lowest_ask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recent_lowest_ask_);
    }
    if (cached_has_bits & 0x00020000u) {
      set_has_last_sale_date();
      last_sale_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_sale_date_);
    }
  }
}

void MarketData_InternalPB::CopyFrom(const MarketData_InternalPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.OTDB.MarketData_InternalPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketData_InternalPB::IsInitialized() const {
  return true;
}

void MarketData_InternalPB::Swap(MarketData_InternalPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketData_InternalPB::InternalSwap(MarketData_InternalPB* other) {
  using std::swap;
  gui_label_.Swap(&other->gui_label_);
  notary_id_.Swap(&other->notary_id_);
  market_id_.Swap(&other->market_id_);
  instrument_definition_id_.Swap(&other->instrument_definition_id_);
  currency_type_id_.Swap(&other->currency_type_id_);
  scale_.Swap(&other->scale_);
  total_assets_.Swap(&other->total_assets_);
  number_bids_.Swap(&other->number_bids_);
  number_asks_.Swap(&other->number_asks_);
  last_sale_price_.Swap(&other->last_sale_price_);
  current_bid_.Swap(&other->current_bid_);
  current_ask_.Swap(&other->current_ask_);
  volume_trades_.Swap(&other->volume_trades_);
  volume_assets_.Swap(&other->volume_assets_);
  volume_currency_.Swap(&other->volume_currency_);
  recent_highest_bid_.Swap(&other->recent_highest_bid_);
  recent_lowest_ask_.Swap(&other->recent_lowest_ask_);
  last_sale_date_.Swap(&other->last_sale_date_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string MarketData_InternalPB::GetTypeName() const {
  return "opentxs.OTDB.MarketData_InternalPB";
}


// ===================================================================

void MarketList_InternalPB::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketList_InternalPB::kMarketDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketList_InternalPB::MarketList_InternalPB()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Markets_2eproto::InitDefaultsMarketList_InternalPB();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.OTDB.MarketList_InternalPB)
}
MarketList_InternalPB::MarketList_InternalPB(const MarketList_InternalPB& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      market_data_(from.market_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opentxs.OTDB.MarketList_InternalPB)
}

void MarketList_InternalPB::SharedCtor() {
  _cached_size_ = 0;
}

MarketList_InternalPB::~MarketList_InternalPB() {
  // @@protoc_insertion_point(destructor:opentxs.OTDB.MarketList_InternalPB)
  SharedDtor();
}

void MarketList_InternalPB::SharedDtor() {
}

void MarketList_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MarketList_InternalPB& MarketList_InternalPB::default_instance() {
  ::protobuf_Markets_2eproto::InitDefaultsMarketList_InternalPB();
  return *internal_default_instance();
}

MarketList_InternalPB* MarketList_InternalPB::New(::google::protobuf::Arena* arena) const {
  MarketList_InternalPB* n = new MarketList_InternalPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarketList_InternalPB::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.OTDB.MarketList_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketList_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.OTDB.MarketList_InternalPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .opentxs.OTDB.MarketData_InternalPB market_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_market_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.OTDB.MarketList_InternalPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.OTDB.MarketList_InternalPB)
  return false;
#undef DO_
}

void MarketList_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.OTDB.MarketList_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentxs.OTDB.MarketData_InternalPB market_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->market_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->market_data(static_cast<int>(i)), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.OTDB.MarketList_InternalPB)
}

size_t MarketList_InternalPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.OTDB.MarketList_InternalPB)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .opentxs.OTDB.MarketData_InternalPB market_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->market_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->market_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketList_InternalPB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MarketList_InternalPB*>(&from));
}

void MarketList_InternalPB::MergeFrom(const MarketList_InternalPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.OTDB.MarketList_InternalPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  market_data_.MergeFrom(from.market_data_);
}

void MarketList_InternalPB::CopyFrom(const MarketList_InternalPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.OTDB.MarketList_InternalPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketList_InternalPB::IsInitialized() const {
  return true;
}

void MarketList_InternalPB::Swap(MarketList_InternalPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketList_InternalPB::InternalSwap(MarketList_InternalPB* other) {
  using std::swap;
  market_data_.InternalSwap(&other->market_data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string MarketList_InternalPB::GetTypeName() const {
  return "opentxs.OTDB.MarketList_InternalPB";
}


// ===================================================================

void OfferDataMarket_InternalPB::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OfferDataMarket_InternalPB::kGuiLabelFieldNumber;
const int OfferDataMarket_InternalPB::kTransactionIdFieldNumber;
const int OfferDataMarket_InternalPB::kPricePerScaleFieldNumber;
const int OfferDataMarket_InternalPB::kAvailableAssetsFieldNumber;
const int OfferDataMarket_InternalPB::kMinimumIncrementFieldNumber;
const int OfferDataMarket_InternalPB::kDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OfferDataMarket_InternalPB::OfferDataMarket_InternalPB()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Markets_2eproto::InitDefaultsOfferDataMarket_InternalPB();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.OTDB.OfferDataMarket_InternalPB)
}
OfferDataMarket_InternalPB::OfferDataMarket_InternalPB(const OfferDataMarket_InternalPB& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gui_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gui_label()) {
    gui_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gui_label_);
  }
  transaction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_transaction_id()) {
    transaction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_id_);
  }
  price_per_scale_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_price_per_scale()) {
    price_per_scale_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_per_scale_);
  }
  available_assets_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_available_assets()) {
    available_assets_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.available_assets_);
  }
  minimum_increment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_minimum_increment()) {
    minimum_increment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.minimum_increment_);
  }
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_date()) {
    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  // @@protoc_insertion_point(copy_constructor:opentxs.OTDB.OfferDataMarket_InternalPB)
}

void OfferDataMarket_InternalPB::SharedCtor() {
  _cached_size_ = 0;
  gui_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_per_scale_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  available_assets_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  minimum_increment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OfferDataMarket_InternalPB::~OfferDataMarket_InternalPB() {
  // @@protoc_insertion_point(destructor:opentxs.OTDB.OfferDataMarket_InternalPB)
  SharedDtor();
}

void OfferDataMarket_InternalPB::SharedDtor() {
  gui_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_per_scale_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  available_assets_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  minimum_increment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OfferDataMarket_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfferDataMarket_InternalPB& OfferDataMarket_InternalPB::default_instance() {
  ::protobuf_Markets_2eproto::InitDefaultsOfferDataMarket_InternalPB();
  return *internal_default_instance();
}

OfferDataMarket_InternalPB* OfferDataMarket_InternalPB::New(::google::protobuf::Arena* arena) const {
  OfferDataMarket_InternalPB* n = new OfferDataMarket_InternalPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OfferDataMarket_InternalPB::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.OTDB.OfferDataMarket_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!gui_label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gui_label_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!transaction_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*transaction_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!price_per_scale_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*price_per_scale_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!available_assets_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*available_assets_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!minimum_increment_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*minimum_increment_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!date_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*date_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OfferDataMarket_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.OTDB.OfferDataMarket_InternalPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gui_label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gui_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string transaction_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transaction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string price_per_scale = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price_per_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string available_assets = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_available_assets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string minimum_increment = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_minimum_increment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string date = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.OTDB.OfferDataMarket_InternalPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.OTDB.OfferDataMarket_InternalPB)
  return false;
#undef DO_
}

void OfferDataMarket_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.OTDB.OfferDataMarket_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gui_label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gui_label(), output);
  }

  // optional string transaction_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->transaction_id(), output);
  }

  // optional string price_per_scale = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->price_per_scale(), output);
  }

  // optional string available_assets = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->available_assets(), output);
  }

  // optional string minimum_increment = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->minimum_increment(), output);
  }

  // optional string date = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->date(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.OTDB.OfferDataMarket_InternalPB)
}

size_t OfferDataMarket_InternalPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.OTDB.OfferDataMarket_InternalPB)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional string gui_label = 1;
    if (has_gui_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gui_label());
    }

    // optional string transaction_id = 2;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transaction_id());
    }

    // optional string price_per_scale = 3;
    if (has_price_per_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->price_per_scale());
    }

    // optional string available_assets = 4;
    if (has_available_assets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->available_assets());
    }

    // optional string minimum_increment = 5;
    if (has_minimum_increment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->minimum_increment());
    }

    // optional string date = 6;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferDataMarket_InternalPB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfferDataMarket_InternalPB*>(&from));
}

void OfferDataMarket_InternalPB::MergeFrom(const OfferDataMarket_InternalPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.OTDB.OfferDataMarket_InternalPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gui_label();
      gui_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gui_label_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_transaction_id();
      transaction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_price_per_scale();
      price_per_scale_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_per_scale_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_available_assets();
      available_assets_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.available_assets_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_minimum_increment();
      minimum_increment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.minimum_increment_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_date();
      date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
    }
  }
}

void OfferDataMarket_InternalPB::CopyFrom(const OfferDataMarket_InternalPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.OTDB.OfferDataMarket_InternalPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferDataMarket_InternalPB::IsInitialized() const {
  return true;
}

void OfferDataMarket_InternalPB::Swap(OfferDataMarket_InternalPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OfferDataMarket_InternalPB::InternalSwap(OfferDataMarket_InternalPB* other) {
  using std::swap;
  gui_label_.Swap(&other->gui_label_);
  transaction_id_.Swap(&other->transaction_id_);
  price_per_scale_.Swap(&other->price_per_scale_);
  available_assets_.Swap(&other->available_assets_);
  minimum_increment_.Swap(&other->minimum_increment_);
  date_.Swap(&other->date_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string OfferDataMarket_InternalPB::GetTypeName() const {
  return "opentxs.OTDB.OfferDataMarket_InternalPB";
}


// ===================================================================

void OfferListMarket_InternalPB::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OfferListMarket_InternalPB::kBidsFieldNumber;
const int OfferListMarket_InternalPB::kAsksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OfferListMarket_InternalPB::OfferListMarket_InternalPB()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Markets_2eproto::InitDefaultsOfferListMarket_InternalPB();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.OTDB.OfferListMarket_InternalPB)
}
OfferListMarket_InternalPB::OfferListMarket_InternalPB(const OfferListMarket_InternalPB& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      bids_(from.bids_),
      asks_(from.asks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opentxs.OTDB.OfferListMarket_InternalPB)
}

void OfferListMarket_InternalPB::SharedCtor() {
  _cached_size_ = 0;
}

OfferListMarket_InternalPB::~OfferListMarket_InternalPB() {
  // @@protoc_insertion_point(destructor:opentxs.OTDB.OfferListMarket_InternalPB)
  SharedDtor();
}

void OfferListMarket_InternalPB::SharedDtor() {
}

void OfferListMarket_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfferListMarket_InternalPB& OfferListMarket_InternalPB::default_instance() {
  ::protobuf_Markets_2eproto::InitDefaultsOfferListMarket_InternalPB();
  return *internal_default_instance();
}

OfferListMarket_InternalPB* OfferListMarket_InternalPB::New(::google::protobuf::Arena* arena) const {
  OfferListMarket_InternalPB* n = new OfferListMarket_InternalPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OfferListMarket_InternalPB::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.OTDB.OfferListMarket_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bids_.Clear();
  asks_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OfferListMarket_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.OTDB.OfferListMarket_InternalPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .opentxs.OTDB.OfferDataMarket_InternalPB bids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_bids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .opentxs.OTDB.OfferDataMarket_InternalPB asks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_asks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.OTDB.OfferListMarket_InternalPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.OTDB.OfferListMarket_InternalPB)
  return false;
#undef DO_
}

void OfferListMarket_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.OTDB.OfferListMarket_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentxs.OTDB.OfferDataMarket_InternalPB bids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->bids(static_cast<int>(i)), output);
  }

  // repeated .opentxs.OTDB.OfferDataMarket_InternalPB asks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->asks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->asks(static_cast<int>(i)), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.OTDB.OfferListMarket_InternalPB)
}

size_t OfferListMarket_InternalPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.OTDB.OfferListMarket_InternalPB)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .opentxs.OTDB.OfferDataMarket_InternalPB bids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->bids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bids(static_cast<int>(i)));
    }
  }

  // repeated .opentxs.OTDB.OfferDataMarket_InternalPB asks = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->asks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->asks(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferListMarket_InternalPB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfferListMarket_InternalPB*>(&from));
}

void OfferListMarket_InternalPB::MergeFrom(const OfferListMarket_InternalPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.OTDB.OfferListMarket_InternalPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bids_.MergeFrom(from.bids_);
  asks_.MergeFrom(from.asks_);
}

void OfferListMarket_InternalPB::CopyFrom(const OfferListMarket_InternalPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.OTDB.OfferListMarket_InternalPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferListMarket_InternalPB::IsInitialized() const {
  return true;
}

void OfferListMarket_InternalPB::Swap(OfferListMarket_InternalPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OfferListMarket_InternalPB::InternalSwap(OfferListMarket_InternalPB* other) {
  using std::swap;
  bids_.InternalSwap(&other->bids_);
  asks_.InternalSwap(&other->asks_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string OfferListMarket_InternalPB::GetTypeName() const {
  return "opentxs.OTDB.OfferListMarket_InternalPB";
}


// ===================================================================

void TradeDataMarket_InternalPB::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeDataMarket_InternalPB::kGuiLabelFieldNumber;
const int TradeDataMarket_InternalPB::kTransactionIdFieldNumber;
const int TradeDataMarket_InternalPB::kDateFieldNumber;
const int TradeDataMarket_InternalPB::kPriceFieldNumber;
const int TradeDataMarket_InternalPB::kAmountSoldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeDataMarket_InternalPB::TradeDataMarket_InternalPB()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Markets_2eproto::InitDefaultsTradeDataMarket_InternalPB();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.OTDB.TradeDataMarket_InternalPB)
}
TradeDataMarket_InternalPB::TradeDataMarket_InternalPB(const TradeDataMarket_InternalPB& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gui_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gui_label()) {
    gui_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gui_label_);
  }
  transaction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_transaction_id()) {
    transaction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_id_);
  }
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_date()) {
    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_price()) {
    price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_);
  }
  amount_sold_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_amount_sold()) {
    amount_sold_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_sold_);
  }
  // @@protoc_insertion_point(copy_constructor:opentxs.OTDB.TradeDataMarket_InternalPB)
}

void TradeDataMarket_InternalPB::SharedCtor() {
  _cached_size_ = 0;
  gui_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_sold_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TradeDataMarket_InternalPB::~TradeDataMarket_InternalPB() {
  // @@protoc_insertion_point(destructor:opentxs.OTDB.TradeDataMarket_InternalPB)
  SharedDtor();
}

void TradeDataMarket_InternalPB::SharedDtor() {
  gui_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_sold_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TradeDataMarket_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TradeDataMarket_InternalPB& TradeDataMarket_InternalPB::default_instance() {
  ::protobuf_Markets_2eproto::InitDefaultsTradeDataMarket_InternalPB();
  return *internal_default_instance();
}

TradeDataMarket_InternalPB* TradeDataMarket_InternalPB::New(::google::protobuf::Arena* arena) const {
  TradeDataMarket_InternalPB* n = new TradeDataMarket_InternalPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TradeDataMarket_InternalPB::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.OTDB.TradeDataMarket_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!gui_label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gui_label_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!transaction_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*transaction_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!date_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*date_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!price_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*price_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!amount_sold_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*amount_sold_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TradeDataMarket_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.OTDB.TradeDataMarket_InternalPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gui_label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gui_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string transaction_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transaction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string date = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string amount_sold = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amount_sold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.OTDB.TradeDataMarket_InternalPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.OTDB.TradeDataMarket_InternalPB)
  return false;
#undef DO_
}

void TradeDataMarket_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.OTDB.TradeDataMarket_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gui_label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gui_label(), output);
  }

  // optional string transaction_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->transaction_id(), output);
  }

  // optional string date = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->date(), output);
  }

  // optional string price = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->price(), output);
  }

  // optional string amount_sold = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->amount_sold(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.OTDB.TradeDataMarket_InternalPB)
}

size_t TradeDataMarket_InternalPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.OTDB.TradeDataMarket_InternalPB)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional string gui_label = 1;
    if (has_gui_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gui_label());
    }

    // optional string transaction_id = 2;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transaction_id());
    }

    // optional string date = 3;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional string price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->price());
    }

    // optional string amount_sold = 5;
    if (has_amount_sold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->amount_sold());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeDataMarket_InternalPB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TradeDataMarket_InternalPB*>(&from));
}

void TradeDataMarket_InternalPB::MergeFrom(const TradeDataMarket_InternalPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.OTDB.TradeDataMarket_InternalPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gui_label();
      gui_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gui_label_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_transaction_id();
      transaction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_date();
      date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_price();
      price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_amount_sold();
      amount_sold_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_sold_);
    }
  }
}

void TradeDataMarket_InternalPB::CopyFrom(const TradeDataMarket_InternalPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.OTDB.TradeDataMarket_InternalPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeDataMarket_InternalPB::IsInitialized() const {
  return true;
}

void TradeDataMarket_InternalPB::Swap(TradeDataMarket_InternalPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradeDataMarket_InternalPB::InternalSwap(TradeDataMarket_InternalPB* other) {
  using std::swap;
  gui_label_.Swap(&other->gui_label_);
  transaction_id_.Swap(&other->transaction_id_);
  date_.Swap(&other->date_);
  price_.Swap(&other->price_);
  amount_sold_.Swap(&other->amount_sold_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string TradeDataMarket_InternalPB::GetTypeName() const {
  return "opentxs.OTDB.TradeDataMarket_InternalPB";
}


// ===================================================================

void TradeListMarket_InternalPB::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeListMarket_InternalPB::kTradesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeListMarket_InternalPB::TradeListMarket_InternalPB()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Markets_2eproto::InitDefaultsTradeListMarket_InternalPB();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.OTDB.TradeListMarket_InternalPB)
}
TradeListMarket_InternalPB::TradeListMarket_InternalPB(const TradeListMarket_InternalPB& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opentxs.OTDB.TradeListMarket_InternalPB)
}

void TradeListMarket_InternalPB::SharedCtor() {
  _cached_size_ = 0;
}

TradeListMarket_InternalPB::~TradeListMarket_InternalPB() {
  // @@protoc_insertion_point(destructor:opentxs.OTDB.TradeListMarket_InternalPB)
  SharedDtor();
}

void TradeListMarket_InternalPB::SharedDtor() {
}

void TradeListMarket_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TradeListMarket_InternalPB& TradeListMarket_InternalPB::default_instance() {
  ::protobuf_Markets_2eproto::InitDefaultsTradeListMarket_InternalPB();
  return *internal_default_instance();
}

TradeListMarket_InternalPB* TradeListMarket_InternalPB::New(::google::protobuf::Arena* arena) const {
  TradeListMarket_InternalPB* n = new TradeListMarket_InternalPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TradeListMarket_InternalPB::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.OTDB.TradeListMarket_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TradeListMarket_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.OTDB.TradeListMarket_InternalPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .opentxs.OTDB.TradeDataMarket_InternalPB trades = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_trades()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.OTDB.TradeListMarket_InternalPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.OTDB.TradeListMarket_InternalPB)
  return false;
#undef DO_
}

void TradeListMarket_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.OTDB.TradeListMarket_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentxs.OTDB.TradeDataMarket_InternalPB trades = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trades_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->trades(static_cast<int>(i)), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.OTDB.TradeListMarket_InternalPB)
}

size_t TradeListMarket_InternalPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.OTDB.TradeListMarket_InternalPB)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .opentxs.OTDB.TradeDataMarket_InternalPB trades = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->trades_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trades(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeListMarket_InternalPB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TradeListMarket_InternalPB*>(&from));
}

void TradeListMarket_InternalPB::MergeFrom(const TradeListMarket_InternalPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.OTDB.TradeListMarket_InternalPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
}

void TradeListMarket_InternalPB::CopyFrom(const TradeListMarket_InternalPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.OTDB.TradeListMarket_InternalPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeListMarket_InternalPB::IsInitialized() const {
  return true;
}

void TradeListMarket_InternalPB::Swap(TradeListMarket_InternalPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradeListMarket_InternalPB::InternalSwap(TradeListMarket_InternalPB* other) {
  using std::swap;
  trades_.InternalSwap(&other->trades_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string TradeListMarket_InternalPB::GetTypeName() const {
  return "opentxs.OTDB.TradeListMarket_InternalPB";
}


// ===================================================================

void OfferDataNym_InternalPB::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OfferDataNym_InternalPB::kGuiLabelFieldNumber;
const int OfferDataNym_InternalPB::kValidFromFieldNumber;
const int OfferDataNym_InternalPB::kValidToFieldNumber;
const int OfferDataNym_InternalPB::kNotaryIdFieldNumber;
const int OfferDataNym_InternalPB::kInstrumentDefinitionIdFieldNumber;
const int OfferDataNym_InternalPB::kAssetAcctIdFieldNumber;
const int OfferDataNym_InternalPB::kCurrencyTypeIdFieldNumber;
const int OfferDataNym_InternalPB::kCurrencyAcctIdFieldNumber;
const int OfferDataNym_InternalPB::kSellingFieldNumber;
const int OfferDataNym_InternalPB::kScaleFieldNumber;
const int OfferDataNym_InternalPB::kPricePerScaleFieldNumber;
const int OfferDataNym_InternalPB::kTransactionIdFieldNumber;
const int OfferDataNym_InternalPB::kTotalAssetsFieldNumber;
const int OfferDataNym_InternalPB::kFinishedSoFarFieldNumber;
const int OfferDataNym_InternalPB::kMinimumIncrementFieldNumber;
const int OfferDataNym_InternalPB::kStopSignFieldNumber;
const int OfferDataNym_InternalPB::kStopPriceFieldNumber;
const int OfferDataNym_InternalPB::kDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OfferDataNym_InternalPB::OfferDataNym_InternalPB()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Markets_2eproto::InitDefaultsOfferDataNym_InternalPB();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.OTDB.OfferDataNym_InternalPB)
}
OfferDataNym_InternalPB::OfferDataNym_InternalPB(const OfferDataNym_InternalPB& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gui_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gui_label()) {
    gui_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gui_label_);
  }
  valid_from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_valid_from()) {
    valid_from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.valid_from_);
  }
  valid_to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_valid_to()) {
    valid_to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.valid_to_);
  }
  notary_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_notary_id()) {
    notary_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notary_id_);
  }
  instrument_definition_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_instrument_definition_id()) {
    instrument_definition_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrument_definition_id_);
  }
  asset_acct_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_asset_acct_id()) {
    asset_acct_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_acct_id_);
  }
  currency_type_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_currency_type_id()) {
    currency_type_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_type_id_);
  }
  currency_acct_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_currency_acct_id()) {
    currency_acct_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_acct_id_);
  }
  scale_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_scale()) {
    scale_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scale_);
  }
  price_per_scale_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_price_per_scale()) {
    price_per_scale_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_per_scale_);
  }
  transaction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_transaction_id()) {
    transaction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_id_);
  }
  total_assets_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_total_assets()) {
    total_assets_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.total_assets_);
  }
  finished_so_far_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_finished_so_far()) {
    finished_so_far_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.finished_so_far_);
  }
  minimum_increment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_minimum_increment()) {
    minimum_increment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.minimum_increment_);
  }
  stop_sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stop_sign()) {
    stop_sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stop_sign_);
  }
  stop_price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stop_price()) {
    stop_price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stop_price_);
  }
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_date()) {
    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  selling_ = from.selling_;
  // @@protoc_insertion_point(copy_constructor:opentxs.OTDB.OfferDataNym_InternalPB)
}

void OfferDataNym_InternalPB::SharedCtor() {
  _cached_size_ = 0;
  gui_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  valid_from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  valid_to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notary_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrument_definition_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_acct_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_type_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_acct_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scale_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_per_scale_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_assets_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  finished_so_far_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  minimum_increment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stop_sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stop_price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  selling_ = false;
}

OfferDataNym_InternalPB::~OfferDataNym_InternalPB() {
  // @@protoc_insertion_point(destructor:opentxs.OTDB.OfferDataNym_InternalPB)
  SharedDtor();
}

void OfferDataNym_InternalPB::SharedDtor() {
  gui_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  valid_from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  valid_to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notary_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrument_definition_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_acct_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_type_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_acct_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scale_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_per_scale_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_assets_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  finished_so_far_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  minimum_increment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stop_sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stop_price_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OfferDataNym_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfferDataNym_InternalPB& OfferDataNym_InternalPB::default_instance() {
  ::protobuf_Markets_2eproto::InitDefaultsOfferDataNym_InternalPB();
  return *internal_default_instance();
}

OfferDataNym_InternalPB* OfferDataNym_InternalPB::New(::google::protobuf::Arena* arena) const {
  OfferDataNym_InternalPB* n = new OfferDataNym_InternalPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OfferDataNym_InternalPB::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.OTDB.OfferDataNym_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!gui_label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gui_label_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!valid_from_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*valid_from_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!valid_to_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*valid_to_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!notary_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*notary_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!instrument_definition_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*instrument_definition_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!asset_acct_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*asset_acct_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!currency_type_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*currency_type_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!currency_acct_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*currency_acct_id_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(!scale_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*scale_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(!price_per_scale_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*price_per_scale_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(!transaction_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*transaction_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(!total_assets_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*total_assets_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(!finished_so_far_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*finished_so_far_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(!minimum_increment_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*minimum_increment_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(!stop_sign_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*stop_sign_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(!stop_price_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*stop_price_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    GOOGLE_DCHECK(!date_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*date_.UnsafeRawStringPointer())->clear();
  }
  selling_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OfferDataNym_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.OTDB.OfferDataNym_InternalPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gui_label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gui_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string valid_from = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_valid_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string valid_to = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_valid_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string notary_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notary_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string instrument_definition_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_definition_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string asset_acct_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset_acct_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string currency_type_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_type_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string currency_acct_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_acct_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool selling = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_selling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string scale = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string price_per_scale = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price_per_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string transaction_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transaction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string total_assets = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_total_assets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string finished_so_far = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_finished_so_far()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string minimum_increment = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_minimum_increment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stop_sign = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stop_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stop_price = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stop_price()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string date = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.OTDB.OfferDataNym_InternalPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.OTDB.OfferDataNym_InternalPB)
  return false;
#undef DO_
}

void OfferDataNym_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.OTDB.OfferDataNym_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gui_label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gui_label(), output);
  }

  // optional string valid_from = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->valid_from(), output);
  }

  // optional string valid_to = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->valid_to(), output);
  }

  // optional string notary_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->notary_id(), output);
  }

  // optional string instrument_definition_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->instrument_definition_id(), output);
  }

  // optional string asset_acct_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->asset_acct_id(), output);
  }

  // optional string currency_type_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->currency_type_id(), output);
  }

  // optional string currency_acct_id = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->currency_acct_id(), output);
  }

  // optional bool selling = 9;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->selling(), output);
  }

  // optional string scale = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->scale(), output);
  }

  // optional string price_per_scale = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->price_per_scale(), output);
  }

  // optional string transaction_id = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->transaction_id(), output);
  }

  // optional string total_assets = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->total_assets(), output);
  }

  // optional string finished_so_far = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->finished_so_far(), output);
  }

  // optional string minimum_increment = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->minimum_increment(), output);
  }

  // optional string stop_sign = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->stop_sign(), output);
  }

  // optional string stop_price = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->stop_price(), output);
  }

  // optional string date = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->date(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.OTDB.OfferDataNym_InternalPB)
}

size_t OfferDataNym_InternalPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.OTDB.OfferDataNym_InternalPB)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string gui_label = 1;
    if (has_gui_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gui_label());
    }

    // optional string valid_from = 2;
    if (has_valid_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->valid_from());
    }

    // optional string valid_to = 3;
    if (has_valid_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->valid_to());
    }

    // optional string notary_id = 4;
    if (has_notary_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notary_id());
    }

    // optional string instrument_definition_id = 5;
    if (has_instrument_definition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument_definition_id());
    }

    // optional string asset_acct_id = 6;
    if (has_asset_acct_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->asset_acct_id());
    }

    // optional string currency_type_id = 7;
    if (has_currency_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency_type_id());
    }

    // optional string currency_acct_id = 8;
    if (has_currency_acct_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency_acct_id());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string scale = 10;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scale());
    }

    // optional string price_per_scale = 11;
    if (has_price_per_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->price_per_scale());
    }

    // optional string transaction_id = 12;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transaction_id());
    }

    // optional string total_assets = 13;
    if (has_total_assets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->total_assets());
    }

    // optional string finished_so_far = 14;
    if (has_finished_so_far()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->finished_so_far());
    }

    // optional string minimum_increment = 15;
    if (has_minimum_increment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->minimum_increment());
    }

    // optional string stop_sign = 16;
    if (has_stop_sign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stop_sign());
    }

    // optional string stop_price = 17;
    if (has_stop_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stop_price());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional string date = 18;
    if (has_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional bool selling = 9;
    if (has_selling()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferDataNym_InternalPB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfferDataNym_InternalPB*>(&from));
}

void OfferDataNym_InternalPB::MergeFrom(const OfferDataNym_InternalPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.OTDB.OfferDataNym_InternalPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gui_label();
      gui_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gui_label_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_valid_from();
      valid_from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.valid_from_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_valid_to();
      valid_to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.valid_to_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_notary_id();
      notary_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notary_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_instrument_definition_id();
      instrument_definition_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrument_definition_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_asset_acct_id();
      asset_acct_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_acct_id_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_currency_type_id();
      currency_type_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_type_id_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_currency_acct_id();
      currency_acct_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_acct_id_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_scale();
      scale_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scale_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_price_per_scale();
      price_per_scale_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_per_scale_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_transaction_id();
      transaction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_id_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_total_assets();
      total_assets_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.total_assets_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_finished_so_far();
      finished_so_far_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.finished_so_far_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_minimum_increment();
      minimum_increment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.minimum_increment_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_stop_sign();
      stop_sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stop_sign_);
    }
    if (cached_has_bits & 0x00008000u) {
      set_has_stop_price();
      stop_price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stop_price_);
    }
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      set_has_date();
      date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
    }
    if (cached_has_bits & 0x00020000u) {
      selling_ = from.selling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OfferDataNym_InternalPB::CopyFrom(const OfferDataNym_InternalPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.OTDB.OfferDataNym_InternalPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferDataNym_InternalPB::IsInitialized() const {
  return true;
}

void OfferDataNym_InternalPB::Swap(OfferDataNym_InternalPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OfferDataNym_InternalPB::InternalSwap(OfferDataNym_InternalPB* other) {
  using std::swap;
  gui_label_.Swap(&other->gui_label_);
  valid_from_.Swap(&other->valid_from_);
  valid_to_.Swap(&other->valid_to_);
  notary_id_.Swap(&other->notary_id_);
  instrument_definition_id_.Swap(&other->instrument_definition_id_);
  asset_acct_id_.Swap(&other->asset_acct_id_);
  currency_type_id_.Swap(&other->currency_type_id_);
  currency_acct_id_.Swap(&other->currency_acct_id_);
  scale_.Swap(&other->scale_);
  price_per_scale_.Swap(&other->price_per_scale_);
  transaction_id_.Swap(&other->transaction_id_);
  total_assets_.Swap(&other->total_assets_);
  finished_so_far_.Swap(&other->finished_so_far_);
  minimum_increment_.Swap(&other->minimum_increment_);
  stop_sign_.Swap(&other->stop_sign_);
  stop_price_.Swap(&other->stop_price_);
  date_.Swap(&other->date_);
  swap(selling_, other->selling_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string OfferDataNym_InternalPB::GetTypeName() const {
  return "opentxs.OTDB.OfferDataNym_InternalPB";
}


// ===================================================================

void OfferListNym_InternalPB::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OfferListNym_InternalPB::kOffersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OfferListNym_InternalPB::OfferListNym_InternalPB()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Markets_2eproto::InitDefaultsOfferListNym_InternalPB();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.OTDB.OfferListNym_InternalPB)
}
OfferListNym_InternalPB::OfferListNym_InternalPB(const OfferListNym_InternalPB& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      offers_(from.offers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opentxs.OTDB.OfferListNym_InternalPB)
}

void OfferListNym_InternalPB::SharedCtor() {
  _cached_size_ = 0;
}

OfferListNym_InternalPB::~OfferListNym_InternalPB() {
  // @@protoc_insertion_point(destructor:opentxs.OTDB.OfferListNym_InternalPB)
  SharedDtor();
}

void OfferListNym_InternalPB::SharedDtor() {
}

void OfferListNym_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfferListNym_InternalPB& OfferListNym_InternalPB::default_instance() {
  ::protobuf_Markets_2eproto::InitDefaultsOfferListNym_InternalPB();
  return *internal_default_instance();
}

OfferListNym_InternalPB* OfferListNym_InternalPB::New(::google::protobuf::Arena* arena) const {
  OfferListNym_InternalPB* n = new OfferListNym_InternalPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OfferListNym_InternalPB::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.OTDB.OfferListNym_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  offers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OfferListNym_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.OTDB.OfferListNym_InternalPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .opentxs.OTDB.OfferDataNym_InternalPB offers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_offers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.OTDB.OfferListNym_InternalPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.OTDB.OfferListNym_InternalPB)
  return false;
#undef DO_
}

void OfferListNym_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.OTDB.OfferListNym_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentxs.OTDB.OfferDataNym_InternalPB offers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->offers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->offers(static_cast<int>(i)), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.OTDB.OfferListNym_InternalPB)
}

size_t OfferListNym_InternalPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.OTDB.OfferListNym_InternalPB)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .opentxs.OTDB.OfferDataNym_InternalPB offers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->offers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->offers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferListNym_InternalPB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfferListNym_InternalPB*>(&from));
}

void OfferListNym_InternalPB::MergeFrom(const OfferListNym_InternalPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.OTDB.OfferListNym_InternalPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  offers_.MergeFrom(from.offers_);
}

void OfferListNym_InternalPB::CopyFrom(const OfferListNym_InternalPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.OTDB.OfferListNym_InternalPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferListNym_InternalPB::IsInitialized() const {
  return true;
}

void OfferListNym_InternalPB::Swap(OfferListNym_InternalPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OfferListNym_InternalPB::InternalSwap(OfferListNym_InternalPB* other) {
  using std::swap;
  offers_.InternalSwap(&other->offers_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string OfferListNym_InternalPB::GetTypeName() const {
  return "opentxs.OTDB.OfferListNym_InternalPB";
}


// ===================================================================

void TradeDataNym_InternalPB::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeDataNym_InternalPB::kGuiLabelFieldNumber;
const int TradeDataNym_InternalPB::kCompletedCountFieldNumber;
const int TradeDataNym_InternalPB::kDateFieldNumber;
const int TradeDataNym_InternalPB::kPriceFieldNumber;
const int TradeDataNym_InternalPB::kAmountSoldFieldNumber;
const int TradeDataNym_InternalPB::kTransactionIdFieldNumber;
const int TradeDataNym_InternalPB::kUpdatedIdFieldNumber;
const int TradeDataNym_InternalPB::kOfferPriceFieldNumber;
const int TradeDataNym_InternalPB::kFinishedSoFarFieldNumber;
const int TradeDataNym_InternalPB::kInstrumentDefinitionIdFieldNumber;
const int TradeDataNym_InternalPB::kCurrencyIdFieldNumber;
const int TradeDataNym_InternalPB::kCurrencyPaidFieldNumber;
const int TradeDataNym_InternalPB::kAssetAcctIdFieldNumber;
const int TradeDataNym_InternalPB::kCurrencyAcctIdFieldNumber;
const int TradeDataNym_InternalPB::kScaleFieldNumber;
const int TradeDataNym_InternalPB::kIsBidFieldNumber;
const int TradeDataNym_InternalPB::kAssetReceiptFieldNumber;
const int TradeDataNym_InternalPB::kCurrencyReceiptFieldNumber;
const int TradeDataNym_InternalPB::kFinalReceiptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeDataNym_InternalPB::TradeDataNym_InternalPB()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Markets_2eproto::InitDefaultsTradeDataNym_InternalPB();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.OTDB.TradeDataNym_InternalPB)
}
TradeDataNym_InternalPB::TradeDataNym_InternalPB(const TradeDataNym_InternalPB& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gui_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gui_label()) {
    gui_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gui_label_);
  }
  completed_count_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_completed_count()) {
    completed_count_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.completed_count_);
  }
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_date()) {
    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_price()) {
    price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_);
  }
  amount_sold_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_amount_sold()) {
    amount_sold_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_sold_);
  }
  transaction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_transaction_id()) {
    transaction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_id_);
  }
  updated_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_updated_id()) {
    updated_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.updated_id_);
  }
  offer_price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_offer_price()) {
    offer_price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.offer_price_);
  }
  finished_so_far_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_finished_so_far()) {
    finished_so_far_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.finished_so_far_);
  }
  instrument_definition_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_instrument_definition_id()) {
    instrument_definition_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrument_definition_id_);
  }
  currency_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_currency_id()) {
    currency_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_id_);
  }
  currency_paid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_currency_paid()) {
    currency_paid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_paid_);
  }
  asset_acct_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_asset_acct_id()) {
    asset_acct_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_acct_id_);
  }
  currency_acct_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_currency_acct_id()) {
    currency_acct_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_acct_id_);
  }
  scale_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_scale()) {
    scale_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scale_);
  }
  asset_receipt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_asset_receipt()) {
    asset_receipt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_receipt_);
  }
  currency_receipt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_currency_receipt()) {
    currency_receipt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_receipt_);
  }
  final_receipt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_final_receipt()) {
    final_receipt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.final_receipt_);
  }
  is_bid_ = from.is_bid_;
  // @@protoc_insertion_point(copy_constructor:opentxs.OTDB.TradeDataNym_InternalPB)
}

void TradeDataNym_InternalPB::SharedCtor() {
  _cached_size_ = 0;
  gui_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  completed_count_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_sold_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updated_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offer_price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  finished_so_far_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrument_definition_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_paid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_acct_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_acct_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scale_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_receipt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_receipt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_receipt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_bid_ = false;
}

TradeDataNym_InternalPB::~TradeDataNym_InternalPB() {
  // @@protoc_insertion_point(destructor:opentxs.OTDB.TradeDataNym_InternalPB)
  SharedDtor();
}

void TradeDataNym_InternalPB::SharedDtor() {
  gui_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  completed_count_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_sold_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updated_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offer_price_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  finished_so_far_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrument_definition_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_paid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_acct_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_acct_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scale_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_receipt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_receipt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_receipt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TradeDataNym_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TradeDataNym_InternalPB& TradeDataNym_InternalPB::default_instance() {
  ::protobuf_Markets_2eproto::InitDefaultsTradeDataNym_InternalPB();
  return *internal_default_instance();
}

TradeDataNym_InternalPB* TradeDataNym_InternalPB::New(::google::protobuf::Arena* arena) const {
  TradeDataNym_InternalPB* n = new TradeDataNym_InternalPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TradeDataNym_InternalPB::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.OTDB.TradeDataNym_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!gui_label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gui_label_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!completed_count_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*completed_count_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!date_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*date_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!price_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*price_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!amount_sold_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*amount_sold_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!transaction_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*transaction_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!updated_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*updated_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!offer_price_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*offer_price_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(!finished_so_far_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*finished_so_far_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(!instrument_definition_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*instrument_definition_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(!currency_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*currency_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(!currency_paid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*currency_paid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(!asset_acct_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*asset_acct_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(!currency_acct_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*currency_acct_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(!scale_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*scale_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(!asset_receipt_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*asset_receipt_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(!currency_receipt_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*currency_receipt_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(!final_receipt_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*final_receipt_.UnsafeRawStringPointer())->clear();
    }
  }
  is_bid_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TradeDataNym_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.OTDB.TradeDataNym_InternalPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gui_label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gui_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string completed_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_completed_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string date = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string amount_sold = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amount_sold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string transaction_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transaction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string updated_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updated_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string offer_price = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_offer_price()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string finished_so_far = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_finished_so_far()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string instrument_definition_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_definition_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string currency_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string currency_paid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_paid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string asset_acct_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset_acct_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string currency_acct_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_acct_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string scale = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_bid = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_is_bid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_bid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string asset_receipt = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset_receipt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string currency_receipt = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_receipt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string final_receipt = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_final_receipt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.OTDB.TradeDataNym_InternalPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.OTDB.TradeDataNym_InternalPB)
  return false;
#undef DO_
}

void TradeDataNym_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.OTDB.TradeDataNym_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gui_label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gui_label(), output);
  }

  // optional string completed_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->completed_count(), output);
  }

  // optional string date = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->date(), output);
  }

  // optional string price = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->price(), output);
  }

  // optional string amount_sold = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->amount_sold(), output);
  }

  // optional string transaction_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->transaction_id(), output);
  }

  // optional string updated_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->updated_id(), output);
  }

  // optional string offer_price = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->offer_price(), output);
  }

  // optional string finished_so_far = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->finished_so_far(), output);
  }

  // optional string instrument_definition_id = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->instrument_definition_id(), output);
  }

  // optional string currency_id = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->currency_id(), output);
  }

  // optional string currency_paid = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->currency_paid(), output);
  }

  // optional string asset_acct_id = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->asset_acct_id(), output);
  }

  // optional string currency_acct_id = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->currency_acct_id(), output);
  }

  // optional string scale = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->scale(), output);
  }

  // optional bool is_bid = 16;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_bid(), output);
  }

  // optional string asset_receipt = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->asset_receipt(), output);
  }

  // optional string currency_receipt = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->currency_receipt(), output);
  }

  // optional string final_receipt = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->final_receipt(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.OTDB.TradeDataNym_InternalPB)
}

size_t TradeDataNym_InternalPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.OTDB.TradeDataNym_InternalPB)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string gui_label = 1;
    if (has_gui_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gui_label());
    }

    // optional string completed_count = 2;
    if (has_completed_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->completed_count());
    }

    // optional string date = 3;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional string price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->price());
    }

    // optional string amount_sold = 5;
    if (has_amount_sold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->amount_sold());
    }

    // optional string transaction_id = 6;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transaction_id());
    }

    // optional string updated_id = 7;
    if (has_updated_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updated_id());
    }

    // optional string offer_price = 8;
    if (has_offer_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->offer_price());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string finished_so_far = 9;
    if (has_finished_so_far()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->finished_so_far());
    }

    // optional string instrument_definition_id = 10;
    if (has_instrument_definition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument_definition_id());
    }

    // optional string currency_id = 11;
    if (has_currency_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency_id());
    }

    // optional string currency_paid = 12;
    if (has_currency_paid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency_paid());
    }

    // optional string asset_acct_id = 13;
    if (has_asset_acct_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->asset_acct_id());
    }

    // optional string currency_acct_id = 14;
    if (has_currency_acct_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency_acct_id());
    }

    // optional string scale = 15;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scale());
    }

    // optional string asset_receipt = 17;
    if (has_asset_receipt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->asset_receipt());
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional string currency_receipt = 18;
    if (has_currency_receipt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency_receipt());
    }

    // optional string final_receipt = 19;
    if (has_final_receipt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->final_receipt());
    }

    // optional bool is_bid = 16;
    if (has_is_bid()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeDataNym_InternalPB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TradeDataNym_InternalPB*>(&from));
}

void TradeDataNym_InternalPB::MergeFrom(const TradeDataNym_InternalPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.OTDB.TradeDataNym_InternalPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gui_label();
      gui_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gui_label_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_completed_count();
      completed_count_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.completed_count_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_date();
      date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_price();
      price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_amount_sold();
      amount_sold_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_sold_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_transaction_id();
      transaction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_id_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_updated_id();
      updated_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.updated_id_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_offer_price();
      offer_price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.offer_price_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_finished_so_far();
      finished_so_far_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.finished_so_far_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_instrument_definition_id();
      instrument_definition_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrument_definition_id_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_currency_id();
      currency_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_id_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_currency_paid();
      currency_paid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_paid_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_asset_acct_id();
      asset_acct_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_acct_id_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_currency_acct_id();
      currency_acct_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_acct_id_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_scale();
      scale_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scale_);
    }
    if (cached_has_bits & 0x00008000u) {
      set_has_asset_receipt();
      asset_receipt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_receipt_);
    }
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      set_has_currency_receipt();
      currency_receipt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_receipt_);
    }
    if (cached_has_bits & 0x00020000u) {
      set_has_final_receipt();
      final_receipt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.final_receipt_);
    }
    if (cached_has_bits & 0x00040000u) {
      is_bid_ = from.is_bid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TradeDataNym_InternalPB::CopyFrom(const TradeDataNym_InternalPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.OTDB.TradeDataNym_InternalPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeDataNym_InternalPB::IsInitialized() const {
  return true;
}

void TradeDataNym_InternalPB::Swap(TradeDataNym_InternalPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradeDataNym_InternalPB::InternalSwap(TradeDataNym_InternalPB* other) {
  using std::swap;
  gui_label_.Swap(&other->gui_label_);
  completed_count_.Swap(&other->completed_count_);
  date_.Swap(&other->date_);
  price_.Swap(&other->price_);
  amount_sold_.Swap(&other->amount_sold_);
  transaction_id_.Swap(&other->transaction_id_);
  updated_id_.Swap(&other->updated_id_);
  offer_price_.Swap(&other->offer_price_);
  finished_so_far_.Swap(&other->finished_so_far_);
  instrument_definition_id_.Swap(&other->instrument_definition_id_);
  currency_id_.Swap(&other->currency_id_);
  currency_paid_.Swap(&other->currency_paid_);
  asset_acct_id_.Swap(&other->asset_acct_id_);
  currency_acct_id_.Swap(&other->currency_acct_id_);
  scale_.Swap(&other->scale_);
  asset_receipt_.Swap(&other->asset_receipt_);
  currency_receipt_.Swap(&other->currency_receipt_);
  final_receipt_.Swap(&other->final_receipt_);
  swap(is_bid_, other->is_bid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string TradeDataNym_InternalPB::GetTypeName() const {
  return "opentxs.OTDB.TradeDataNym_InternalPB";
}


// ===================================================================

void TradeListNym_InternalPB::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeListNym_InternalPB::kTradesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeListNym_InternalPB::TradeListNym_InternalPB()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Markets_2eproto::InitDefaultsTradeListNym_InternalPB();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.OTDB.TradeListNym_InternalPB)
}
TradeListNym_InternalPB::TradeListNym_InternalPB(const TradeListNym_InternalPB& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opentxs.OTDB.TradeListNym_InternalPB)
}

void TradeListNym_InternalPB::SharedCtor() {
  _cached_size_ = 0;
}

TradeListNym_InternalPB::~TradeListNym_InternalPB() {
  // @@protoc_insertion_point(destructor:opentxs.OTDB.TradeListNym_InternalPB)
  SharedDtor();
}

void TradeListNym_InternalPB::SharedDtor() {
}

void TradeListNym_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TradeListNym_InternalPB& TradeListNym_InternalPB::default_instance() {
  ::protobuf_Markets_2eproto::InitDefaultsTradeListNym_InternalPB();
  return *internal_default_instance();
}

TradeListNym_InternalPB* TradeListNym_InternalPB::New(::google::protobuf::Arena* arena) const {
  TradeListNym_InternalPB* n = new TradeListNym_InternalPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TradeListNym_InternalPB::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.OTDB.TradeListNym_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TradeListNym_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.OTDB.TradeListNym_InternalPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .opentxs.OTDB.TradeDataNym_InternalPB trades = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_trades()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.OTDB.TradeListNym_InternalPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.OTDB.TradeListNym_InternalPB)
  return false;
#undef DO_
}

void TradeListNym_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.OTDB.TradeListNym_InternalPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentxs.OTDB.TradeDataNym_InternalPB trades = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trades_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->trades(static_cast<int>(i)), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.OTDB.TradeListNym_InternalPB)
}

size_t TradeListNym_InternalPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.OTDB.TradeListNym_InternalPB)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .opentxs.OTDB.TradeDataNym_InternalPB trades = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->trades_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trades(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeListNym_InternalPB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TradeListNym_InternalPB*>(&from));
}

void TradeListNym_InternalPB::MergeFrom(const TradeListNym_InternalPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.OTDB.TradeListNym_InternalPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
}

void TradeListNym_InternalPB::CopyFrom(const TradeListNym_InternalPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.OTDB.TradeListNym_InternalPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeListNym_InternalPB::IsInitialized() const {
  return true;
}

void TradeListNym_InternalPB::Swap(TradeListNym_InternalPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradeListNym_InternalPB::InternalSwap(TradeListNym_InternalPB* other) {
  using std::swap;
  trades_.InternalSwap(&other->trades_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string TradeListNym_InternalPB::GetTypeName() const {
  return "opentxs.OTDB.TradeListNym_InternalPB";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace OTDB
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)
