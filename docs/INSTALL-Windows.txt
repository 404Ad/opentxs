########################################################################
#                                                                      #
#                                                                      #
#                      ##  INSTALL - Windows   ##                      #
#                                                                      #
#                                                                      #
########################################################################


## Guide for OT on Windows

Note:
 You can run OT on Windows Vista SP2 or later, however you must compile
 and build OT from the latest version of windows.  (building on old versions
 of windows may work however, is not supported by da2ce7).

# BUILD

Note:
 This build guide has been tested on Windows 8.1, I believe that with few or any
 changes it may work from windows 7 sp1 and later.

 The "development folder" is the root where the Open Transactions resides.
 ie: ..\dev\Open-Transactions where 'dev' is the development folder.

Dependencies (installed):
1. Visual Studio 2013 (the free express for windows desktop version works just fine).

2. Git (While not compulsorily, it is strongly recommended:
     Download from here: http://git-scm.com/download/win
     During setup, in the "Adjusting your PATH environment" screen make sure to select
     "Use Git and optional Unix tools from the Windows Command Prompt"
     since OT uses tools like 'sed' in its Cmaake build files.

3. Cmake 3.0.0: 
    This is the current build system for OT
    http://www.cmake.org/cmake/resources/software.html
    During install 'Add to Windows PATH'

4. OpenSSL 1.0.1: Download and follow instructions for win32.
    http://slproweb.com/products/Win32OpenSSL.html
    Install "Win32 OpenSSL v1.0,1h" or higher with default settings to the default locations.
    
5. ZeroMQ 4.0.4:
    http://zeromq.org/distro:microsoft-windows
    Install "x86 build for Windows XP SP3 and newer" with default settings to the default locations.
    
6. LLVM 3.4.1: (This exact version for now)
    This will install the clang-format auto-reformatter
    http://llvm.org/releases/download.html
    During install 'Add to Windows PATH'
    
7. Java (Optional, not recommended unless needed):
    http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html

Dependencies (packaged):
1. Protoc (Protocol Buffers Compiler), download the latest:
    protoc-2.5.0-win32.zip: http://code.google.com/p/protobuf/downloads/list
    extract to ..\dev\protoc-2.5.0-win32

2. SWIG (optional for now, needed to regenerate the swig interface file).
    swigwin-2.0.11.zip: http://www.swig.org/download.html
    extract to ..\dev\swigwin-2.0.11

    SWIG Version 3.0.0 or newer required.


Note:
 How to install these dependencies.
 To make use of the compile dependencies you need to copy, (as they are), the following
 folders into your Open-Transactions folder.
   include and lib



## Open Transactions ##


Make sure the Cmake environment variables are set up correctly so it can find the
externally installed dependencies:

CMAKE_INCLUDE_PATH needs to point to the external include folders for
- protobuf
- openssl
- zlib
- ZeroMQ

Example:
CMAKE_INCLUDE_PATH=D:\Work\Monetas\protobuf-2.5.0\include;C:\OpenSSL-Win32\include;C:\Program Files (x86)\GnuWin32\include;C:\Program Files (x86)\ZeroMQ 4.0.4\include

CMAKE_LIBRARY_PATH needs to point to the external library folders for
- protobuf
- openssl
- zlib
- ZeroMQ

Example:
CMAKE_LIBRARY_PATH=D:\Work\Monetas\protobuf-2.5.0\lib\win32\debug;C:\OpenSSL-Win32\lib\VC;C:\Program Files (x86)\GnuWin32\lib;C:\Program Files (x86)\ZeroMQ 4.0.4\lib


Also make sure the Windows PATH environment variable can find the ZeroMQ and zlib dll's

Example:
PATH %PATH%;C:\Program File (x86)\ZeroMQ 4.0.4\bin;C:\Program Files (x86)\GnuWin32\bin



Using the command prompt: open up ..\dev\ folder.

$ git clone http://github.com/Open-Transactions/opentxs.git
$ cd opentxs
$ md build
$ cd build
$ cmake ..

open the project solution: .\build\opentxs.sln
and build all (F7)
the output is in the directory .\build\bin\Debug


## Running OT ##

1. Running OT for the first time.

Create folders and config files on first run:

a. In Visual Studio open set project "opentxs" as the startup project.
b. Press F5 or select "start debugging" to start opentxs.

## When you load up the first time it will not load. ##


2. Setting the script directory to your development folder:

a. In the file explorer open up you AppData/Roaming folder.
b. Navigate to the newly created OpenTransactions folder.
c. Open the ot_init.cfg in notepad
d. Under [paths] change:
     scripts_is_relative = false
     scripts = Full path to:  ..\dev\Open-Transactions\scripts\ot

^^ replace with the actual full path

3.  Now you should be fine to run OT.

If OT ever doesn't exit cleanly you will need to delete the pid file.
 
  

## Making Windows Installers ##

1. Download and install nsis builder.
    unicode: http://code.google.com/p/unsis/downloads/list
    x64: https://bitbucket.org/dgolub/nsis64/downloads


2. To generate installer: right click on the file and select
   the correct compiler.

   Run ..\project\setup.nsi with the x86 Unicode.
   Run ..\project\setup_x64.nsi with the x64.





## Have fun!!!!!



